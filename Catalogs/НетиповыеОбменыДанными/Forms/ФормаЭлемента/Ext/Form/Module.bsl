///////////////////////////////////////////////////////////////////////////////////
//	Рекомендации по доработке данной формы:
//  Предполагается, что в этом справочнике вы можете добавлять произвольное количество новых реквизитов
//  (если они нужны вашему обмену)

// 	Соблюдайте несколько простых правил:

//  Реквизиты/элементы  на форму добавляйте в группу формы "СтраницаДополнительныеНастройки"
//  в описании своей обработки вы можете указать, какие из этих новых элементов должны быть видны.
//	Остальные элементы этой группы будут невидимы.

//  Если необходимо дополнительно управлять видимостью - вставляйте свои алгоритмы в процедуру 
//	"УправлениеВидимостью_Переопределяемая"

//  Если вдруг нужно, чтобы при создании нового элемент справочника эти новые реквизиты очищались - 
//	используйте процедуру "НачальнаяОчисткаПолей_Переопределяемая"

//	Коллеги, подходите к изменению формы осознанно, чтобы при возможном последующем обновлении у вас 
//	было все хорошо. 

//	Вопросы, пожелания? Пишите! Константин Зонин kzonin@ford.com
///////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура СинонимОбработкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НачальнаяОчисткаПолей();	
	ПриВыбореОбработки(ВыбранноеЗначение);
	УправлениеВидимостью();
	ПриВыбореОбработки_Переопределяемый();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Элементы.ВидОбмена.ТолькоПросмотр = Не ОписаниеОбработкиОбмена.ВидОбмена = Неопределено;
	Элементы.СпособПередачиДанных.ТолькоПросмотр = Не ОписаниеОбработкиОбмена.СпособПередачиДанных = Неопределено;
	
	Элементы.НастройкиИзDFS.Видимость = (Не ПустаяСтрока(Объект.НастройкиОбмена) или ОписаниеОбработкиОбмена.XML_НастройкаОбязательна);
    Элементы.ПредупреждениеОНеобходимостиЗаданияXMLНастроек.Видимость = ПустаяСтрока(Объект.НастройкиОбмена) и ОписаниеОбработкиОбмена.XML_НастройкаОбязательна;
	
	Элементы.ПороговаяДлительностьОбмена.Видимость = Объект.ИзмерятьДлительностьВыполненияОбмена;
	Элементы.ГруппаПороговаяДлительностьОбмена.Видимость = Объект.ИзмерятьДлительностьВыполненияОбмена;
	Элементы.ЗапускатьРеглЗаданиеПриРегистрации.Видимость = ОписаниеОбработкиОбмена.ИспользованиеРегламентогоЗадания и ОписаниеОбработкиОбмена.ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена;
	
	Элементы.ЗапускатьРеглЗаданиеПриРегистрации.Доступность = Не ОписаниеОбработкиОбмена.РегистрацииДанныхНаУзлеОбменаЯвляетсяБезусловной;
	
	Если ОписаниеОбработкиОбмена.РегистрацииДанныхНаУзлеОбменаЯвляетсяБезусловной Тогда 
		Если Объект.ЗапускатьРеглЗаданиеПриРегистрации Тогда
			Объект.ЗапускатьРеглЗаданиеПриРегистрации = Ложь;
		КонецЕсли; 
		Если Не Объект.ВключитьРегистрациюИзмененийВПланеОбмена Тогда
			Объект.ВключитьРегистрациюИзмененийВПланеОбмена = Истина;
		КонецЕсли; 
	КонецЕсли; 
	Элементы.НадписьПредупреждениеОБезусловнойРегистрацииОбъектовНаУзле.Видимость = ОписаниеОбработкиОбмена.РегистрацииДанныхНаУзлеОбменаЯвляетсяБезусловной;
	
	Элементы.ВключитьРегистрациюИзмененийВПланеОбмена.Видимость = ОписаниеОбработкиОбмена.ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена; 
	Элементы.ВключитьРегистрациюИзмененийВПланеОбмена.Доступность = Не ОписаниеОбработкиОбмена.РегистрацииДанныхНаУзлеОбменаЯвляетсяБезусловной;
	Если Объект.ЗапускатьРеглЗаданиеПриРегистрации и не ОписаниеОбработкиОбмена.ИспользованиеРегламентогоЗадания Тогда
		Объект.ЗапускатьРеглЗаданиеПриРегистрации = Ложь;
	КонецЕсли;
	
	Элементы.УзелРегистрацииИзменений.Видимость = ОписаниеОбработкиОбмена.ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена;
	Если НЕ Элементы.ГруппаРегистрацияДанных.Видимость Тогда
		Если Объект.ВключитьРегистрациюИзмененийВПланеОбмена Тогда
			Объект.ВключитьРегистрациюИзмененийВПланеОбмена = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ОткрытьФормуРегистрацииДанныхНаУзле.Видимость = ЗначениеЗаполнено(Объект.УзелРегистрацииИзменений) и ОписаниеОбработкиОбмена.ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена;
	Элементы.ПодписьРегламентноеЗадание.Видимость = ОписаниеОбработкиОбмена.ИспользованиеРегламентогоЗадания;
	Элементы.УдалитьРегламентноеЗадание.Видимость = Не ПустаяСтрока(Объект.РегламентноеЗаданиеGUID) и Не ОписаниеОбработкиОбмена.ИспользованиеРегламентогоЗадания;
	Элементы.ПоказатьРегламентноеЗадание.Видимость = ЗначениеЗаполнено(Объект.РегламентноеЗаданиеGUID);	
	// установка видимости счетчиков пакетов согласно описанию обработки
	Элементы.НомерВыгруженногоПакета.Видимость = ОписаниеОбработкиОбмена.ПоказыватьСчетчикВыгруженныхПакетов;
	Элементы.НомерЗагруженногоПакета.Видимость = ОписаниеОбработкиОбмена.ПоказыватьСчетчикЗагруженныхПакетов;
	Элементы.АварийноеЗавершениеРегламентногоЗаданияЕслиЕстьОшибкаПолученияУчетныхДанныхИзPMS.Видимость = ПотребностьВОбращенииВPMS;
	// установка видимости дополнительных элементов согласно описанию обработки
		// прячем все реквизиты, вложенные в группу "СтраницаДополнительныеНастройки"
	Для каждого ЭлементФормы Из Элементы.СтраницаДополнительныеНастройки.ПодчиненныеЭлементы Цикл
		Если ЭлементФормы <> Элементы.ГруппаДополнительныеРеквизиты Тогда
			Элементы[ЭлементФормы.Имя].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// прячем все страницы, кроме трех основных
	Для каждого ЭлементФормы Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Если ЭлементФормы <> Элементы.СтраницаОсновная и ЭлементФормы <> Элементы.НастройкиИзDFS и ЭлементФормы <> Элементы.СтраницаДополнительныеНастройки Тогда
			Элементы[ЭлементФормы.Имя].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НастройкаРазрешенногоВремениЗапуска.Видимость = Объект.ЗапускОбменаРазрешенТолькоВОпределенномИнтервалеИТолькоЕдиножды;
	Элементы.ОтключитьВыполнениеЭтогоОбмена.Видимость = Объект.СпособПередачиДанных = ПредопределенноеЗначение("Перечисление.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host");
	
	// включаем видимость элементов, указанных в описании обработки
	Для каждого ИмяЭлементаФормы Из ОписаниеОбработкиОбмена.ВидимыеДополнительныеЭлементыФормы Цикл
		Попытка
			Элементы[ИмяЭлементаФормы].Видимость = Истина;
		Исключение
			Сообщить("Неудачная попытка установки видимости элемента формы с именем """+ИмяЭлементаФормы+""":"+ ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	
// выключаем видимость элементов	
	// включаем видимость элементов, указанных в описании обработки
	Для каждого ИмяЭлементаФормы Из ОписаниеОбработкиОбмена.НеВидимыеДополнительныеЭлементыФормы Цикл
		Попытка
			Элементы[ИмяЭлементаФормы].Видимость = Ложь;
		Исключение
			Сообщить("Неудачная попытка установки видимости элемента формы с именем """+ИмяЭлементаФормы+""":"+ ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	
	УправлениеВидимостью_Переопределяемая();
КонецПроцедуры


&НаКлиенте
Процедура ЗапускОбменаРазрешенТолькоВОпределенномИнтервалеИТолькоЕдинождыПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
	УправлениеВидимостью();
	ПриОткрытии_Переопределяемый();
	Если Не ПустаяСтрока(Объект.ИмяОбработкиОбмена)  и Элементы.СинонимОбработки.ТолькоПросмотр Тогда
	
		Если Объект.ВидОбмена <> ОписаниеОбработкиОбмена.ВидОбмена Тогда
			Объект.ВидОбмена = ОписаниеОбработкиОбмена.ВидОбмена;
		КонецЕсли;
		Если Объект.СпособПередачиДанных <> ОписаниеОбработкиОбмена.СпособПередачиДанных Тогда
			Объект.СпособПередачиДанных = ОписаниеОбработкиОбмена.СпособПередачиДанных;
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОграничениеТипаУзлаРегистрацииИзменений()
	Если ОписаниеОбработкиОбмена.ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена Тогда
		ТипыДляВыбора = Новый Массив;
		Если ОписаниеОбработкиОбмена.ТипыПлановОбменовДляВыбора.Количество()=0 Тогда
			ТипыДляВыбора.Добавить(Тип("ПланОбменаСсылка.НетиповыеОбмены"));
		Иначе
			ТипыДляВыбора = ОписаниеОбработкиОбмена.ТипыПлановОбменовДляВыбора;
		КонецЕсли; 
		Элементы.УзелРегистрацииИзменений.ОграничениеТипа = Новый ОписаниеТипов(ТипыДляВыбора);
	КонецЕсли; 
КонецФункции

&НаСервере
Функция ПриВыбореОбработки(ОписаниеВыбраннойОбработки)

	ТекстСообщения = "";
	
	
	ОписаниеОбработкиОбмена = ОписаниеВыбраннойОбработки;
	Объект.Описание = ОписаниеВыбраннойОбработки.ТекстовоеОписаниеОбмена;
	Объект.СинонимОбработкиОбмена = ОписаниеВыбраннойОбработки.СинонимОбработки;
	Если Объект.ИмяОбработкиОбмена <> ОписаниеВыбраннойОбработки.ИмяОбработки Тогда
		// задание значений реквизитов
		Объект.ИмяОбработкиОбмена = ОписаниеВыбраннойОбработки.ИмяОбработки;
		
		Если ОписаниеВыбраннойОбработки.ВидОбмена <> Неопределено и Объект.ВидОбмена <> ОписаниеВыбраннойОбработки.ВидОбмена Тогда
			Объект.ВидОбмена = ОписаниеВыбраннойОбработки.ВидОбмена;
		КонецЕсли;
		
		Если ОписаниеВыбраннойОбработки.СпособПередачиДанных <> Неопределено и Объект.СпособПередачиДанных <> ОписаниеВыбраннойОбработки.СпособПередачиДанных Тогда
			Объект.СпособПередачиДанных = ОписаниеВыбраннойОбработки.СпособПередачиДанных;
		КонецЕсли;
	КонецЕсли;
	
	ОграничениеТипаУзлаРегистрацииИзменений();

КонецФункции

&НаСервере
Процедура ИнициализацияСпискаОбработок()

	ТекстОшибки = "";
	СписокДоступныхОбработок = ПолучитьСписокДоступныхОбработок(Объект.Ссылка,ТекстОшибки);	
	Элементы.СинонимОбработки.СписокВыбора.Очистить();
	КоличествоНайденныхОбработок = СписокДоступныхОбработок.Количество();
	Если КоличествоНайденныхОбработок = 0 Тогда
		Сообщить("Для данного обмена не обнаружено ни одной подходящей обработки обмена. Обратитесь к разработчкам.");
		Возврат;
	ИначеЕсли КоличествоНайденныхОбработок = 1 Тогда
		Если СписокДоступныхОбработок[0].Значение.ИмяОбработки <> Объект.ИмяОбработкиОбмена Тогда
			ПриВыбореОбработки(СписокДоступныхОбработок[0].Значение);
		КонецЕсли;
		Элементы.СинонимОбработки.ТолькоПросмотр = Истина;
	Иначе
		Для каждого ДоступнаяОбработка Из СписокДоступныхОбработок Цикл
			Элементы.СинонимОбработки.СписокВыбора.Добавить(ДоступнаяОбработка.Значение,ДоступнаяОбработка.Представление);
		КонецЦикла;
		Элементы.СинонимОбработки.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальнаяОчисткаПолей()

	Объект.СинонимОбработкиОбмена = "";
	Объект.ИмяОбработкиОбмена = "";
	Объект.РегламентноеЗаданиеGUID = "";
	Объект.НомерЗагруженногоПакета = 0;
	Объект.НомерВыгруженногоПакета = 0;
	Объект.ПоследнийДокументИзмененияНастройкиОбмена = "";
	Объект.НастройкиОбмена = "";
	Объект.УзелРегистрацииИзменений = "";
	НачальнаяОчисткаПолей_Переопределяемая();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	ТекстОшибки = "";
	
	Если Объект.Ссылка.Пустая() Тогда
		НачальнаяОчисткаПолей();
	Иначе
		ПотребностьВОбращенииВPMS = РаботасОбменомДанными.ОбменБеретУчетныеДанныеИзPMS(Объект.Ссылка);
	КонецЕсли;
	
	ИнициализацияСпискаОбработок();
	
	ТекстОшибки = "";
	ОписаниеОбработкиОбмена = СчитатьОписаниеОбработкиОбмена(Объект.ИмяОбработкиОбмена,ТекстОшибки);	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Сообщить("Ошибка чтения настроек из обработки обмена: "+Символы.ПС+ТекстОшибки);
	Иначе
		ОграничениеТипаУзлаРегистрацииИзменений();
	КонецЕсли;
	
	
	// подготовка XML-настроек для отображения в виде дерева
	ТекстОшибки = "";
	Если Не ПустаяСтрока(Объект.НастройкиОбмена) Тогда
		ТекДерево = реквизитФормывзначение("НастройкиОбмена_Деревом");
		ПолучитьДеревоЗначенийИзXMLСтроки(ТекДерево,Объект.НастройкиОбмена,ТекстОшибки);		
		ЗначениеВРеквизитФормы(ТекДерево,"НастройкиОбмена_Деревом");
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Сообщить("Ошибка чтения настроек обмена из XML-строки: "+Символы.ПС+ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	ОбщиеНастройки = Константы.ОбщиеНастройкиОбменов.Получить();
	Если Не ПустаяСтрока(ОбщиеНастройки) Тогда
		ТекДерево = реквизитФормывзначение("ОбщиеНастройки_Деревом");
		ПолучитьДеревоЗначенийИзXMLСтроки(ТекДерево,ОбщиеНастройки,ТекстОшибки);		
		ЗначениеВРеквизитФормы(ТекДерево,"ОбщиеНастройки_Деревом");
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Сообщить("Ошибка чтения общих настроек обмена из XML-строки: "+Символы.ПС+ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// определение момента выполнения последнего обмена
	Если Не Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВремяПоследнегоЗапускаОбменов.Дата
			|ИЗ
			|	РегистрСведений.ВремяПоследнегоЗапускаОбменов КАК ВремяПоследнегоЗапускаОбменов
			|ГДЕ
			|	ВремяПоследнегоЗапускаОбменов.ОбменДанными = &ОбменДанными";

		Запрос.УстановитьПараметр("ОбменДанными", Объект.Ссылка);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВремяПоследнегоЗапуска = ВыборкаДетальныеЗаписи.Дата;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ТекстСообщения = "";
	ТекстОшибки = "";
	
	СписокДоступныхОбработок = ПолучитьСписокДоступныхОбработок(Объект.Ссылка,ТекстОшибки);	
	флМожноЗаписать = Ложь;
	Для каждого ДоступнаяОбработка Из СписокДоступныхОбработок Цикл
		Если ДоступнаяОбработка.Значение.ИмяОбработки = Объект.ИмяОбработкиОбмена Тогда
			флМожноЗаписать = Истина;
			прервать;
		КонецЕсли;;
	КонецЦикла;
	Если флМожноЗаписать = Ложь Тогда
	
		Отказ = Истина;
		Сообщить("Выбранная вами обработка уже использована в другом обмене.");
	    Возврат;
	КонецЕсли;
	// проверка на заполненность реквизитов, обязательных для выбранной обработки обмена
	Для каждого ИмяРеквизита Из ОписаниеОбработкиОбмена.РеквизитыОбязательныеДляЗаполнения Цикл

		Попытка
			СинонимРеквизита = Метаданные.Справочники.НетиповыеОбменыДанными.Реквизиты[ИмяРеквизита].Синоним;
		Исключение
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС)+"Ошибка в описании обработки, реквизит """+ИмяРеквизита+""" не существует.";
			продолжить;
		КонецПопытки;
		Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+""""+СинонимРеквизита+""""
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Отказ = Истина;
		Сообщить("Согласно описания обработки обмена"+Символы.ПС+"следующие реквизиты обязательны для заполнения: "+Символы.ПС+ТекстСообщения);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Отказ = Истина;
		Сообщить(ТекстОшибки);
	КонецЕсли;
	ПередЗаписьюНаСервере_Переопределяемый(Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	Если Элементы.УзелРегистрацииИзменений.Видимость и Объект.ВключитьРегистрациюИзмененийВПланеОбмена И НЕ ЗначениеЗаполнено(Объект.УзелРегистрацииИзменений) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Поле = "УзелРегистрацииИзменений";
		Сообщение.Текст = "Не заполнен узел регистрации изменений";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмерятьДлительностьВыполненияОбменаПриИзменении(Элемент)
	УправлениеВидимостью()
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоЗначенийИзXMLСтроки(РезультатДерево,XMLСтрока,ТекстОщибки)
	РезультатДерево.Строки.Очистить();
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(XMLСтрока);
		ЧтениеXML.Прочитать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат
	КонецПопытки;
	РезультатДерево.Строки.Очистить();
	МассивОткрытыхСтрок = Новый Массив;
	ПоследняяОткрытаяСтрока = Неопределено;
	Пока ЧтениеXML.Прочитать() Цикл
 	 	Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
 	 		Если МассивОткрытыхСтрок.Количество() Тогда
 	 			_Родитель = МассивОткрытыхСтрок[МассивОткрытыхСтрок.Количество()-1];
			Иначе
 	 			_Родитель = РезультатДерево;
			КонецЕсли;
			ПоследняяОткрытаяСтрока = _Родитель.Строки.Добавить();
			ПоследняяОткрытаяСтрока.НазваниеУзла = ЧтениеXML.Имя;
			МассивОткрытыхСтрок.Добавить(ПоследняяОткрытаяСтрока);
			КоличествоАтрибутов = ЧтениеXML.КоличествоАтрибутов();
			ИмяСАтрибутами = "";
			Если КоличествоАтрибутов>0 Тогда
			
				Для НомерАтрибута = 0 По КоличествоАтрибутов-1 Цикл
				
					//НоваяСтрока = ПоследняяОткрытаяСтрока.Строки.Добавить();
					//НоваяСтрока.НазваниеУзла = ЧтениеXML.ЛокальноеИмяАтрибута(НомерАтрибута);
					//НоваяСтрока.ЗначениеУзла = ЧтениеXML.ПолучитьАтрибут(НомерАтрибута);
					ИмяСАтрибутами = ИмяСАтрибутами +?(ПустаяСтрока(ИмяСАтрибутами),""," ")+ ЧтениеXML.ЛокальноеИмяАтрибута(НомерАтрибута)+"="+ЧтениеXML.ПолучитьАтрибут(НомерАтрибута);
				КонецЦикла;
				ПоследняяОткрытаяСтрока.НазваниеУзла = ПоследняяОткрытаяСтрока.НазваниеУзла+" "+ИмяСАтрибутами;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
 	 		ПоследняяОткрытаяСтрока.ЗначениеУзла = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
 	 		Если МассивОткрытыхСтрок.Количество() Тогда
 	 			МассивОткрытыхСтрок.Удалить(МассивОткрытыхСтрок.Количество()-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентноеЗадание_Сервер()

	НачатьТранзакцию();
	Если Не ПустаяСтрока(Объект.РегламентноеЗаданиеGUID) Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Объект.РегламентноеЗаданиеGUID));
		Если РегламентноеЗадание = Неопределено Тогда
			Объект.РегламентноеЗаданиеGUID = "";
			Возврат;
		Иначе
			Объект.РегламентноеЗаданиеGUID = "";
			РегламентноеЗадание.Удалить();
		КонецЕсли; 
	КонецЕсли;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегламентноеЗадание(Команда)
	Если Вопрос("Регламентное задание, связанное с этим обменом, будет безвозвратно удалено. Продолжить?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	УдалитьРегламентноеЗадание_Сервер();
	УправлениеВидимостью();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЗадействованныхОбработокОбмена(ОбменДанными_Ссылка)

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НетиповыеОбменыДанными.Ссылка <> &ОбменДанными_Ссылка
		|	И НетиповыеОбменыДанными.ИмяОбработкиОбмена > """"
		|
		|СГРУППИРОВАТЬ ПО
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена";

	Запрос.УстановитьПараметр("ОбменДанными_Ссылка", ОбменДанными_Ссылка);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяОбработкиОбмена");


КонецФункции // ПолучитьСписокЗадействованныхОбработокОбмена(ОбменДанными_Ссылка)()

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхОбработок(ОбменДанными_Ссылка,ТекстОшибки)

	//Если Не ЗначениеЗаполнено(ОбменДанными_Ссылка) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	СписокЗадействованныхОбработокОбмена = ПолучитьСписокЗадействованныхОбработокОбмена(ОбменДанными_Ссылка);
	
	Если Не ЗначениеЗаполнено(ОбменДанными_Ссылка) Тогда
		ФормируемСписокДляПредопределенногоОбмена = Ложь;
	Иначе
		ИмяПредопределенногоОбмена = Справочники.НетиповыеОбменыДанными.ПолучитьИмяПредопределенного(ОбменДанными_Ссылка);
		
		Если Не ПустаяСтрока(ИмяПредопределенногоОбмена) Тогда
			ФормируемСписокДляПредопределенногоОбмена = Истина;
		Иначе
			ФормируемСписокДляПредопределенногоОбмена = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	СписокПодходящихОбработок = Новый СписокЗначений;
	
	Для каждого Обработка_Метаданные Из Метаданные.Обработки Цикл
	
		Если Обработка_Метаданные.Реквизиты.Найти("ЭтоОбработкаОбменаДанными")=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ОписаниеТекОбработки = Обработки[Обработка_Метаданные.Имя].ПолучитьОписаниеОбработкиОбмена();
		Исключение
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС)+ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		Если ТипЗНЧ(ОписаниеТекОбработки) <> Тип("Структура") Тогда
			Сообщить("Неверно составлено описание обработки обмена"""+ Обработка_Метаданные.Синоним+"""");
			продолжить;
		КонецЕсли;
		ОписаниеТекОбработки.Вставить("ИмяОбработки",Обработка_Метаданные.Имя);
		ОписаниеТекОбработки.Вставить("СинонимОбработки",Обработка_Метаданные.Синоним);
		Если ФормируемСписокДляПредопределенногоОбмена Тогда
		   // в этом случае мы должны подбирать только те обработки, в которых наш обмен указан в списке предопределенных
			Если ОписаниеТекОбработки.ПредопределенныеОбмены.Найти(ОбменДанными_Ссылка)=Неопределено Тогда
				продолжить;
			КонецЕсли;
		ИначеЕсли Не ОписаниеТекОбработки.ДляМножественныхОбменов и СписокЗадействованныхОбработокОбмена.Найти(Обработка_Метаданные.Имя)<> Неопределено Тогда
			// данная обработка для одиночно обмена и она уже связана с другим обменом
			продолжить;
		Иначе
			// наш обмен - создан вручную в ИБ, для него могут подходить любые обработки, 
			// кроме тех, у которых задан массив предопределенных обменов и свойство ТолькоДляПредопределенныхОбменов = Истина 
			Если ОписаниеТекОбработки.ТолькоДляПредопределенныхОбменов и ОписаниеТекОбработки.ПредопределенныеОбмены.Количество()>0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		СписокПодходящихОбработок.Добавить(ОписаниеТекОбработки,Обработка_Метаданные.Синоним);
	КонецЦикла;
	Возврат СписокПодходящихОбработок;
КонецФункции // 


&НаСервереБезКонтекста
Функция СчитатьОписаниеОбработкиОбмена(ИмяОбработки,ТекстОшибки)

	Возврат Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбмена(ИмяОбработки,ТекстОшибки)

КонецФункции // 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	 Если ОписаниеОбработкиОбмена.ИспользованиеРегламентогоЗадания Тогда
		ТекстОшибки = "";
		СпрОбъект = Объект.Ссылка.ПолучитьОбъект();
		Справочники.НетиповыеОбменыДанными.ОбновитьДанныеРегламентногоЗадания(СпрОбъект,ТекстОшибки);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Сообщить(ТекстОшибки);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.РегламентноеЗаданиеGUID) и Не ПустаяСтрока(СпрОбъект.РегламентноеЗаданиеGUID) Тогда
			СпрОбъект.Записать();
			ЗначениеВРеквизитФормы(СпрОбъект,"Объект");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
КонецПроцедуры

&НаКлиенте
Процедура УзелРегистрацииИзмененийПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегистрацииДанныхНаУзле(Команда)
	ПараметрыФормы = Новый Структура("ИдентификаторКоманды,УзелОбмена","ПоказатьРегистрациюПоУзлуОбмена",Объект.УзелРегистрацииИзменений);
	ОткрытьФорму("Обработка.РегистрацияИзмененийДляОбменаДанными.Форма",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРегламентноеЗадание(Команда)
	ПараметрыФормы = Новый Структура("РегламетноеЗаданиеGUID",Объект.РегламентноеЗаданиеGUID);
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправлениеВидимостью();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры


&НаСервере
Функция ЭтотУзелНельзявыбирать(Узел)
	Если ТипЗнч(Узел) = Тип("Тип")Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если Узел = ПланыОбмена[Узел.Метаданные().Имя].ЭтотУзел() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ОбновитьДеревоВыгружаемыхМетаданных(Узел)
	Если Не ЗначениеЗаполнено(Узел) или ТипЗнч(Узел)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли; 
	времДеревоМетаданных = РеквизитФормыВЗначение("ДеревоМетаданных");
	времДеревоМетаданных.Строки.Очистить();
	СоставМетаданныхУзла = Узел.Метаданные().Состав;
	ВыбранныеДляВыгрузкиМетаданные = Объект.ВыгружаемыеМетаданные.Выгрузить();
	
	ВыгружаемыеТипы = новый Массив;
	ВыгружаемыеТипы.Добавить(Новый Структура("Метаданные,Имя,Представление",Метаданные.Константы,"Константа","Константы"));
	ВыгружаемыеТипы.Добавить(Новый Структура("Метаданные,Имя,Представление",Метаданные.Справочники,"Справочник","Справочники"));
	ВыгружаемыеТипы.Добавить(Новый Структура("Метаданные,Имя,Представление",Метаданные.Документы,"Документ","Документы"));
	ВыгружаемыеТипы.Добавить(Новый Структура("Метаданные,Имя,Представление",Метаданные.ПланыВидовХарактеристик,"ПланВидовХарактеристик","Планы видов характеристик"));
	ВыгружаемыеТипы.Добавить(Новый Структура("Метаданные,Имя,Представление",Метаданные.РегистрыСведений,"РегистрСведений","Регистры сведений"));
	                               
	Для каждого ВыгружаемыйТип Из ВыгружаемыеТипы Цикл
		СписокПодходящихВидовМетаданных = Новый СписокЗначений;
		МетаданныхВыбраноДляВыгрузки = 0;
		
		Для каждого ВидМетаданных Из ВыгружаемыйТип.Метаданные Цикл
			Если Не СоставМетаданныхУзла.Содержит(ВидМетаданных) Тогда
				продолжить;
			КонецЕсли;
			ПараметрыПоиска = новый Структура("Тип,ПолноеИмяМетаданных",ВыгружаемыйТип.Имя,ВидМетаданных.Имя);
			НайденныеСтроки = ВыбранныеДляВыгрузкиМетаданные.НайтиСтроки(ПараметрыПоиска);
			ЭтиМетаданныеВыбраныДляВыгрузки = ?(НайденныеСтроки.Количество()>0,Истина,Ложь);
			КоличествоВыгружаемыхОбъектов = 0;
			Если ЭтиМетаданныеВыбраныДляВыгрузки Тогда
				МетаданныхВыбраноДляВыгрузки = МетаданныхВыбраноДляВыгрузки+1;
				КоличествоВыгружаемыхОбъектов = НайденныеСтроки[0].КоличествоВыгружаемыхОбъектов;
			КонецЕсли; 	
			СписокПодходящихВидовМетаданных.Добавить(ВидМетаданных,КоличествоВыгружаемыхОбъектов,ЭтиМетаданныеВыбраныДляВыгрузки);
		КонецЦикла;
		
		Если СписокПодходящихВидовМетаданных.Количество()=0 Тогда
			// у этого типа метаданных нет выгружаемых видов
			Продолжить;
		КонецЕсли;
		
		ВетвьТипаМетаданных = времДеревоМетаданных.Строки.Добавить();
		ВетвьТипаМетаданных.Представление = ВыгружаемыйТип.Представление;
		ВетвьТипаМетаданных.ПолноеИмяМетаданных = ВыгружаемыйТип.Имя;
		ВетвьТипаМетаданных.ЭтоКонечныйЭлемент = Ложь;
		Если МетаданныхВыбраноДляВыгрузки = 0 Тогда
			ВетвьТипаМетаданных.Выгружать = 0;
		ИначеЕсли МетаданныхВыбраноДляВыгрузки=СписокПодходящихВидовМетаданных.Количество() Тогда 	
			ВетвьТипаМетаданных.Выгружать = 1;
		Иначе
			ВетвьТипаМетаданных.Выгружать = 2;
			
		КонецЕсли; 
		
		Для каждого ПодходящийВидМетаданных Из СписокПодходящихВидовМетаданных Цикл
			КонечныйЭлемент = ВетвьТипаМетаданных.Строки.Добавить();
			КонечныйЭлемент.Тип = ВыгружаемыйТип.Имя;
			КонечныйЭлемент.ПолноеИмяМетаданных = ПодходящийВидМетаданных.Значение.Имя;
			КонечныйЭлемент.Представление = ПодходящийВидМетаданных.Значение.Синоним;
			КонечныйЭлемент.Выгружать = ?(ПодходящийВидМетаданных.Пометка,1,0);
			КонечныйЭлемент.КоличествоВыгружаемыхОбъектов = ПодходящийВидМетаданных.Представление;
			КонечныйЭлемент.ЭтоКонечныйЭлемент = Истина;
		КонецЦикла;
		ВетвьТипаМетаданных.Строки.Сортировать("Представление", Ложь)
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(времДеревоМетаданных,"ДеревоМетаданных");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоМетаданныхКоличествоВыгружаемыхОбъектов" Тогда
		Отказ = Не Элементы.ДеревоМетаданных.ТекущиеДанные.ЭтоКонечныйЭлемент или Элементы.ДеревоМетаданных.ТекущиеДанные.Тип = "Константа"
	КонецЕсли; 
КонецПроцедуры


// ПРОЦЕДУРЫ, НАПОЛНЕНИЕ КОТОРЫХ МОЖНО ИЗМЕНЯТЬ
// здесь идет специфика вашей конфигурации
//////////////////////////////////////////////////

&НаСервере
Процедура ПередЗаписьюНаСервере_Переопределяемый(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
	//проверка, чтобы не будлировали точки регистрации	
	Если Элементы.ФильтрПоТочкамРегистрации.Видимость Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УказанныеТочкиРегистрации.ТочкаРегистрации
			|ПОМЕСТИТЬ ТРегистрации
			|ИЗ
			|	&УказанныеТочкиРегистрации КАК УказанныеТочкиРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТРегистрации.ТочкаРегистрации,
			|	КОЛИЧЕСТВО(ТРегистрации.ТочкаРегистрации) КАК Количество
			|ПОМЕСТИТЬ КоличествоТочек
			|ИЗ
			|	ТРегистрации КАК ТРегистрации
			|
			|СГРУППИРОВАТЬ ПО
			|	ТРегистрации.ТочкаРегистрации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоличествоТочек.ТочкаРегистрации
			|ИЗ
			|	КоличествоТочек КАК КоличествоТочек
			|ГДЕ
			|	КоличествоТочек.Количество > 1";

		Запрос.УстановитьПараметр("УказанныеТочкиРегистрации", Объект.ТочкиРегистрации.Выгрузить(,"ТочкаРегистрации"));
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Сообщение = "";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сообщение = Сообщение + "Точка регистрации """ + ВыборкаДетальныеЗаписи.ТочкаРегистрации + """ встречается в табличной части более одного раза.";
		КонецЦикла;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Отказ = Истина;
			Сообщить(Сообщение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью_Переопределяемая()

КонецПроцедуры

&НаСервере
Процедура НачальнаяОчисткаПолей_Переопределяемая()

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореОбработки_Переопределяемый()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии_Переопределяемый()

	
КонецПроцедуры

&НаКлиенте
Процедура СпособАвторизацииНаЭтомВебИнтерфейсеПриИзменении(Элемент)
	СпособАвторизацииНаЭтомВебИнтерфейсеВидимость();
КонецПроцедуры

//Настройка видимости блока с авторизацией для веб-интерфейса
&НаСервере
Процедура СпособАвторизацииНаЭтомВебИнтерфейсеВидимость()
	
	Элементы.ПользовательПодКоторымБудетПроисходитьРаботаСВебИнтерфейсом.Видимость = Объект.СпособАвторизацииНаЭтомВебИнтерфейсе = Перечисления.ВидыАвторизацииПользователейНаWebWorkstation.ИспользоватьАнонимногоПользователя;
	Элементы.ВремяЖизниНеактивнойСессии.Видимость = Объект.СпособАвторизацииНаЭтомВебИнтерфейсе = Перечисления.ВидыАвторизацииПользователейНаWebWorkstation.ВыводитьОкноАвторизацииПользователяПоДаннымДоменнойУчетнойЗаписи; 
	
КонецПроцедуры

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства
#КонецОбласти
