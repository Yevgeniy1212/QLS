

// функция создает структуру со всеми возможными параметрами описания обработки обмена, со значениями по умолчанию.
// ее необходимо использовать в функции "ПолучитьОписаниеОбработкиОбмена" в модуле менеджера всех обработок обмена 

Функция ПолучитьОписаниеОбработкиОбменаПоУмолчанию() Экспорт

	СтруктураПоУмолчанию = Новый Структура();
	СтруктураПоУмолчанию.Вставить("ТекстовоеОписаниеОбмена",Неопределено);
// произвольное текстовое описание обмена
	
	СтруктураПоУмолчанию.Вставить("ВидОбмена",Неопределено);
 // значение реквизита обмена данными по умолчанию	
	
	СтруктураПоУмолчанию.Вставить("СпособПередачиДанных",Неопределено);
//значение реквизита обмена данными по умолчанию	
	
	СтруктураПоУмолчанию.Вставить("XML_НастройкаОбязательна",Ложь);
// в функции РаботаСОбменомДанными.ВыполнитьОбмен делается проверка, если "Истина" и для обмена не заданы XML настройки подключения, то это вызывает остановку с ошибкой	
	
	СтруктураПоУмолчанию.Вставить("ИспользованиеРегламентогоЗадания",Ложь); 
// Если "Истина", то к обмену автоматически создается регламентное задание	

	СтруктураПоУмолчанию.Вставить("ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена",Ложь); 
// если "Истина", то в обмене появляется возможность задать узел плана обмена и опционально указать запуск рег.задания по событию регистрации данных на этом узле 	
	
	СтруктураПоУмолчанию.Вставить("РегистрацииДанныхНаУзлеОбменаЯвляетсяБезусловной",Ложь); 
	
// если "Истина", то в настройках обмена нельзя устанавливать флажки "ВключитьРегистрациюИзмененийВПланеОбмена" и "ЗапускатьРеглЗаданиеПриРегистрации"
//имеет смысл задавать только в связке с параметром "ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена"=Истина

	СтруктураПоУмолчанию.Вставить("ТипыПлановОбменовДляВыбора", новый Массив); 
// здесь необходимо перечислить планы обмена, узлы которых будут доступны для выбора пользователю, пример:
// СтруктураНастроек.ТипыПлановОбменовДляВыбора.Добавить(Тип("ПланОбменаСсылка.XXXX"))
// имеет смысл задавать только в связке с параметром "ИспользованиеРегистрацииДанныхНаУзлеНетиповогоОбмена"=Истина
// если же этот параметр пустой, то пользователю будет доступен для выбора только один план обмена - "Нетиповые обмены"

	СтруктураПоУмолчанию.Вставить("ПредопределенныеОбмены",новый Массив);
// с каким предопределенным обменами данных эта обработка может использоваться Если не указано - то с любыми непредопределенными обменами	

	СтруктураПоУмолчанию.Вставить("ПоказыватьСчетчикВыгруженныхПакетов",Ложь); 
// отображение на форме обмена счетчика  выгруженных пакетов	
	СтруктураПоУмолчанию.Вставить("ПоказыватьСчетчикЗагруженныхПакетов",Ложь); 
// отображение на форме обмена счетчика загруженных пакетов	
	

	СтруктураПоУмолчанию.Вставить("ДляМножественныхОбменов",Ложь);
// если ложь - то с такой обработкой может быть связан только один, уникальный  обмен данными. 
// если такую обработку связали с каким-то обменом, то она пропадает из списка выбора в других обменах.



	СтруктураПоУмолчанию.Вставить("ТолькоДляПредопределенныхОбменов",Истина);
// Если "Истина"  - то обработку можно использовать только с указанными предопределеннными обменами. Имеет смысл только совместно с заданием массива предопределенных обменов	
	
	СтруктураПоУмолчанию.Вставить("ВидимыеДополнительныеЭлементыФормы",новый Массив); 
// Для случая, когда нужно добавить какой-то свой реквизит в справочник или элемент формы и показывать его только для определенного обмена. 
//Эти элементы должны быть в группе элементов "СтраницаДополнительныеНастройки" или "Страницы" 	

	СтруктураПоУмолчанию.Вставить("НевидимыеДополнительныеЭлементыФормы",новый Массив); 
// Для случая, когда нужно сделали видимой целую дополнительную группу, но какой-то ее элемент надо скрыть. 
//Эти элементы должны быть в группе элементов "СтраницаДополнительныеНастройки" или "Страницы" 	

	СтруктураПоУмолчанию.Вставить("РеквизитыОбязательныеДляЗаполнения",новый Массив); 
// Для случая, когда какие-то реквизиты, добавленные в справочник обенов для этой обработки должны быть обязательно заполнены
	
	СтруктураПоУмолчанию.Вставить("ЗадействованныеСвойстваXMLНастроек",новый Массив); 
// здесь можно перечислить те свойства XML-настройки, которые обязательны для заполнения. 
// В перспективе это будет использоваться при проверке правильности заполнения документа "Изменение настроек обмена"	
// но пока не задействовано

    Возврат СтруктураПоУмолчанию;
КонецФункции // ()

Функция ПолучитьОписаниеОбработкиОбмена(ИдентификаторОбработки,ТекстОшибки) Экспорт

	НастройкиСтрокой = "";
	Если ПустаяСТрока(ИдентификаторОбработки) Тогда
		Возврат ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	Иначе
		ПОпытка
			Возврат Обработки[ИдентификаторОбработки].ПолучитьОписаниеОбработкиОбмена();
		Исключение
			ТекстОшибки = "Ошибка при получении описания обработки обмена:"+Символы.ПС+ОписаниеОшибки();
			Возврат ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
		КонецПопытки;
	
	КонецЕсли;
	
КонецФункции // ()

Функция ПолучитьВремяПоследнегоЗапуска(ОбменДанными) Экспорт 

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремяПоследнегоЗапускаОбменов.Дата
		|ИЗ
		|	РегистрСведений.ВремяПоследнегоЗапускаОбменов КАК ВремяПоследнегоЗапускаОбменов
		|ГДЕ
		|	ВремяПоследнегоЗапускаОбменов.ОбменДанными = &ОбменДанными";

	Запрос.УстановитьПараметр("ОбменДанными", ОбменДанными);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Дата
	Иначе	
		Возврат Дата("00010101");
	КонецЕсли;;

КонецФункции // ()

Функция ОбменЗапускаетсяВРазрешенноеВремя(НетиповойОбмен,ПовторныйЗапускВРазрешенномИнтервалеРазрешен=Ложь) Экспорт

	Если Не НетиповойОбмен.ЗапускОбменаРазрешенТолькоВОпределенномИнтервалеИТолькоЕдиножды Тогда
		Возврат Истина;
	КонецЕсли;
	// преобразуем текущее время в формат ЧЧ.ММ
	
	МоментПоследнегоЗапуска = ПолучитьВремяПоследнегоЗапуска(НетиповойОбмен.ССылка);
	МоментПоследнегоЗапускаЧЧ_ММ = Час(МоментПоследнегоЗапуска)+Минута(МоментПоследнегоЗапуска)/100;
	
	ТекМоментВремени = ТекущаяДата();
	Если ДеньГода(ТекМоментВремени) = ДеньГода(МоментПоследнегоЗапуска) Тогда
		БылЗапускВЭтотДень = Истина;
	Иначе	
		БылЗапускВЭтотДень = Ложь;
	КонецЕсли;
	
	ТекМоментВремениЧЧ_ММ = Час(ТекМоментВремени)+Минута(ТекМоментВремени)/100;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяНачалаЗапуска,
		|	НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяОкончанияЗапуска
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными.РазрешенноеВремяЗапуска КАК НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ПовторныйЗапускВРазрешенномИнтервалеРазрешен
		|				ТОГДА НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяНачалаЗапуска <= &ТекущееВремя
		|						И НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяОкончанияЗапуска >= &ТекущееВремя
		|						И ВЫБОР
		|							КОГДА &БылЗапускВЭтотДень
		|								ТОГДА НЕ(НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяНачалаЗапуска <= &МоментПоследнегоЗапуска
		|											И НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяОкончанияЗапуска >= &МоментПоследнегоЗапуска)
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ
		|			ИНАЧЕ НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяНачалаЗапуска <= &ТекущееВремя
		|					И НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.ВремяОкончанияЗапуска >= &ТекущееВремя
		|		КОНЕЦ
		|	И НетиповыеОбменыДаннымиРазрешенноеВремяЗапуска.Ссылка = &НетиповойОбмен";

	Запрос.УстановитьПараметр("НетиповойОбмен", 			НетиповойОбмен.ССылка);
	Запрос.УстановитьПараметр("ТекущееВремя", 				ТекМоментВремениЧЧ_ММ);
	Запрос.УстановитьПараметр("МоментПоследнегоЗапуска", 	МоментПоследнегоЗапускаЧЧ_ММ);
	Запрос.УстановитьПараметр("ПовторныйЗапускВРазрешенномИнтервалеРазрешен", 	ПовторныйЗапускВРазрешенномИнтервалеРазрешен);
	Запрос.УстановитьПараметр("БылЗапускВЭтотДень", 		БылЗапускВЭтотДень);
    
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();


КонецФункции // ОбменЗапускаетсяВРазрешенноеВремя()

Функция ПолучитьОбменыПоИмениОбработки(ИмяОбработки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НетиповыеОбменыДанными.Ссылка
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена = &ИмяОбработкиОбмена";

	Запрос.УстановитьПараметр("ИмяОбработкиОбмена", ИмяОбработки);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	МассивОбменов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивОбменов.Добавить(ВыборкаДетальныеЗаписи.ССылка);
	КонецЦикла;

	Возврат МассивОбменов;

КонецФункции // ПолучитьОбменыПоОбработке()

Функция ПолучитьРегламентноеЗаданиеНетиповогоОбменаПоGUID(НетиповойОбмен) Экспорт
	
	// возвращаемое значение функции
	РегламентноеЗадание = Неопределено;
	УникальныйНомерЗадания = НетиповойОбмен.РегламентноеЗаданиеGUID;
	Если ПустаяСтрока(УникальныйНомерЗадания) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УникальныйНомерЗадания));
		
	Исключение
		
		РегламентноеЗадание = Неопределено;
		
	КонецПопытки;
	
	Возврат РегламентноеЗадание;
	
КонецФункции


// функции для управления регламентными заданиями
Функция СоздатьРегламентноеЗаданиеПриНеобходимости(ТекущийОбъект)
	
	РегламентноеЗаданиеОбъект = ПолучитьРегламентноеЗаданиеНетиповогоОбменаПоGUID(ТекущийОбъект);
	
	// при необходимости создаем регл. задание
	Если РегламентноеЗаданиеОбъект = Неопределено Тогда
		РегламентноеЗаданиеОбъект = РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыполнениеНетиповогоОбменаДанными");
	КонецЕсли;
	
	Возврат РегламентноеЗаданиеОбъект;
	
КонецФункции
Процедура УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, ТекущийОбъект,ТекстСообщения)
	
 	НетиповойОбмен_GUID = ""+ТекущийОбъект.Ссылка.УникальныйИдентификатор();
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(НетиповойОбмен_GUID);
	
	НаименованиеРегламентногоЗадания = ""+ТекущийОбъект.Наименование;
	
	РегламентноеЗаданиеОбъект.Наименование  = Лев(НаименованиеРегламентногоЗадания, 120);
	РегламентноеЗаданиеОбъект.Параметры     = ПараметрыРегламентногоЗадания;
	ПользовательРегламентногоЗадания = Константы.ПользовательРегламентногоЗаданияВНетиповыхОбменах.Получить();
	Если Не ЗначениеЗаполнено(ПользовательРегламентногоЗадания) Тогда
		ТекстСообщения = "Невозможно задать пользователя регламентного задания"+символы.ПС+"нетипового обмена, так как соответствующая константа не заполнена";
		возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПользовательРегламентногоЗадания.ИдентификаторПользователяИБ) Тогда
		ТекстСообщения = "Пользователь, указанный в константе ""Пользователь регламентного задания в нетиповых обменах"" не связан с пользователем ИБ";
		возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательРегламентногоЗадания.ИдентификаторПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
	
		ТекстСообщения = "Пользователь, указанный в константе ""Пользователь регламентного задания в нетиповых обменах"" связан с несуществующим пользователем ИБ";
		возврат;
	
	КонецЕсли;
	РегламентноеЗаданиеОбъект.ИмяПользователя = ПользовательИБ.Имя;

КонецПроцедуры

// Выполняет запись регламентного задания
//
// Параметры:
//  Отказ                     - Булево - флаг отказа. Если в процессе выполнения процедуры были обнаружены ошибки,
//                                       то флаг отказа устанавливается в значение Истина
//  РегламентноеЗаданиеОбъект - объект регламентного задания, которое необходимо записать
// 
Процедура ЗаписатьРегламентноеЗадание(РегламентноеЗаданиеОбъект,ТекстОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		// записываем задание
		РегламентноеЗаданиеОбъект.Записать();
		
	Исключение
		ТекстОщшибки = ТекстОшибки + ОписаниеОшибки()+Символы.ПС;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДанныеРегламентногоЗадания(ТекущийОбъект,ТекстОшибки) Экспорт
	
	// получаем регламентное задание по идентификатору, если объект не находим, то создаем новый
	РегламентноеЗаданиеОбъект = СоздатьРегламентноеЗаданиеПриНеобходимости(ТекущийОбъект);
	//SCR 706 Запись элемента справочника не должна вызывать запуск регламентного задания
	//Перезаписываем рег.задание, только если изменилось наименование
	Если ТекущийОбъект.Наименование <> РегламентноеЗаданиеОбъект.Наименование Тогда
		// обновляем свойства РЗ
		УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, ТекущийОбъект,ТекстОшибки);
		// записываем измененное задание
		ЗаписатьРегламентноеЗадание(РегламентноеЗаданиеОбъект,ТекстОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		//запоминаем GUID регл. задания в реквизите объекта
		ТекущийОбъект.РегламентноеЗаданиеGUID = Строка(РегламентноеЗаданиеОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// функция возвращает в качестве результата ссылку на соответствующий элемент справочника "Нетиповые обмены"
Функция ПолучитьОбменДляФункцииSubmitQueryСлушающегоВебСервисаПоИдентификатору(ИдентификаторОбмена) Экспорт
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НетиповыеОбменыДанными.Ссылка,
		|	НетиповыеОбменыДанными.НастройкиОбмена
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НЕ НетиповыеОбменыДанными.ПометкаУдаления
		|	И НетиповыеОбменыДанными.СпособПередачиДанных = ЗНАЧЕНИЕ(Перечисление.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host)
		|	И НЕ НетиповыеОбменыДанными.ОтключитьВыполнениеЭтогоОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстТекОшибки = "";
		СтруктураНастроек = новый Структура("НастройкиОбмена",ВыборкаДетальныеЗаписи.НастройкиОбмена);
		НастройкиПодключения = РаботасОбменомДанными.ПолучитьВнешниеНастройкиНетиповогоОбмена(ВыборкаДетальныеЗаписи.Ссылка,ТекстТекОшибки,СтруктураНастроек);
		Если ПустаяСтрока(ТекстТекОшибки) Тогда
			ТекИдентификатор = "";
			ЭлементыНастроек = Неопределено;
			Если НастройкиПодключения.Свойство("ЭлементыНастроек",ЭлементыНастроек) Тогда
				Для каждого ЭлементНастроек Из НастройкиПодключения.ЭлементыНастроек Цикл
					Если ЭлементНастроек.Свойство("Идентификатор",ТекИдентификатор) Тогда
						Если ВРЕГ(СокрЛП(ТекИдентификатор))=ВРЕГ(СокрЛП(ИдентификаторОбмена)) Тогда
							Возврат ВыборкаДетальныеЗаписи.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НастройкиПодключения.Свойство("Идентификатор",ТекИдентификатор) Тогда
				Если ВРЕГ(СокрЛП(ТекИдентификатор))=ВРЕГ(СокрЛП(ИдентификаторОбмена)) Тогда
					Возврат ВыборкаДетальныеЗаписи.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
	  