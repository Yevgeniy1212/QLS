#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// проверка на дублирование инспектируемых элементов
	Если Элементы.СтраницыНастройкиИнтерактивнойРаботыСКонсернами.Видимость Тогда
		времТЗ = Объект.ИнспектируемыеЭлементы.Выгрузить();
		времТЗ.Свернуть("ИнспектируемыйЭлемент");
		Если ВремТЗ.Количество()<> Объект.ИнспектируемыеЭлементы.Количество() Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("en='Inspected elements should be unique.';ru='Инспектируемые элементы должны быть уникальны.'"));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы     

&НаКлиенте
Процедура ТипИнтерфейсаПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере()  
КонецПроцедуры

&НаКлиенте
Процедура СпособРегистрацииДефектовПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьНаличиеКампанийПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьПрохождениеОбязательныхТочекРегистрацииПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьКампанииИзСпискаПриИзменении(Элемент)
	
	УправлениеВидимостьюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСледующиеДефектыПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьНаличиеОткрытыхКонсерновПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВыполненныйРемонтПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособОткрытияКонсернаПоКартинкеПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьВкладкуКонтрольПриИзменении(Элемент)  
	Если Не Объект.АктивироватьВкладкуКонтроль Тогда
		Объект.КонтролироватьВыполненныйРемонт = Ложь;
		Объект.ПулИнспектируемыхЭлементовДляКонтроля = Неопределено;
	КонецЕсли;
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьВкладкуКонтроль1ПриИзменении(Элемент)
	УправлениеВидимостьюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьВкладкуКампанииПриИзменении(Элемент)
	
	Если НЕ Объект.АктивироватьВкладкуКампании И Объект.ЗакрыватьКампанииИзСписка Тогда
		Объект.ЗакрыватьКампанииИзСписка = Ложь;
	КонецЕсли;
	
	УправлениеВидимостьюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ИнспектируемыеЭлементыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИнспектируемыеЭлементы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		// ТЧ ИнспектируемыеЭлементы пустая
		Элементы.ГруппыВариантовПозицииС.ОтборСтрок = Неопределено;
	Иначе
		ИнспектируемыйЭлемент =  ТекущиеДанные.ИнспектируемыйЭлемент;
		Элементы.ГруппыВариантовПозицииС.ОтборСтрок = Новый ФиксированнаяСтруктура("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ИнспектируемыеЭлементыДефектыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		// ТЧ ИнспектируемыеЭлементы пустая
		Элементы.Дефекты.ОтборСтрок = Неопределено;
	Иначе
		ИнспектируемыйЭлемент =  ТекущиеДанные.ИнспектируемыйЭлемент;
		Элементы.Дефекты.ОтборСтрок = Новый ФиксированнаяСтруктура("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВариантовПозицииСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	   Элементы.ГруппыВариантовПозицииС.ТекущиеДанные.ИнспектируемыйЭлемент = Элементы.ИнспектируемыеЭлементы.ТекущиеДанные.ИнспектируемыйЭлемент;
	   
КонецПроцедуры

#Область ДефектыПодбор
	
&НаКлиенте
Процедура ДефектыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элементы.Дефекты.ТекущиеДанные.ИнспектируемыйЭлемент = Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные.ИнспектируемыйЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура ДефектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("en='Select inspected element.';ru='Выберите инспектируемый элемент.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДефектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные <> Неопределено И ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		ИнспектируемыйЭлемент = Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные.ИнспектируемыйЭлемент;
		Для каждого ЭлементДефект Из ВыбранноеЗначение Цикл
			Если Объект.Дефекты.НайтиСтроки(Новый Структура("ИнспектируемыйЭлемент, Дефект", ИнспектируемыйЭлемент, ЭлементДефект)).Количество() = 0 Тогда
				НовСтр = Объект.Дефекты.Добавить();
				НовСтр.ИнспектируемыйЭлемент = ИнспектируемыйЭлемент;
				НовСтр.Дефект = ЭлементДефект;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ИнспектирыемыеЭлементыПодбор

&НаКлиенте
Процедура ИнспектируемыеЭлементыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого ЭлементИЭ Из ВыбранноеЗначение Цикл
			Если Объект.ИнспектируемыеЭлементы.НайтиСтроки(Новый Структура("ИнспектируемыйЭлемент", ЭлементИЭ)).Количество() = 0 Тогда
				НовСтр = Объект.ИнспектируемыеЭлементы.Добавить();
				НовСтр.ИнспектируемыйЭлемент = ЭлементИЭ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДефектыДляАвтоматическогоЗанесенияКонсерновОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого ЭлементДефект Из ВыбранноеЗначение Цикл
			Если Объект.ДефектыДляАвтоматическогоЗанесенияКонсернов.НайтиСтроки(Новый Структура("Дефект", ЭлементДефект)).Количество() = 0 Тогда
				НовСтр = Объект.ДефектыДляАвтоматическогоЗанесенияКонсернов.Добавить();
				НовСтр.Дефект = ЭлементДефект;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыВариантовПозицииСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппыВариантовПозицииС.ТекущиеДанные.ГруппаВариантовПозицииС = ВыбранноеЗначение;
	   
КонецПроцедуры

&НаКлиенте
Процедура ИнспектируемыеЭлементыВариантИспользованияИнспектируемогоЭлементаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если выбрали вариант использования ИЭ без позиции С, то удаляем все строки, связанные с этим ИЭ без позиции С.
	Если НЕ ЗаданоЗначениеПозицииС(ВыбранноеЗначение) Тогда
		ТекущиеДанные = Элементы.ИнспектируемыеЭлементы.ТекущиеДанные;
		УдалитьСтрокиДляИЭБезВариантаС(ТекущиеДанные.ИнспектируемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсерновФормулаДляОпределенияРезультатаПроверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Формула, ТипРезультата", Элементы.ИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ТекущиеДанные.ФормулаДляОпределенияРезультатаПроверки, Новый ОписаниеТипов("Строка"));
	ОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеПроверкиФормулы", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОтладкаФормул.Форма", ПараметрыФормы, Элемент,,,,ОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыПодборДефектов
	
&НаКлиенте
Процедура ПодборДефектов(Команда)
	Если Элементы.ИнспектируемыеЭлементыДефекты.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("en='Select inspected element.';ru='Выберите инспектируемый элемент.'"));
		Возврат;
	КонецЕсли;
			
	ОткрытьФорму("Справочник.Дефекты.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина), 
		Элементы.Дефекты,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодборДефектовДляАвтоматическогоЗанесенияКонсернов(Команда)
	ОткрытьФорму("Справочник.Дефекты.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина), 
		Элементы.ДефектыДляАвтоматическогоЗанесенияКонсернов,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область КомандыПодборИнспектируемыхЭлементов

&НаКлиенте
Процедура ПодборИнспектируемыхЭлементов(Команда)
	
	ОткрытьФорму("Справочник.ИнспектируемыеЭлементы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, МножественныйВыбор", Ложь, Истина, Истина), 
	Элементы.ИнспектируемыеЭлементы,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);      
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеВидимостьюНаСервере()      
	
	Элементы.ГруппаРемонтник.Видимость = (Объект.ТипИнтерфейса = Перечисления.ИнтерфейсыОператоров.Ремонтник);
	Элементы.ГруппаИнспектор.Видимость = (Объект.ТипИнтерфейса = Перечисления.ИнтерфейсыОператоров.Инспектор);
	
	//Элементы.СтрОбязательныеТочки.Видимость = Объект.КонтролироватьПрохождениеОбязательныхТочек;
	Элементы.ТочкаРегистрацииДляОпределенияСледующегоЗаказа.Видимость = (Объект.СпособИдентификацииЗаказа = Перечисления.СпособыИдентификацииЗаказа.ВыборСледующегоЗаказаИзОчереди);
	Элементы.СтраницыНастройкиИнтерактивнойРаботыСКонсернами.Видимость = (Объект.СпособИдентификацииЗаказа <> Перечисления.СпособыИдентификацииЗаказа.АвтоматическаяПроверка);
	Элементы.НастройкаАвтоматическойРегистрацииКонсернов.Видимость = (Объект.СпособИдентификацииЗаказа = Перечисления.СпособыИдентификацииЗаказа.АвтоматическаяПроверка);
	//Элементы.ГруппаКонтролируемыхКампаний.Видимость = Объект.КонтролироватьНаличиеКампаний;
	Элементы.СпособОткрытияКонсерна.Видимость = (Объект.СпособИдентификацииЗаказа <> Перечисления.СпособыИдентификацииЗаказа.АвтоматическаяПроверка);
	//Элементы.КонтролироватьСледующиеДефекты.Видимость = Объект.КонтролироватьНаличиеОткрытыхКонсернов;
	//Элементы.ГруппаКонтролироватьСледующиеДефекты.Видимость = Объект.КонтролироватьСледующиеДефекты;
	Элементы.СтрИнспектируемыеИзображениям.Видимость = Объект.СпособОткрытияКонсернаПоКартинке;  
	
	Элементы.ПулИнспектируемыхЭлементовДляКонтроля.Видимость = Объект.АктивироватьВкладкуКонтроль;
	Элементы.ПулИнспектируемыхЭлементовДляКонтроля1.Видимость = Объект.АктивироватьВкладкуКонтроль;
	
	Элементы.ЗакрыватьКампанииИзСписка.Доступность = Объект.АктивироватьВкладкуКампании;
	Элементы.ГруппаКампанииДоступныеДляЗакрытия.Видимость = Объект.ЗакрыватьКампанииИзСписка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданоЗначениеПозицииС(ВариантИспользованияИнспектируемогоЭлемента)
	
	Возврат ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиДляИЭБезВариантаС(ИнспектируемыйЭлемент)
	
	СтруктураДляПоиска = Новый Структура("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент); 
	//Получаем список строк соответсвтвующих отбору, и перебором удаляем.
	МассивСтрок = Объект.ГруппыВариантовПозицииС.НайтиСтроки(СтруктураДляПоиска); 
	Для каждого Строка Из МассивСтрок Цикл 
		Объект.ГруппыВариантовПозицииС.Удалить(Строка); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиФормулы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Элементы.ИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ТекущиеДанные.ФормулаДляОпределенияРезультатаПроверки = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры // ПослеПроверкиФормулы()

#КонецОбласти
