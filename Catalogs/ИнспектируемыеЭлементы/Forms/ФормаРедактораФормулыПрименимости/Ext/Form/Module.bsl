
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ФормулаПрименимости", ФормулаПрименимости);
	
	ЗаполнитьДеревоДоступныхРеквизитов();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Отказ = Ложь;
	
	ВычислитьФормулуНаСервере(Отказ);
	
	Если НЕ Отказ Тогда
		ОповеститьОВыборе(ФормулаПрименимости);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьФормулу(Команда)
	
	Результат = "";
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Заказ"" не заполнено.", , "Заказ");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормулаПрименимости) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Формула"" не заполнено.", , "ФормулаПрименимости");
	КонецЕсли;
	
	
	Если НЕ Отказ Тогда
		ВычислитьФормулуНаСервере(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РеквизитыЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ФормулаПрименимости.ВыделенныйТекст = РеквизитыЗаказа.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолноеИмя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗаказаПередРазворачиванием(Элемент, Строка, Отказ)
	
	РеквизитыЗаказаПередРазворачиваниемНаСервере(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСвойстваЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.РодительскаяГруппировкаСтроки <> Неопределено Тогда
		Элементы.ФормулаПрименимости.ВыделенныйТекст = "СвойствоЗаказаРавно(Заказ, """ + Элемент.ТекущиеДанные.РодительскаяГруппировкаСтроки + """, """ + ВыбраннаяСтрока + """)";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДеревоДоступныхРеквизитов()
	
	Корень = РеквизитыЗаказа.ПолучитьЭлементы();
	
	
	НоваяСтрока = Корень.Добавить();
	НоваяСтрока.Имя = "Заказ";
	НоваяСтрока.Синоним = "Заказ";
	НоваяСтрока.ПолноеИмя = "Заказ";
	НоваяСтрока.Тип = Новый ОписаниеТипов("СправочникСсылка.Заказы");
	НоваяСтрока.ЭтоТабличнаяЧасть = Ложь;
	НоваяСтрока.ИндексКартинки = 1;
	
	НоваяПодстрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
	НоваяПодстрока.Имя = "+++";
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыЗаказаПередРазворачиваниемНаСервере(ИдентификаторСтроки)
	
	СтрокаДерева = РеквизитыЗаказа.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева.ПолучитьЭлементы()[0].Имя = "+++" Тогда
		Для Каждого ДоступныйТип Из СтрокаДерева.Тип.Типы() Цикл
			Если Справочники.ТипВсеСсылки().СодержитТип(ДоступныйТип) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ДоступныйТип) Тогда
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ДоступныйТип);
				//СписокРеквизитов = Метаданные.НайтиПоТипу(ДоступныйТип).Реквизиты;
				ЗаполнитьУзелРеквизитами(СтрокаДерева.ПолучитьЭлементы(), ОбъектМетаданных);
				
				СписокТабличныхЧастей = Метаданные.НайтиПоТипу(ДоступныйТип).ТабличныеЧасти;
				ЗаполнитьУзелТабличнымиЧастями(СтрокаДерева.ПолучитьЭлементы(), СписокТабличныхЧастей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзелРеквизитами(СтрокаДерева, ОбъектМетаданных)
	
	СтрокаДерева.Очистить();
	
	ЗаполнитьПоСпискуРеквизитов(СтрокаДерева, ОбъектМетаданных.СтандартныеРеквизиты, Ложь, Истина);
	
	ЗаполнитьПоСпискуРеквизитов(СтрокаДерева, ОбъектМетаданных.Реквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзелТабличнымиЧастями(СтрокаДерева, СписокТабличныхЧастей)
	
	Для Каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		ЗаполнитьТабличнуюЧасть(СтрокаДерева, ТабличнаяЧасть);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСпискуРеквизитов(Строка, СписокРеквизитов, ЭтоТабличнаяЧасть = Ложь, ЭтоСтандартныйРеквизит = Ложь)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		// Игнорируем "ненужные" стандартные реквизиты.
		Если Реквизит.Имя <> "Ссылка" И Реквизит.Имя <> "ИмяПредопределенныхДанных" И Реквизит.Имя <> "Предопределенный" Тогда
			НоваяСтрока = Строка.Добавить();
			НоваяСтрока.Имя = Реквизит.Имя;
			НоваяСтрока.Синоним = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя);
			НоваяСтрока.Тип = Реквизит.Тип;
			НоваяСтрока.ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть;
			НоваяСтрока.ИндексКартинки = ?(ЭтоСтандартныйРеквизит, 0, 1);
			
			ВеткаРодителя = НоваяСтрока.ПолучитьРодителя();
			Если ВеткаРодителя = Неопределено Тогда 
				НоваяСтрока.ПолноеИмя = Реквизит.Имя;
			Иначе
				НоваяСтрока.ПолноеИмя = ВеткаРодителя.ПолноеИмя + ?(ЗначениеЗаполнено(ВеткаРодителя.ПолноеИмя), ".", "") + Реквизит.Имя;
			КонецЕсли;
			
			Для Каждого ДоступныйТип Из Реквизит.Тип.Типы() Цикл
				Если Справочники.ТипВсеСсылки().СодержитТип(ДоступныйТип) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ДоступныйТип) Тогда 
					НоваяПодстрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
					НоваяПодстрока.Имя = "+++";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧасть(СтрокаДерева, ТабличнаяЧасть)
	
	НоваяСтрока = СтрокаДерева.Добавить();
	НоваяСтрока.Имя = ТабличнаяЧасть.Имя;
	НоваяСтрока.Синоним = ТабличнаяЧасть.Синоним + " (табличная часть)";
	НоваяСтрока.ЭтоТабличнаяЧасть = Истина;
	НоваяСтрока.ИндексКартинки = 2;
	
	ВеткаРодителя = НоваяСтрока.ПолучитьРодителя();
	
	Если ВеткаРодителя = Неопределено Тогда 
		НоваяСтрока.ПолноеИмя = ТабличнаяЧасть.Имя;
	Иначе
		НоваяСтрока.ПолноеИмя = ВеткаРодителя.ПолноеИмя + ?(ЗначениеЗаполнено(ВеткаРодителя.ПолноеИмя), ".", "") + ТабличнаяЧасть.Имя;
	КонецЕсли;
	
	
	ЗаполнитьПоСпискуРеквизитов(НоваяСтрока.ПолучитьЭлементы(), ТабличнаяЧасть.Реквизиты, Истина);
	
КонецПроцедуры	


&НаСервере
Процедура ВычислитьФормулуНаСервере(Отказ)
	
	Если ТекстФормулыПрименимостиБезопасен() Тогда
		Результат = Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(ФормулаПрименимости, Заказ);
		
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Результат вычисления формулы должен иметь тип ""Булево"".", , "ФормулаПрименимости");
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Текст формулы содержит небезопасные выражения.", , "ФормулаПрименимости");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстФормулыПрименимостиБезопасен()
	
	Возврат СтрНайти(ФормулаПрименимости, ".Записать(") = 0 И СтрНайти(ФормулаПрименимости, ".Очистить(") = 0 И СтрНайти(ФормулаПрименимости, ".Удалить(") = 0;
	
КонецФункции

#КонецОбласти
