#Область СлужебныеПроцедурыИФункции
Процедура ЗагрузитьСообщение_ДвиженияЗаказа(ОбъектXML,Версия)
	
	Если Версия <> "1.0" Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно загрузить движения заказа. Неизвестная версия обмена'");
	КонецЕсли;
	
	// поищем заказ
	VIN = ОбъектXML.Заказ.VIN;
	Заказ = Справочники.Заказы.НайтиПоРеквизиту("VIN",VIN);
	Если Заказ = Справочники.Заказы.ПустаяСсылка() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден заказ с VIN ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), VIN);
	КонецЕсли;
	
	// создадим/обновим движения
	
	//шаг 1. заполним таблицу движений полученную из MES
	ТаблицаЗагруженныхДвижений = Новый ТаблицаЗначений;
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("ТочкаРегистрации",Новый ОписаниеТипов("СправочникСсылка.ТочкиРегистрации"));
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("ПредшествующаяТочкаРегистрации",Новый ОписаниеТипов("СправочникСсылка.ТочкиРегистрации"));
	
	
	Для каждого ДвижениеЗаказа из ОбъектXML.ДвижениеПоКонвейеру цикл
		СтрокаТаблицы = ТаблицаЗагруженныхДвижений.Добавить();
		СтрокаТаблицы.Дата = ДвижениеЗаказа.Период;
		
		Если Не ДвижениеЗаказа.ТочкаРегистрации = Неопределено Тогда
			СтрокаТаблицы.ТочкаРегистрации = ДвижениеЗаказа.ТочкаРегистрации.Ссылка;
		КонецЕсли;
		
		Если Не ДвижениеЗаказа.ПредшествующаяТочкаРегистрации = Неопределено Тогда
			СтрокаТаблицы.ПредшествующаяТочкаРегистрации = ДвижениеЗаказа.ПредшествующаяТочкаРегистрации.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	// шаг 2. Сравним ее с документами в QLS
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗагруженныеДвижения.Дата КАК Дата,
		|	ЗагруженныеДвижения.ТочкаРегистрации КАК ТочкаРегистрации,
		|	ЗагруженныеДвижения.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации
		|ПОМЕСТИТЬ втЗагруженныеДвижения
		|ИЗ
		|	&ЗагруженныеДвижения КАК ЗагруженныеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеПоКонвейеру.Дата КАК Дата,
		|	ДвижениеПоКонвейеру.Ссылка КАК Ссылка,
		|	ДвижениеПоКонвейеру.ТочкаРегистрации КАК ТочкаРегистрации,
		|	ДвижениеПоКонвейеру.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации
		|ПОМЕСТИТЬ ДвиженияВQLS
		|ИЗ
		|	Документ.ДвижениеПоКонвейеру КАК ДвижениеПоКонвейеру
		|ГДЕ
		|	ДвижениеПоКонвейеру.Проведен
		|	И ДвижениеПоКонвейеру.Заказ = &Заказ
		|	И НЕ ДвижениеПоКонвейеру.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗагруженныеДвижения.Дата КАК Дата,
		|	втЗагруженныеДвижения.ТочкаРегистрации КАК ТочкаРегистрации,
		|	втЗагруженныеДвижения.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации,
		|	ДвиженияВQLS.Ссылка КАК НайденныйДокумент,
		|	ВЫБОР
		|		КОГДА ДвиженияВQLS.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДвижениеВQLS,
		|	ВЫБОР
		|		КОГДА втЗагруженныеДвижения.Дата ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДвижениеВMES
		|ПОМЕСТИТЬ Предварительная
		|ИЗ
		|	втЗагруженныеДвижения КАК втЗагруженныеДвижения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДвиженияВQLS КАК ДвиженияВQLS
		|		ПО втЗагруженныеДвижения.ТочкаРегистрации = ДвиженияВQLS.ТочкаРегистрации
		|			И втЗагруженныеДвижения.ПредшествующаяТочкаРегистрации = ДвиженияВQLS.ПредшествующаяТочкаРегистрации
		|			И втЗагруженныеДвижения.Дата = ДвиженияВQLS.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Предварительная.Дата КАК Дата,
		|	Предварительная.ТочкаРегистрации КАК ТочкаРегистрации,
		|	Предварительная.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации,
		|	Предварительная.ЕстьДвижениеВQLS КАК ЕстьДвижениеТолькоВQLS,
		|	Предварительная.ЕстьДвижениеВMES КАК ЕстьДвижениеТолькоВMES,
		|	Предварительная.НайденныйДокумент КАК НайденныйДокумент
		|ИЗ
		|	Предварительная КАК Предварительная
		|ГДЕ
		|	НЕ(Предварительная.ЕстьДвижениеВQLS
		|				И Предварительная.ЕстьДвижениеВMES)";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ЗагруженныеДвижения", ТаблицаЗагруженныхДвижений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЕстьДвижениеТолькоВMES Тогда
			// создаем новый документ движения
			НовоеДвижение = Документы.ДвижениеПоКонвейеру.СоздатьДокумент();
			НовоеДвижение.Дата = ВыборкаДетальныеЗаписи.Дата;
			НовоеДвижение.Заказ = Заказ;
			НовоеДвижение.ТочкаРегистрации = ВыборкаДетальныеЗаписи.ТочкаРегистрации;
			НовоеДвижение.ПредшествующаяТочкаРегистрации = ВыборкаДетальныеЗаписи.ПредшествующаяТочкаРегистрации;
			НовоеДвижение.Записать(РежимЗаписиДокумента.Проведение)
			
		Иначе
			// удаляем неактуальный документ
			НенужноеДвижение = ВыборкаДетальныеЗаписи.НайденныйДокумент.ПолучитьОбъект();
			НенужноеДвижение.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Функция ОсновнаяЛогикаОбработкиЗапроса(Запрос, Метод,ВидОбъекта, ТипОбъекта="")

	Версия = Запрос.ПараметрыURL["ver"];
	ИдентификаторСсылки = Запрос.ПараметрыURL["id"];

	СтрокаXML = Запрос.ПолучитьТелоКакСтроку();

	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("ИдентификаторСсылки", ИдентификаторСсылки);		
	ПараметрыЗагрузки.Вставить("Версия", Версия);		
	ПараметрыЗагрузки.Вставить("ТипОбъекта", ТипОбъекта);
	ПараметрыЗагрузки.Вставить("ВидОбъекта", ВидОбъекта);

	РезультатЗагрузкиСообщения = ЗагрузитьСообщениеОбмена(ПараметрыЗагрузки, СтрокаXML);
	Если ЗначениеЗаполнено(РезультатЗагрузкиСообщения) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка загрузки сообщения: %1'"), РезультатЗагрузкиСообщения);
		ЗаписьЖурналаРегистрации(СобытиеЖурнала(НСтр("ru = 'Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.HTTPСервисы.masterData, Метод, ОписаниеОшибки);
		Возврат ОтветОшибка("Message load error", 500)
	КонецЕсли;

	Возврат Ответ(200);

КонецФункции

Функция Ответ(КодОтвета = 200)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Возврат Ответ;
	
КонецФункции

Функция ОтветОшибка(ТекстОтвета, КодОтвета = 500)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета);
	Возврат Ответ;
	
КонецФункции

Функция СобытиеЖурнала(ПодчиненноеСобытие = "")
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка справочников%1'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				?(ПустаяСтрока(ПодчиненноеСобытие),"",". ") + ПодчиненноеСобытие);

КонецФункции

Функция ЗаписатьТочкуРегистрации(Запрос)
	Попытка
		Ответ = ОсновнаяЛогикаОбработкиЗапроса(Запрос, "registrationPoint.PUT","Справочник", Метаданные.Справочники.ТочкиРегистрации.Имя);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(СобытиеЖурнала(НСтр("ru = 'Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.HTTPСервисы.masterData,"registrationPoint.PUT", ОписаниеОшибки);
		Ответ = ОтветОшибка("Server error", 500);
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция ЗаписатьДвижениеЗаказа(Запрос)
	Попытка
		Ответ = ОсновнаяЛогикаОбработкиЗапроса(Запрос, "ordersRegistrations.PUT","ДвиженияЗаказа");
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписьЖурналаРегистрации(СобытиеЖурнала(НСтр("ru = 'Ошибка выполнения'", ОбщегоНазначения.КодОсновногоЯзыка())), 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.HTTPСервисы.masterData,"ordersRegistrations.PUT", ОписаниеОшибки);
		Ответ = ОтветОшибка("Server error", 500);
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция ЗагрузитьСообщениеОбмена(ПараметрыЗагрузки, ТекстСообщенияОбмена) Экспорт
	
	ОбъектОбмена = ДесериализоватьИзXML(ТекстСообщенияОбмена);
	
	НачатьТранзакцию();
	Попытка
		
		Если ПараметрыЗагрузки.ВидОбъекта = "Справочник" Тогда
			ТипОбъекта = ПараметрыЗагрузки.ТипОбъекта;
			СправочникСсылка = Справочники[ТипОбъекта].ПолучитьСсылкуПоИдентификаторуОбмена(ПараметрыЗагрузки.ИдентификаторСсылки, ПараметрыЗагрузки.Версия);
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				
				БлокировкаПередЧтением = Новый БлокировкаДанных();
				БлокировкаСправочника = БлокировкаПередЧтением.Добавить("Справочник." + ТипОбъекта);
				БлокировкаСправочника.УстановитьЗначение("Ссылка", СправочникСсылка);
				БлокировкаСправочника.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаПередЧтением.Заблокировать();
				
				СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			Иначе
				СправочникОбъект = Справочники[ТипОбъекта].СоздатьЭлементПоИдентификаторуОбмена(ПараметрыЗагрузки.ИдентификаторСсылки, ПараметрыЗагрузки.Версия, ОбъектОбмена.ЭтоГруппа);
			КонецЕсли;
			
			СправочникОбъект.ЗаполнитьИзОбъектаОбмена(ОбъектОбмена, ПараметрыЗагрузки.Версия);
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		ИначеЕсли ПараметрыЗагрузки.ВидОбъекта = "ДвиженияЗаказа" Тогда
			ЗагрузитьСообщение_ДвиженияЗаказа(ОбъектОбмена,ПараметрыЗагрузки.Версия);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат "";	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Десериализует из строки XML в объект XDTO  
// 
// Параметры:
// 	ТекстXML - Строка - Исходная строка XML
// Возвращаемое значение:
// 	ОбъектXDTO - полученный объект заданного типа
Функция ДесериализоватьИзXML(ТекстXML)
	
	СообщениеОбмена = Новый ЧтениеXML;
	СообщениеОбмена.УстановитьСтроку(ТекстXML);
	
	ОбъектОбмена = ФабрикаXDTO.ПрочитатьXML(СообщениеОбмена);
	СообщениеОбмена.Закрыть();
	
	Возврат ОбъектОбмена;
	
КонецФункции

#КонецОбласти
