
Функция GetInterface(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	
	requestMethod = "GET";
	ВходящиеПараметры = HTTP_ПолучитьВходящиеПараметры(Запрос, requestMethod);
	
	Если ВходящиеПараметры = Неопределено Тогда //ошибка
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Something went wrong");
		Ответ.Заголовки.Вставить("Content-type", "text/html; charset=utf-8");

		Возврат Ответ;
		
	КонецЕсли;
	
	HTMLPage = ПолучитьHTMLСтраницу(ВходящиеПараметры);
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(HTMLPage);
	Ответ.Заголовки.Вставить("Content-type", "text/html; charset=utf-8");
	
	Возврат Ответ;
	
КонецФункции

Функция PostInterface(Запрос)
	
	requestMethod = "POST";
	ВходящиеПараметры = HTTP_ПолучитьВходящиеПараметры(Запрос, requestMethod);
	
	Если ВходящиеПараметры = Неопределено Тогда //ошибка
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки("Something went wrong");
		Ответ.Заголовки.Вставить("Content-type", "text/html; charset=utf-8");

		Возврат Ответ;
		
	КонецЕсли;
	
	HTMLPage = ПолучитьHTMLСтраницу(ВходящиеПараметры);

	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки(HTMLPage);
	Ответ.Заголовки.Вставить("Content-type", "text/html; charset=utf-8");
	
	Возврат Ответ;
КонецФункции

Функция HTTP_ПолучитьВходящиеПараметры(Запрос, requestMethod, userGuid = "", requestType = "", requestContent = "", requestBody="");
	
	Если ТипЗнч(Запрос) <> Тип("HTTPСервисЗапрос") Тогда
		Возврат Неопределено;
	КонецЕсли;
	JSONСоответствие = Новый Соответствие;

	Если requestMethod = "POST" Тогда
		requestBody = Запрос.ПолучитьТелоКакСтроку();
		requestContent = РаскодироватьСтроку(requestBody, СпособКодированияСтроки.КодировкаURL);
		
		Если ЗначениеЗаполнено(requestContent) Тогда
			
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(requestContent, "&");
			СоответствиеПараметров = Новый Соответствие;
			Для каждого Параметр Из МассивПараметров Цикл
				ПозицияРазделителя = Найти(Параметр, "=");
				
				Если ПозицияРазделителя < 1 Тогда
					Продолжить;
				КонецЕсли;
				
				НазваниеПараметра = НРег(Сред(Параметр, 0, ПозицияРазделителя-1));
				ЗначениеПараметра = Сред(Параметр, ПозицияРазделителя+1, СтрДлина(Параметр));
				
				Если ЗначениеЗаполнено(НазваниеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					СоответствиеПараметров.Вставить(НазваниеПараметра, ЗначениеПараметра);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеJSON = СоответствиеПараметров.Получить("data");
		Если ДанныеJSON = Неопределено Тогда
			Возврат Неопределено;
			//Ошибка
		КонецЕсли;
		
		requestType = СоответствиеПараметров.Получить("type");
		Если requestType = Неопределено Тогда
			Возврат Неопределено;
			//Ошибка
		КонецЕсли;
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ДанныеJSON);
		JSONСоответствие = ПрочитатьJSON(Чтение,ИСТИНА);
		Чтение.Закрыть();
		
	КонецЕсли;
	
	relativeUrl = Запрос.БазовыйURL;
	
	Идентификатор = Запрос.ПараметрыURL.Получить("exchange");    
	
	//Получаем каждый из параметров в URL
	URLСоответствие = Новый Соответствие;
	URLСоответствие.Вставить("exchange", Идентификатор);
	
	Для каждого  стр Из Запрос.ПараметрыЗапроса Цикл
	     URLСоответствие.Вставить(стр.Ключ, стр.Значение);
	КонецЦикла; 
	
	//Упаковываем входящие параметры и то, что удалось распознать
	ВходящиеПараметры = Новый Соответствие;
	ВходящиеПараметры.Вставить("userGuid", userGuid);
	ВходящиеПараметры.Вставить("relativeUrl", relativeUrl);
	ВходящиеПараметры.Вставить("requestMethod", requestMethod);
	ВходящиеПараметры.Вставить("requestType", requestType);
	ВходящиеПараметры.Вставить("requestContent", requestContent);
	ВходящиеПараметры.Вставить("requestBody", requestBody);
	ВходящиеПараметры.Вставить("JSONСоответствие", JSONСоответствие); //Тут всегда будет как минимум пустое соответствие
	ВходящиеПараметры.Вставить("URLСоответствие", URLСоответствие); //Тут всегда будет как минимум пустое соответствие
	
	Возврат ВходящиеПараметры;
	
КонецФункции

//** Запуск нетипового обмена **//
														
//Формируем структуру со входящими параметрами для дальнейшей передачи в обмен
Функция ПолучитьВходящиеПараметры(userGuid, relativeUrl, requestMethod, requestType = "", requestContent = "", requestBody="")
		
	//Разбор входящих параметров в JSON (если это удастся)
	JSONСоответствие = Новый Соответствие;
	Если ЗначениеЗаполнено(requestContent) Тогда
		Попытка
			JSONСоответствие = JSON.Прочитать_JSON(requestContent);
		Исключение
			JSONСоответствие = Новый Соответствие;
		КонецПопытки;
	КонецЕсли;	
	
	//Разбираем URL
	МассивПараметров = Новый Массив;
	Если Найти(relativeUrl, "?") = 0 Тогда //Если нет знаков вопроса, то это значит, что мы работаем по старой схеме, где все параметры перечислены через подчёркивания
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(relativeUrl, "_");
	Иначе //Новая схема формирования ссылки, согласно стандартам URL
		ВходящаяURL = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(relativeUrl, "?");
		Если ВходящаяURL.Количество() = 2 Тогда		
			ВходящиеПараметры = СтрЗаменить(ВходящаяURL[1], "/", "");
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВходящиеПараметры, "&"); 
		КонецЕсли;			
	КонецЕсли;
	
	//Получаем каждый из параметров в URL
	URLСоответствие = Новый Соответствие;
	Для Каждого Параметр Из МассивПараметров Цикл
		ПозицияРазделителя = Найти(Параметр, "=");
		
		Если ПозицияРазделителя < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НазваниеПараметра = НРег(Сред(Параметр, 0, ПозицияРазделителя-1));
		ЗначениеПараметра = Сред(Параметр, ПозицияРазделителя+1, СтрДлина(Параметр));
		
		Если ЗначениеЗаполнено(НазваниеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			URLСоответствие.Вставить(НазваниеПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	//Упаковываем входящие параметры и то, что удалось распознать
	ВходящиеПараметры = Новый Соответствие;
	ВходящиеПараметры.Вставить("userGuid", userGuid);
	ВходящиеПараметры.Вставить("relativeUrl", relativeUrl);
	ВходящиеПараметры.Вставить("requestMethod", requestMethod);
	ВходящиеПараметры.Вставить("requestType", requestType);
	ВходящиеПараметры.Вставить("requestContent", requestContent);
	ВходящиеПараметры.Вставить("requestBody", requestBody);
	ВходящиеПараметры.Вставить("JSONСоответствие", JSONСоответствие); //Тут всегда будет как минимум пустое соответствие
	ВходящиеПараметры.Вставить("URLСоответствие", URLСоответствие); //Тут всегда будет как минимум пустое соответствие
		
	Возврат ВходящиеПараметры;
	
КонецФункции

//Получение текста HTML страницы
Функция ПолучитьHTMLСтраницу(ВходящиеПараметры)
	
	Идентификатор = ВходящиеПараметры.Получить("URLСоответствие").Получить("exchange");

	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		НастройкаОбмена = Справочники.НетиповыеОбменыДанными.ПолучитьОбменДляФункцииSubmitQueryСлушающегоВебСервисаПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Попытка
				HTMLPage = ЗапускНетиповогоОбмена(НастройкаОбмена, ВходящиеПараметры);
			Исключение
				HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Текст ошибки: "+ОписаниеОшибки();
				РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
			КонецПопытки;	
		Иначе
			HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Ошибка вызова веб-сервиса: получено неправильное имя обмена """+Идентификатор+"""";
			РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
		КонецЕсли;	
	Иначе
		HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Идентификатор обмена не задан.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
	КонецЕсли;
	
	Возврат HTMLPage;
		
КонецФункции

//Нахождение подходящей обработки и запуск обмена
Функция ЗапускНетиповогоОбмена(НастройкаОбмена, ДопПараметр)
	
	// определим событие обмена
	Событие = НастройкаОбмена.СобытиеЖурналаРегистрации;
	Если Не ЗначениеЗаполнено(Событие) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указано значение события журнала регистрации.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	// определим обработку обмена
	ИмяОбработкиОбмена = НастройкаОбмена.ИмяОбработкиОбмена;
	Если Не ЗначениеЗаполнено(ИмяОбработкиОбмена) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указана обработка обмена";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	Попытка
		ОбработкаОбмена = Обработки[ИмяОбработкиОбмена];
	Исключение
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" указана несуществующая обработка обмена """+ИмяОбработкиОбмена+"""";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат РаботаСОбменомДанными.ВыполнениеОбмена(ОбработкаОбмена,НастройкаОбмена,ДопПараметр,Событие);
КонецФункции
