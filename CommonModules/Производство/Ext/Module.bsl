#Область ПрограммныйИнтерфейс



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция ОпределитьСканируемыеРеквизиты(ТекущееРабочееМесто) Экспорт
	СписокРеквизитов = новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаОператоровКонтрольныеМетки.РеквизитКонтрольнойМетки
		|ИЗ
		|	Справочник.РабочиеМестаОператоров.КонтрольныеМетки КАК РабочиеМестаОператоровКонтрольныеМетки
		|ГДЕ
		|	РабочиеМестаОператоровКонтрольныеМетки.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМестаОператоровКонтрольныеМетки.РеквизитКонтрольнойМетки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтрольныеМетки.РеквизитЗаказа КАК РеквизитКонтрольнойМетки
		|ИЗ
		|	Справочник.КонтрольныеМетки КАК КонтрольныеМетки
		|ГДЕ
		|	КонтрольныеМетки.ИспользоватьПоУмолчанию
		|	И НЕ КонтрольныеМетки.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтрольныеМетки.РеквизитЗаказа";

	Запрос.УстановитьПараметр("Ссылка", ТекущееРабочееМесто);
	Результат = Запрос.ВыполнитьПакет();
	Если ТекущееРабочееМесто.СканированиеПредусмотреноПоРеквизитамОтличныхОтЗаданныхПоУмолчанию Тогда
		ВыборкаДетальныеЗаписи = Результат[0].Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
			ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
		КонецЕсли;
	Иначе	
		ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
	КонецЕсли;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РеквизитКонтрольнойМетки) Тогда
			СписокРеквизитов.Добавить(ВыборкаДетальныеЗаписи.РеквизитКонтрольнойМетки);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокРеквизитов;
КонецФункции

Функция ПроверитьФорматЗначенияКонтрольнойМеткиПоСпискуКонтрольныхМеток(КонтрольнаяМетка,ЗначениеКонтрольнойМетки,ТекстСообщения="") Экспорт
	
	СписокКонтрольныхМеток = Новый Соответствие();
	Для каждого ЭлементКонтрольнойМетки Из КонтрольнаяМетка Цикл
		ПодходящаяКонтрольнаяМетка = Неопределено;
		ФорматКорректный = ПроверитьФорматЗначенияКонтрольнойМетки(ЭлементКонтрольнойМетки.Значение, ЗначениеКонтрольнойМетки, ТекстСообщения, ПодходящаяКонтрольнаяМетка);
		Если ФорматКорректный Тогда
			СписокКонтрольныхМеток.Вставить(ЭлементКонтрольнойМетки.Значение,ПодходящаяКонтрольнаяМетка);
		КонецЕсли;
	КонецЦикла;
	КонтрольнаяМетка = СписокКонтрольныхМеток;
	Возврат СписокКонтрольныхМеток.Количество()<>0;
	
КонецФункции


#Область Заказы
//Функции, связанные с заказами (VIN)

Функция ОпределитьЗаказ(КонтрольнаяМетка, ЗначениеКонтрольнойМетки, Создать = Ложь, КонтрольнаяМеткаСсылка = Неопределено) Экспорт
	
	//Если мы ищем заказ по VIN, то заказ надо искать по совпадению в строке (для возможности поиска по 7-значному VIN)
	//Если же мы ищем заказ по любому другому реквизиту, то поиск проводится по полному совпадению строки
	Если КонтрольнаяМетка = "VIN" Тогда
		Условие = " ПОДОБНО ""%"" + ";
	Иначе
		Условие = " = ";
	КонецЕсли;
	
	Запрос = Новый Запрос(	
	 "ВЫБРАТЬ
	 |	Заказы.Ссылка
	 |ПОМЕСТИТЬ ВыборкаИзСправочника
	 |ИЗ
	 |	Справочник.Заказы КАК Заказы
	 |ГДЕ
	 |	Заказы." + КонтрольнаяМетка + Условие + " &ЗначениеКонтрольнойМетки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ДвижениеЗаказовОстатки.Заказ КАК ссылка,
	 |	ДвижениеЗаказовОстатки.ТочкаРегистрации
	 |ПОМЕСТИТЬ ДействующиеЗаказы
	 |ИЗ
	 |	РегистрНакопления.ДвижениеЗаказов.Остатки(
	 |			,
	 |			Заказ В
	 |				(ВЫБРАТЬ
	 |					ВыборкаИзСправочника.Ссылка
	 |				ИЗ
	 |					ВыборкаИзСправочника КАК ВыборкаИзСправочника)) КАК ДвижениеЗаказовОстатки
	 |ГДЕ
	 |	ДвижениеЗаказовОстатки.КоличествоОстаток > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ДействующиеЗаказы.ссылка КАК ссылка
	 |ИЗ
	 |	ДействующиеЗаказы КАК ДействующиеЗаказы");
	
	Запрос.УстановитьПараметр("КонтрольнаяМетка", КонтрольнаяМетка);
	Запрос.УстановитьПараметр("ЗначениеКонтрольнойМетки", ЗначениеКонтрольнойМетки);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Заказ = Выборка.Ссылка;
		
	Иначе
		
		Если Создать Тогда
			
			
			Попытка
				
				НовыйЗаказ = Справочники.Заказы.СоздатьЭлемент();
				НовыйЗаказ[КонтрольнаяМетка] = ЗначениеКонтрольнойМетки;
				НовыйЗаказ.Записать();
				
				Заказ = НовыйЗаказ.Ссылка;
				
			Исключение
				
				РезультатОперации = Ложь;
				
				Заказ = Неопределено;
			КонецПопытки;
			
		Иначе
			
			Заказ = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Заказ;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСпискуVIN(ТекстовыйСписокVIN,ТекстОшибки) экспорт

	ТекстовыйСписокVIN = СокрЛП(ТекстовыйСписокVIN);
	
	СписокЗаказов = новый СписокЗначений;
	Если ПустаяСтрока(ТекстовыйСписокVIN) Тогда
		Возврат СписокЗаказов;
	КонецЕсли; 
    МассивСтрокVIN = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстовыйСписокVIN, Символы.ПС);
	Счетчик = 0;
	
	ИсходнаяТаблица = Новый ТаблицаЗначений;
	ИсходнаяТаблица.Колонки.Добавить("КлючПоиска", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ИсходнаяТаблица.Колонки.Добавить("НомерИсходнойСтроки", Новый ОписаниеТипов("Число"));
	
	Для каждого СтроковыйVIN Из МассивСтрокVIN Цикл
	
		Счетчик = Счетчик+1;
		СтрокаТаблицы = ИсходнаяТаблица.Добавить();
		Если Не ПустаяСтрока(СтроковыйVIN) Тогда
			СтрокаТаблицы.КлючПоиска = СтроковыйVIN;
			СтрокаТаблицы.НомерИсходнойСтроки = Счетчик;
		КонецЕсли;
	
	КонецЦикла;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.КлючПоиска,
		|	ИсходнаяТаблица.НомерИсходнойСтроки
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&ИсходнаяТаблица КАК ИсходнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблица.КлючПоиска,
		|	ИсходнаяТаблица.НомерИсходнойСтроки КАК НомерИсходнойСтроки,
		|	Заказы.Ссылка
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
		|		ПО (Заказы.VIN ПОДОБНО ""%"" + ИсходнаяТаблица.КлючПоиска)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсходнойСтроки";

	Запрос.УстановитьПараметр("ИсходнаяТаблица",ИсходнаяТаблица);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Заказ = ВыборкаДетальныеЗаписи.Ссылка;
		Если Заказ = NULL Тогда
				ТекстОшибки = ТекстОшибки + НСтрMES("ru='строка №';en='line N'")+ВыборкаДетальныеЗаписи.НомерИсходнойСтроки+НСтрMES("ru=': заказ по значению ""';en=': order by value ""'")+СокрЛП(ВыборкаДетальныеЗаписи.КлючПоиска)+НСтрMES("ru='"" не найден.';en='"" was not found.'")+Символы.ПС;
		Иначе
			Если СписокЗаказов.НайтиПоЗначению(Заказ) = Неопределено Тогда
				СписокЗаказов.Добавить(Заказ);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	Возврат СписокЗаказов;
КонецФункции // ПолучитьСписокЗаказовПоСпискуVIN(ОтборVIN,ТекстОшибки)()

Функция ОпределитьЗаказПоСпискуКонтрольныхМеток(КонтрольнаяМетка, ЗначениеКонтрольнойМетки, Создать = Ложь) Экспорт
	
	Заказ = Неопределено;
	Для каждого ЭлементКонтрольнойМетки Из КонтрольнаяМетка Цикл
		Заказ = ОпределитьЗаказ(?(ТипЗнч(КонтрольнаяМетка)=Тип("СписокЗначений"),ЭлементКонтрольнойМетки.Значение,ЭлементКонтрольнойМетки.Ключ), ЗначениеКонтрольнойМетки, Создать, ?(ТипЗнч(КонтрольнаяМетка)=Тип("СписокЗначений"),Неопределено,ЭлементКонтрольнойМетки.Значение));
		Если ЗначениеЗаполнено(Заказ) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
    Возврат Заказ;
		
КонецФункции

#КонецОбласти

#Область Смены

Функция ОпределитьСмену(Дата) Экспорт

		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочееВремяСменСрезПоследних.Смена
		|ИЗ
		|	РегистрСведений.РабочееВремяСмен.СрезПоследних(&Дата, ) КАК РабочееВремяСменСрезПоследних
		|ГДЕ
		|	(РабочееВремяСменСрезПоследних.ВремяНачала <= &ВремяДокумента
		|				И РабочееВремяСменСрезПоследних.ВремяОкончания > &ВремяДокумента
		|			ИЛИ РабочееВремяСменСрезПоследних.ВремяНачала <= &ВремяДокумента + 24
		|				И РабочееВремяСменСрезПоследних.ВремяОкончания > &ВремяДокумента + 24)";

	Запрос.УстановитьПараметр("ВремяДокумента", 0+Формат(Дата, "ДФ=HH.mm") );
	Запрос.УстановитьПараметр("Дата", Дата);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Смена;
	КонецЦикла;
	Возврат Справочники.Смены.ПустаяСсылка();
	
КонецФункции // ОпределитьСмену()

Функция ПолучитьДатуСмены(КалендарнаяДата,Смена) экспорт

	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочееВремяСменСрезПоследних.ВремяНачала,
		|	РабочееВремяСменСрезПоследних.ВремяОкончания
		|ИЗ
		|	РегистрСведений.РабочееВремяСмен.СрезПоследних(&Дата, Смена = &Смена) КАК РабочееВремяСменСрезПоследних";

	Запрос.УстановитьПараметр("Дата", КалендарнаяДата);
	Запрос.УстановитьПараметр("Смена", Смена);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		Возврат Дата(0001,01,01,01,01,01);
	
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВремяИзКалендарнойДаты = Час(КалендарнаяДата)+Минута(КалендарнаяДата)/100;
	Если ВремяИзКалендарнойДаты<Выборка.ВремяНачала Тогда
		Возврат КалендарнаяДата-86400;
	Иначе
		Возврат КалендарнаяДата;
	КонецЕсли; 

КонецФункции // ПолучитьДатуСмены()
	
#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьФорматЗначенияКонтрольнойМетки(КонтрольнаяМетка,ЗначениеКонтрольнойМетки,ТекстСообщения="",ПодходящаяКонтрольнаяМетка = Неопределено) Экспорт
	
	ФорматКорректный = Ложь;
	
	//Появилась необходимость контролировать формат VIN длиной как 7, так и 17 символов
	//Поэтому теперь мы имеем возможность добавлять несколько элементов с типом реквизита заказа "VIN"
	//У одного элемента с названием, например, VIN17 длина будет 17 символов, а у элемента VIN7 длина будет 7 символов.
	Если ТипЗнч(КонтрольнаяМетка) = ТипЗнч(Справочники.КонтрольныеМетки.ПустаяСсылка()) Тогда
		РеквизитЗаказа = КонтрольнаяМетка.РеквизитЗаказа;			
	ИначеЕсли ТипЗнч(КонтрольнаяМетка) = ТипЗнч("") Тогда
		РеквизитЗаказа = КонтрольнаяМетка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольныеМетки.Ссылка
		|ИЗ
		|	Справочник.КонтрольныеМетки КАК КонтрольныеМетки
		|ГДЕ
		|	НЕ КонтрольныеМетки.ПометкаУдаления
		|	И КонтрольныеМетки.РеквизитЗаказа = &РеквизитЗаказа";

	Запрос.УстановитьПараметр("РеквизитЗаказа", РеквизитЗаказа);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФорматКорректный = Истина;
		Если ВыборкаДетальныеЗаписи.Ссылка.КонтролироватьФормат Тогда
			Если НЕ СтрДлина(ЗначениеКонтрольнойМетки) = ВыборкаДетальныеЗаписи.Ссылка.Длина Тогда //Проверка по длине
				ФорматКорректный = Ложь;
				ТекстСообщения = НСтрMES("ru='Отсканированное значение не соответствует установленному формату!';en='Scanned value does not correspond to the set format!'");
			КонецЕсли;
			Если ВыборкаДетальныеЗаписи.Ссылка.ТолькоЦифры И НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ЗначениеКонтрольнойМетки, НЕ ВыборкаДетальныеЗаписи.Ссылка.ЕстьЛидирующиеНули, НЕ ВыборкаДетальныеЗаписи.Ссылка.ЕстьПробелы) Тогда //Проверка по формату
				ФорматКорректный = Ложь;
				ТекстСообщения = НСтрMES("ru='Отсканированное значение не соответствует установленному формату!';en='Scanned value does not correspond to the set format!'")
			КонецЕсли;
			Если ФорматКорректный Тогда
				ПодходящаяКонтрольнаяМетка = ВыборкаДетальныеЗаписи.Ссылка;
				Прервать;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ФорматКорректный;
	
КонецФункции


#КонецОбласти