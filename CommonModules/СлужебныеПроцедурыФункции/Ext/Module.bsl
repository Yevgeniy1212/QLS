Процедура УдалитьСтарыеНаборыДополнительныхРеквизитовИСведений() Экспорт
	
	перем ВК_маркеров; //Softpoint
    УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ПометкаУдаления";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектНаУдаление = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектНаУдаление.Удалить();
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
Процедура ПроставитьГУИДФизЛицаВПользователя() экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ФизЛицо
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи"
		;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() цикл
			
			Если ЗначениеЗаполнено(Выборка.ФизЛицо) тогда
				СпрОб = Выборка.Пользователь.ПолучитьОбъект();
				СпрОб.GUIDDFS = Выборка.ФизЛицо.УникальныйИдентификатор();
				СпрОб.ТипПользователя = Перечисления.ТипыПользователей.Company;
				СпрОб.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("Data_Exchange");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("21d0bc05-f0f6-11e1-9126-001cc4da6ebe");
			СпрОб1.Записать();
		КонецЕсли;	
			
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("MES_FSE_ROOT");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("6a31912b-6896-11e2-a063-441ea13d71c4");
			СпрОб1.Записать();
		КонецЕсли;	
		
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("Зонин Константин");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("9f9e8996-6d57-11e2-a063-441ea13d71c4");
			СпрОб1.Записать();
		КонецЕсли;	
		
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("Кузьмина Светлана Викторовна");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("5112612d-e2b7-11e0-88dc-001f2907a018");
			СпрОб1.Записать();
		КонецЕсли;	
		
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("Шабалова Елена");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("7c2e10f6-6d50-11e2-a063-441ea13d71c4");
			СпрОб1.Записать();
		КонецЕсли;	
		
		СпрОб = Справочники.Пользователи.НайтиПоНаименованию("RODPLAN");
		Если ЗначениеЗаполнено(СпрОб) тогда
			СпрОб1 = СпрОб.ПолучитьОбъект();
			СпрОб1.GUIDDFS = Новый УникальныйИдентификатор("84d42cdd-9066-11e2-a445-441ea13d71c4");
			СпрОб1.Записать();
		КонецЕсли;	
		
		
		//Установим всем пользователям признак недействителен, при загрузке из ДФС установится только активным
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Спр_Пользователи_Объект = Выборка.Ссылка.ПолучитьОбъект();
		    Спр_Пользователи_Объект.Недействителен = Истина;
			Спр_Пользователи_Объект.Записать();
		КонецЦикла;
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

	
КонецПроцедуры
Процедура ЗаполнитьРегистр_СоответствиеИменТаблицОпцийАтомобиляДополнительнымРеквизитамЭлементовСпецификацииЗаказа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Ссылка,
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Свойство
		|ИЗ
		|	Документ.ОпределениеСпецификацииЗаказаПоОпциямАвто.ДополнительныеСведения КАК ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения
		|ГДЕ
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Свойство,
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Ссылка.Номер
		|ИТОГИ ПО
		|	ОпределениеСпецификацииЗаказаПоОпциямАвтоДополнительныеСведения.Ссылка";

	Результат = Запрос.Выполнить();

	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка

		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
        ИмяТаблицыОпций = ВыборкаСсылка.Ссылка.ИмяТаблицыОпций;
        ЭлементСпецификации = ВыборкаСсылка.Ссылка.ЭлементСпецификации;
		
		НаборЗаписей = РегистрыСведений.СоответствиеИменТаблицОпцийАтомобиляДополнительнымРеквизитамЭлементовСпецификацииЗаказа.СоздатьНаборЗаписей();
		    
 		НаборЗаписей.Отбор.ИмяТаблицыОпций.Установить(ИмяТаблицыОпций);
		НаборЗаписей.Отбор.ЭлементСпецификацииЗаказа.Установить(ЭлементСпецификации);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ИмяТаблицыОпций = ИмяТаблицыОпций;
			НоваяЗапись.ЭлементСпецификацииЗаказа = ЭлементСпецификации;
			НоваяЗапись.ДополнительныйРеквизитЭлементаСпецификации = ВыборкаДетальныеЗаписи.Свойство;
			
		КонецЦикла;
		НаборЗаписей.Записать();	
	КонецЦикла;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

Функция ПолучитьASCIIКодыСтроки(Текст) Экспорт
	
	ДлинаСтроки = СтрДлина(Текст);
	
	Результат = "";
	
	Для х = 1 По ДлинаСтроки Цикл
		
		Число = КодСимвола(Сред(Текст, х, 1));
		
		Разряды = Новый Массив;
		Разряды.Добавить(Цел(Число/16));
		Разряды.Добавить(Число%16);
		
		Для Каждого ЧислоРазряда Из Разряды Цикл
			
			Если ЧислоРазряда = 0 Тогда
				Результат = Результат + "0";
				
			ИначеЕсли ЧислоРазряда < 10 Тогда
				Результат = Результат + ЧислоРазряда;
				
			ИначеЕсли ЧислоРазряда = 10 Тогда
				Результат = Результат + "A";
				
			ИначеЕсли ЧислоРазряда = 11 Тогда
				Результат = Результат + "B";
				
			ИначеЕсли ЧислоРазряда = 12 Тогда
				Результат = Результат + "C";
				
			ИначеЕсли ЧислоРазряда = 13 Тогда
				Результат = Результат + "D";
				
			ИначеЕсли ЧислоРазряда = 14 Тогда
				Результат = Результат + "E";
				
			ИначеЕсли ЧислоРазряда = 15 Тогда
				Результат = Результат + "F";
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДесятичныйКодИзШестнадцатиричного(СтрокаASCII,ТекНомерСимвола,ТаблицаКодировки,ТекстОшибки)

	Hex = Сред(СтрокаASCII,ТекНомерСимвола,1);
	ДесятичныйКод = ТаблицаКодировки.Получить(Hex);
	Если ДесятичныйКод = Неопределено Тогда
	
		ТекстОшибки = ТекстОшибки + "В полученной строке символ № "+ТекНомерСимвола+""""+Hex+""" не является шестнадцатиричным кодом"+Символы.ПС;
		Возврат Неопределено;
	Иначе
		Возврат ДесятичныйКод;
	КонецЕсли; 

КонецФункции // ПолучитьДесятичныйКодИзШестнадцатиричного()

Функция ПолучитьСтрокуИзASCIIКодов(Знач СтрокаASCII,ТекстОшибки) Экспорт
	
	ТаблицаКодировки = новый Соответствие;
	ТаблицаКодировки.Вставить("0",0);
	ТаблицаКодировки.Вставить("1",1);
	ТаблицаКодировки.Вставить("2",2);
	ТаблицаКодировки.Вставить("3",3);
	ТаблицаКодировки.Вставить("4",4);
	ТаблицаКодировки.Вставить("5",5);
	ТаблицаКодировки.Вставить("6",6);
	ТаблицаКодировки.Вставить("7",7);
	ТаблицаКодировки.Вставить("8",8);
	ТаблицаКодировки.Вставить("9",9);
	ТаблицаКодировки.Вставить("A",10);
	ТаблицаКодировки.Вставить("B",11);
	ТаблицаКодировки.Вставить("C",12);
	ТаблицаКодировки.Вставить("D",13);
	ТаблицаКодировки.Вставить("E",14);
	ТаблицаКодировки.Вставить("F",15);
	
	СтрокаASCII = Врег(СтрокаASCII);
	
	ДлинаСтроки = СтрДлина(СтрокаASCII);
	КоличествоСимволовВСообщении = ДлинаСтроки/2;
	Если КоличествоСимволовВСообщении <> Цел(КоличествоСимволовВСообщении) Тогда
		ТекстОшибки = ТекстОшибки + "Ошибка расшифровки кодированного сообщения: в нем должно быть четное количество символов"+Символы.ПС;
		Возврат Неопределено;
	КонецЕсли;
	Результат = "";
	ТекПозиция = 1;
	Пока ТекПозиция <= ДлинаСтроки Цикл
	
		Код16X_Символа = ПолучитьДесятичныйКодИзШестнадцатиричного(СтрокаASCII,ТекПозиция,ТаблицаКодировки,ТекстОшибки);
		Если Код16X_Символа = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		Код1X_Символа = ПолучитьДесятичныйКодИзШестнадцатиричного(СтрокаASCII,ТекПозиция+1,ТаблицаКодировки,ТекстОшибки);
		Если Код1X_Символа = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		ДекодированныйСимвол = Символ(Код16X_Символа*16+Код1X_Символа);
		Если СтрДлина(ДекодированныйСимвол) = 0 Тогда
			ТекстОшибки =  ТекстОшибки + "Ошибка декодирования символа из двух шестнадцатиричных кодов ("+Код16X_Символа+" и "+Код1X_Символа+"). Начальная позиция в кодированном сообщении: "+ТекПозиция+Символы.ПС;
			Возврат Неопределено;
		КонецЕсли;
		Результат = Результат + ДекодированныйСимвол;
		ТекПозиция = ТекПозиция + 2;
	КонецЦикла;
 	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьПереходНаНовыйМеханизмРасшифровкиEOC() Экспорт

	//НачатьТранзакцию();
	
	ПеренумероватьКлассификаторОпций_Сервер();
	//ПровестиДокументыМаршрутовЗаказов_Сервер();
	ЗаполнениеМассиваОпцийВЗаказах_Сервер();

	//ЗафиксироватьТранзакцию();
КонецФункции // ВыполнитьПереходНаНовыйМеханизмРасшифровкиEOC()
Процедура ПеренумероватьКЛассификаторОпций_Сервер()

	// Сначала изменим все номера 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОпцийАвтомобиля.Ссылка
		|ИЗ
		|	Справочник.КлассификаторОпцийАвтомобиля КАК КлассификаторОпцийАвтомобиля
		|ГДЕ
		|	НЕ КлассификаторОпцийАвтомобиля.ЭтоГруппа";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	ТекНомер = 50000;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОпцияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОпцияОбъект.Владелец = ОпцияОбъект.ИмяТаблицыОпций;
		ОпцияОбъект.Родитель = "";
		ОпцияОбъект.Код = ТекНомер;
		ТекНомер = ТекНомер + 1;
		ОпцияОбъект.Записать();
	КонецЦикла;
	
	
	// теперь сделаем нумерацию с единицы в пределах владельца
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОпцийАвтомобиля.Ссылка,
		|	КлассификаторОпцийАвтомобиля.ИмяТаблицыОпций КАК ИмяТаблицыОпций
		|ИЗ
		|	Справочник.КлассификаторОпцийАвтомобиля КАК КлассификаторОпцийАвтомобиля
		|ГДЕ
		|	НЕ КлассификаторОпцийАвтомобиля.ЭтоГруппа
		|УПОРЯДОЧИТЬ ПО
		|	КлассификаторОпцийАвтомобиля.Switch
		|ИТОГИ ПО
		|	ИмяТаблицыОпций";

	Результат = Запрос.Выполнить();

	ВыборкаИмяТаблицыОпций = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаИмяТаблицыОпций.Следующий() Цикл

		ВыборкаДетальныеЗаписи = ВыборкаИмяТаблицыОпций.Выбрать();
		текНомер = 1;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОпцияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОпцияОбъект.Код = ТекНомер;
			ТекНомер = ТекНомер + 1;
			ОпцияОбъект.Записать();
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
Процедура ЗаполнениеМассиваОпцийВЗаказах_Сервер()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеЗаказовОстатки.Заказ
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	РегистрНакопления.ДвижениеЗаказов.Остатки(, ) КАК ДвижениеЗаказовОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДвижениеЗаказовОстатки.ТочкаРегистрации.ТипТочкиРегистрации.Процесс <> ЗНАЧЕНИЕ(Перечисление.Процессы.СГП)
		|					И НЕ(ДвижениеЗаказовОстатки.ТочкаРегистрации.ТипТочкиРегистрации.Процесс = ЗНАЧЕНИЕ(Перечисление.Процессы.Тестирование)
		|							И ДвижениеЗаказовОстатки.ТочкаРегистрации.ТипТочкиРегистрации.ФазаПроцесса = ЗНАЧЕНИЕ(Перечисление.ФазыПроцесса.Окончание))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвижениеЗаказовОстатки.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыОпции.Ссылка КАК Ссылка,
		|	ЗаказыОпции.Опция.Код КАК КодОпции
		|ИЗ
		|	Заказы КАК Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Заказы.Опции КАК ЗаказыОпции
		|		ПО Заказы.Заказ = ЗаказыОпции.Ссылка
		|ГДЕ
		|	ЗаказыОпции.Опция <> ЗНАЧЕНИЕ(Справочник.КлассификаторОпцийАвтомобиля.ПустаяСсылка)
		|ИТОГИ ПО
		|	Ссылка";

	Результат = Запрос.Выполнить();

	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаСсылка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаСсылка

		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		МассивОпций = новый Массив(8000);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивОпций[ВыборкаДетальныеЗаписи.КодОпции] = Истина;
		КонецЦикла;
        ЗаказОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
		ЗаказОбъект.Опции_Массив_Строкой = ЗначениеВСтрокуВнутр(МассивОпций);
		ЗаказОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьИдентификаторРеквизитаЗаказаSpares() Экспорт
    Комплект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.КомплектSpares;
	ИдентификаторПредопределенногоЭлемента = ""+ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьИмяПредопределенного(Комплект);	
    КомплектОбъект =  Комплект.ПолучитьОбъект();
	КомплектОбъект.ИдентификаторРеквизитаЗаказа = ИдентификаторПредопределенногоЭлемента;
    КомплектОбъект.Записать();
КонецПроцедуры

Процедура УстановитьНомерПоследнейЗатяжки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НетиповыеОбменыДанными.НомерЗагруженногоПакета
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена = &ИмяОбработкиОбмена";

	Запрос.УстановитьПараметр("ИмяОбработкиОбмена",Метаданные.Обработки.ЗагрузкаDCTOOL_TIGHTENING_DATA_LOAD.Имя);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Константы.НомерПоследнейЗатяжки.Установить(ВыборкаДетальныеЗаписи.НомерЗагруженногоПакета);
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьЗадублировавшихсяПользователей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ФизЛицо,
		|	КОЛИЧЕСТВО(Пользователи.ФизЛицо) КАК КоличествоПользователей
		|ПОМЕСТИТЬ ОпределениеКоличестваПривязок
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОпределениеКоличестваПривязок.ФизЛицо,
		|	Пользователи.Ссылка,
		|	Пользователи.GUIDDFS
		|ИЗ
		|	ОпределениеКоличестваПривязок КАК ОпределениеКоличестваПривязок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ОпределениеКоличестваПривязок.ФизЛицо = Пользователи.ФизЛицо
		|ГДЕ
		|	ОпределениеКоличестваПривязок.КоличествоПользователей > 1
		|	И Пользователи.GUIDDFS = &ПустойУникальныйИдентификатор";

	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектПользователя = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектПользователя.Удалить();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаменаАмперсанда() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаПечатныхФормСрезПоследних.Регистратор КАК Регистратор,
		|	НастройкаПечатныхФормТаблицаДокумента.НомерСтроки,
		|	НастройкаПечатныхФормТаблицаДокумента.ФормулаЯчейки
		|ИЗ
		|	РегистрСведений.НастройкаПечатныхФорм.СрезПоследних КАК НастройкаПечатныхФормСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НастройкаПечатныхФорм.ТаблицаДокумента КАК НастройкаПечатныхФормТаблицаДокумента
		|		ПО НастройкаПечатныхФормСрезПоследних.Регистратор = НастройкаПечатныхФормТаблицаДокумента.Ссылка
		|ГДЕ
		|	НастройкаПечатныхФормТаблицаДокумента.ФормулаЯчейки ПОДОБНО &ФормулаЯчейки
		|ИТОГИ ПО
		|	Регистратор";

	Запрос.УстановитьПараметр("ФормулаЯчейки", "%&amp;%");

	Результат = Запрос.Выполнить();

	ВыборкаРегистратор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаРегистратор.Следующий() Цикл
		НовыйДокумент = ВыборкаРегистратор.Регистратор.Скопировать();
		ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Строка = НовыйДокумент.ТаблицаДокумента[ВыборкаДетальныеЗаписи.НомерСтроки-1].ФормулаЯчейки;
			Строка = СтрЗаменить(Строка,"&amp;", "&");
			Строка = СтрЗаменить(Строка,"&Amp;", "&");
			Строка = СтрЗаменить(Строка,"&AMP;", "&");
			НовыйДокумент.ТаблицаДокумента[ВыборкаДетальныеЗаписи.НомерСтроки-1].ФормулаЯчейки = Строка;
		КонецЦикла;
		НовыйДокумент.Комментарий = "Замена ""&amp;"" на ""&""";
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьВидЭлементаСпецификации() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыСпецификацииЗаказа.Ссылка
		|ИЗ
		|	Справочник.ЭлементыСпецификацииЗаказа КАК ЭлементыСпецификацииЗаказа";

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 ЭлСпецификации = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		 ЭлСпецификации.ВидЭлементаСпецификации = Справочники.ВидыЭлементовСпецификации.ВнутреннийЭлементСпецификации;
		 ЭлСпецификации.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьИдентификаторСостоянийРегЗаданий() Экспорт
	Выборка = РегистрыСведений.СОЛЛЕРС_ПоследнееВыполненноеЗадание.Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
		Если Выборка.Состояние = "Задание выполняется" Или Выборка.Состояние = "Job is running"  Тогда
			МенеджерЗаписи.СостояниеИдентификатор = 1; 
		КонецЕсли;
		Если Выборка.Состояние = "Задание выполнено" Или Выборка.Состояние = "Job is completed"  Тогда
			МенеджерЗаписи.СостояниеИдентификатор = 2; 
		КонецЕсли;
		Если Выборка.Состояние = "Задание завершено с ошибками" Или Выборка.Состояние = "Job failed"  Тогда
			МенеджерЗаписи.СостояниеИдентификатор = 3; 
		КонецЕсли;
		Если Выборка.Состояние = "Задание отменено пользователем" Или Выборка.Состояние = "Job cancelled by user"  Тогда
			МенеджерЗаписи.СостояниеИдентификатор = 4; 
		КонецЕсли;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	#Если НаКлиенте Тогда
		РезультатЗапроса.ВыбратьСтроку(ИмяВременнойТаблицы + ":" + Комментарий);
	#КонецЕсли
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПоказатьВременнуюТаблицу()

Процедура ОбновитьСправочникПрофилиПользователей() Экспорт

	МассивИзмененныеПрофилиПользователя = Новый Массив;	
	ТаблицаПереименованийРолей = ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьПереименованиеРолей();
	ОбработатьПереименованияРолей(ТаблицаПереименованийРолей, МассивИзмененныеПрофилиПользователя);
	
	МассивОбработанныеРоли = Новый Массив;
	Для каждого Роль Из Метаданные.Роли Цикл
		ПрофильПользователяСсылка = Справочники.ПрофилиПользователей.НайтиПоРеквизиту("ИмяРоли", Роль.Имя);
		Если НЕ ЗначениеЗаполнено(ПрофильПользователяСсылка) Тогда
			НовыйПрофильПользователяОбъект = Справочники.ПрофилиПользователей.СоздатьЭлемент();
			НовыйПрофильПользователяОбъект.ИмяРоли = Роль.Имя;
			НовыйПрофильПользователяОбъект.Наименование = Роль.Синоним;
			НовыйПрофильПользователяОбъект.Записать();
			ПрофильПользователяСсылка = НовыйПрофильПользователяОбъект.Ссылка;
			МассивИзмененныеПрофилиПользователя.Добавить(ПрофильПользователяСсылка);
		КонецЕсли;
	    МассивОбработанныеРоли.Добавить(ПрофильПользователяСсылка);
	КонецЦикла;
	
	ПометитьНаУдалениеПрофилиДоступаУдаленныхРолей(МассивОбработанныеРоли, МассивИзмененныеПрофилиПользователя);
	
	ИнициализацияОбменаСМодулями(МассивИзмененныеПрофилиПользователя);

КонецПроцедуры

Процедура ПометитьНаУдалениеПрофилиДоступаУдаленныхРолей(МассивОбработанныеРоли, МассивИзмененныеПрофилиПользователя)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиПользователей.Ссылка
		|ИЗ
		|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
		|ГДЕ
		|	НЕ ПрофилиПользователей.ПометкаУдаления
		|	И НЕ ПрофилиПользователей.Ссылка В (&МассивОбработанныеРоли)";

	Запрос.УстановитьПараметр("МассивОбработанныеРоли", МассивОбработанныеРоли);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПрофильПользователяОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ПрофильПользователяОбъект.ПометкаУдаления = Истина;
		ПрофильПользователяОбъект.Записать();
		ПрофильПользователяСсылка = ПрофильПользователяОбъект.Ссылка;
		МассивИзмененныеПрофилиПользователя.Добавить(ПрофильПользователяСсылка);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПереименованияРолей(ТаблицаПереименованийРолей, МассивИзмененныеПрофилиПользователя)

	Для каждого ОбработчикПереименованийРолей Из ТаблицаПереименованийРолей Цикл
	
		ПрофильПользователяСсылка = Справочники.ПрофилиПользователей.НайтиПоРеквизиту("ИмяРоли", ОбработчикПереименованийРолей.СтароеИмя);
		Если ЗначениеЗаполнено(ПрофильПользователяСсылка) Тогда
			ПрофильПользователяОбъект = ПрофильПользователяСсылка.ПолучитьОбъект();
			ПрофильПользователяОбъект.ИмяРоли = ОбработчикПереименованийРолей.НовоеИмя;
			ПрофильПользователяОбъект.Записать();
			ПрофильПользователяСсылка = ПрофильПользователяОбъект.Ссылка;
			МассивИзмененныеПрофилиПользователя.Добавить(ПрофильПользователяСсылка);
		Иначе
			ВызватьИсключение "Не найден ПрофильПользователя с ИмяРоли равным """ + ОбработчикПереименованийРолей.СтароеИмя + """!";
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

Процедура ИнициализацияОбменаСМодулями(МассивОбработанныеРоли)
	
 	НайденныйОбменДанными = Справочники.НетиповыеОбменыДанными.ПолучитьОбменыПоИмениОбработки(Метаданные.Обработки.ВыгрузкаMES_TO_MODULES_USER_PROFILES.Имя);
	Для каждого Обмен Из НайденныйОбменДанными Цикл
		Для каждого ОбработаннаяРоль Из МассивОбработанныеРоли Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(Обмен.УзелРегистрацииИзменений, ОбработаннаяРоль);
		КонецЦикла;
		РаботасОбменомДанными.ЗапуститьРеглЗадание(Обмен,0,,Истина);
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнитьАвтораВДокументахИСправочниках
//Заполнение Автора в документах и справочниках

Процедура ЗаполнитьАвтораИРедактораДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьАвтораИРедактораПередЗаписью(Источник);
	//ТекущаяДата			= ТекущаяДата();
	//ТекущийПользователь	= Пользователи.ТекущийПользователь();
	//
	//Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник));
	//РеквизитыДляЗаполнения = ПолучитьРеквизитыДляЗаполненияАвтораИРедактора(Идентификатор);
	//
	//Если Источник.ЭтоНовый() Тогда	
	//	Если РеквизитыДляЗаполнения.Автор И РеквизитыДляЗаполнения.АвторДата Тогда
	//		Источник.Автор	   = ТекущийПользователь;
	//		Источник.АвторДата = ТекущаяДата;
	//	КонецЕсли;		
	//КонецЕсли;
	//
	//Если РеквизитыДляЗаполнения.Редактор И РеквизитыДляЗаполнения.РедакторДата Тогда
	//	Источник.Редактор	  = ТекущийПользователь;
	//	Источник.РедакторДата = ТекущаяДата;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьАвтораИРедактораСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьАвтораИРедактораПередЗаписью(Источник);
	//ТекущаяДата			= ТекущаяДата();
	//ТекущийПользователь	= Пользователи.ТекущийПользователь();

	//Если Источник.ЭтоНовый() Тогда	
	//	Источник.Автор	   = ТекущийПользователь;
	//	Источник.АвторДата = ТекущаяДата;
	//КонецЕсли;
	//
	//Источник.Редактор	  = ТекущийПользователь;
	//Источник.РедакторДата = ТекущаяДата;

КонецПроцедуры

Процедура ЗаполнитьАвтораИРедактораПередЗаписью(Источник)
	
	ТипЗначения = ТипЗнч(Источник);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) и Источник.ЭтоГруппа = Истина  Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяДата			= ТекущаяДата();
	ТекущийПользователь	= ПараметрыСеанса.ТекущийПользователь;
	
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Источник));
	РеквизитыДляЗаполнения = ПолучитьРеквизитыДляЗаполненияАвтораИРедактора(Идентификатор);
	
	Если Источник.ЭтоНовый() Тогда	
		Если РеквизитыДляЗаполнения.Автор И РеквизитыДляЗаполнения.АвторДата Тогда
			Источник.Автор	   = ТекущийПользователь;
			Источник.АвторДата = ТекущаяДата;
		КонецЕсли;		
	КонецЕсли;
	
	Если РеквизитыДляЗаполнения.Редактор И РеквизитыДляЗаполнения.РедакторДата Тогда
		Источник.Редактор	  = ТекущийПользователь;
		Источник.РедакторДата = ТекущаяДата;
	КонецЕсли;	

КонецПроцедуры

Функция ПолучитьРеквизитыДляЗаполненияАвтораИРедактора(ИдентификаторОбъектаМетаданных) Экспорт    
	
	СтруктураРеквизитов = Новый Структура("Автор, АвторДата, Редактор, РедакторДата",
										  Ложь, Ложь, Ложь, Ложь);
										  
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаМетаданных);
	
	РеквизитыДокумента = ОбъектМетаданных.Реквизиты;
	Для Каждого КлючЗначение Из СтруктураРеквизитов Цикл
		СтруктураРеквизитов[КлючЗначение.Ключ] = РеквизитыДокумента.Найти(КлючЗначение.Ключ) <> Неопределено;
	КонецЦикла;
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#Область Кампании

Процедура АвтоматическоеУправлениеКомпаниямиПриЗаписи(Источник, Отказ, Замещение) Экспорт
	Если ПараметрыСеанса.ОтключитьОбработчикиПроведенияЗаказаПоТочкеРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаДанных = Источник.Выгрузить(,"ВидДвижения,ТочкаРегистрации,Регистратор");
	ТаблицаДанных.Свернуть("ВидДвижения,ТочкаРегистрации,Регистратор");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ВидДвижения,
		|	ТаблицаРегистра.ТочкаРегистрации,
		|	ТаблицаРегистра.Регистратор
		|ПОМЕСТИТЬ ТаблицаРегистра
		|ИЗ
		|	&ТаблицаРегистра КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Регистратор
		|ПОМЕСТИТЬ Исходная
		|ИЗ
		|	ТаблицаРегистра КАК ТаблицаРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АвтоматическоеУправлениеКампаниями КАК АвтоматическоеУправлениеКампаниями
		|		ПО ТаблицаРегистра.ТочкаРегистрации = АвтоматическоеУправлениеКампаниями.ТочкаРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НетиповыеОбменыДанными.Ссылка
		|ПОМЕСТИТЬ Обмен
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена = &ИмяОбработкиОбмена
		|	И НетиповыеОбменыДанными.ВключитьРегистрациюИзмененийВПланеОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обмен.Ссылка КАК Обмен,
		|	Исходная.Регистратор
		|ИЗ
		|	Обмен КАК Обмен,
		|	Исходная КАК Исходная";
	
	Запрос.УстановитьПараметр("ТаблицаРегистра",ТаблицаДанных);
	Запрос.УстановитьПараметр("ИмяОбработкиОбмена",Метаданные.Обработки.АвтоматическоеУправлениеКомпаниями.Имя);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			ЗарегистрироватьИзмененияОбъектаВПланеОбмена(Выборка.Регистратор,Выборка.Обмен);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

Процедура ЗарегистрироватьИзмененияОбъектаВПланеОбмена(ВыгружаемыйОбъект,ВидВыгрузкиДанных) Экспорт
	
	// может регистрация выгрузки по этому обмену не включена для планов обмена?
	Если Не ВидВыгрузкиДанных.ВключитьРегистрациюИзмененийВПланеОбмена Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ВидВыгрузкиДанных.УзелРегистрацииИзменений) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(ВидВыгрузкиДанных.СобытиеЖурналаРегистрации,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,"Не заполнен реквизит ""Узел регистрации изменений"" нетипового обмена """+ВидВыгрузкиДанных+""". Невозможно зарегистрировать """+ВыгружаемыйОбъект+""" для выгрузки.");
		Возврат;
	КонецЕсли;
	
	//регистрация в плане обмена НетиповыеОбмены
	Если ВидВыгрузкиДанных.УзелРегистрацииИзменений.Метаданные().Состав.Найти(ВыгружаемыйОбъект.Метаданные()) <> Неопределено Тогда
		//// если это набор записей, то его надо регистрировать по особенному...
		Если НЕ ЗначениеЗаполнено(ВыгружаемыйОбъект) Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(ВидВыгрузкиДанных.УзелРегистрацииИзменений, ВыгружаемыйОбъект);
		РаботасОбменомДанными.ЗапуститьРеглЗадание(ВидВыгрузкиДанных);
	КонецЕсли;
	
КонецПроцедуры

#Область Тресхолды
	
&НаСервере
Функция ПроизвольныйЛиВариантУАнализируемогоПериода(Вариант) Экспорт
	
	Если Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
