
#Область ПрограммныйИнтерфейс

Процедура СписокДоступныхРабочихМест(Запрос, Ответ) Экспорт
		
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьСписокДоступныхРабочихМестПоПользователю(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	 
КонецПроцедуры

Процедура ИнформацияПоРабочемуМесту(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);		
	ИнформацияРабочегоМеста(Запрос, Ответ); 
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);	
	
КонецПроцедуры

Процедура ИнформацияПоЗаказу(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	РасшифроватьИдентификаторОбъектаИзСтрокиBase64(Запрос, Ответ);		
	ИнформацияЗаказаПоСсылке(Запрос, Ответ);		
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

Процедура СписокИнспектируемыхЭлементов(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ПолучитьСписокИнспектируемыхЭлементов(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);

КонецПроцедуры

Процедура РегистрацияСтатусаКачестваЗаказа(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, ПараметрыРазбораТелаHTTPЗапросаРегистрацииЗаказаНаТочке(Запрос)); 
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ЗарегистрироватьСтатусЗаказа(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры       

Процедура РегистрацияРемонтаЗаказа(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, 
		ПараметрыРазбораТелаHTTPЗапросаЗакрытиеДефекта(Запрос)); 
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);   
	
	ЗарегистрироватьРемонтЗаказа(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры      

Процедура РегистрацияОперацииПоКонтролю(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, 
		ПараметрыРазбораТелаHTTPЗапросаОперацияПоКонтролю(Запрос)); 
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);   
	
	ЗарегистрироватьОперациюПоКонтролю(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры 

Процедура ВыполнитьЗадачу(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, 
		ПараметрыРазбораТелаHTTPЗапросаВыполнитьЗадачу(Запрос)); 
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);   
	
	ЗарегистрироватьВыполнениеЗадачи(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры 


Процедура ЗавершитьИнспекцию(Запрос, Ответ) Экспорт
		
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ЗавершитьИнспекциюЗаказа(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

Процедура СписокКонсерновЗаказа(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ПолучитьСписокКонсернов(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры         

Процедура СписокКонтролируемыхКонсерновЗаказа(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ПолучитьСписокКонтролируемыхКонсернов(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры   

Процедура СписокКампанийЗаказа(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	
	ПолучитьСписокКампаний(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры   

Процедура ДанныеРемонтника(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ПолучитьДанныеРемонтника(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

Процедура ЗавершитьИнспекциюРемонтника(Запрос, Ответ) Экспорт
		
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьЗаказПоЗначению(Запрос, Ответ);
	ЗавершитьИнспекциюЗаказаРемонтника(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры
 
Процедура СписокДефектовРабочегоМеста(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ПолучитьСписокДефектовРабочегоМеста(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры         


// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.GetImageGET(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ПолучитьИзображениеПоИдентификатору(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	Изображение = Неопределено;
	ДанныеИзображения = Неопределено;
	
	
	Если ЗначениеЗаполнено(Запрос.ДополнительныеСвойства.ИдентификаторИзображения)
			И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Запрос.ДополнительныеСвойства.ИдентификаторИзображения) Тогда
		
		Изображение = Справочники.ИзображенияПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Запрос.ДополнительныеСвойства.ИдентификаторИзображения));
	Иначе
		Отказ = Истина;
		ОписаниеОшибки = "Некорректный идентификатор изображения.";
	КонецЕсли;
	
	Если НЕ Отказ И ОбщегоНазначения.СсылкаСуществует(Изображение) Тогда
		ДанныеИзображения = Изображение.ФайлХранилище.Получить();
	Иначе
		Отказ = Истина;
		ОписаниеОшибки = "Изображение не найдено.";
	КонецЕсли;
	
	Если НЕ Отказ И (ТипЗнч(ДанныеИзображения) <> Тип("ДвоичныеДанные") ИЛИ ДанныеИзображения.Размер() = 0) Тогда
		Отказ = Истина;
		ОписаниеОшибки = "Изображение не найдено.";
	КонецЕсли;
	
	
	Если НЕ Отказ Тогда
		КонтрольнаяСумма = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеИзображения, ХешФункция.MD5);
		ДатаМодификации = ?(ЗначениеЗаполнено(Изображение.ДатаМодификацииУниверсальная), Изображение.ДатаМодификацииУниверсальная, Изображение.ДатаСоздания);
		РасширениеФайла = ?(НЕ ПустаяСтрока(Изображение.Расширение), СокрЛП(Изображение.Расширение), "jpg");
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		Ответ.Заголовки.Вставить("E-tag", КонтрольнаяСумма);
		Ответ.Заголовки.Вставить("Last-Modified", ОбщегоНазначенияКлиентСервер.ДатаHTTP(ДатаМодификации));
		Ответ.Заголовки.Вставить("Content-type", "image/" + РасширениеФайла);
		Ответ.Заголовки.Вставить("Cache-Control", "public, max-age=604800, immutable");
		Ответ.УстановитьТелоИзДвоичныхДанных(ДанныеИзображения);
	Иначе
		ЗаписьЖурналаРегистрации(ОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
		
		Ответ = Ответ.Получить();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.GetImageMapGET(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура СписокИзображенийТочкиПроверкиКачества(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);
	
	ЗаполнитьСписокИзображенийТочкиПроверкиКачества(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.RegisterOrderQualityStatusFromDevicePOST(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура РегистрацияСтатусаКачестваЗаказаОтОборудования(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, ПараметрыРазбораТелаHTTPЗапросаРегистрацииЗаказаНаТочке(Запрос)); 
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);
	ЗарегистрироватьСтатусЗаказа(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры       

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.RepairerCloseDefectFromDevicePOST(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура РегистрацияРемонтаЗаказаОтОборудования(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, ПараметрыРазбораТелаHTTPЗапросаЗакрытиеДефекта(Запрос));
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);   
	
	ЗарегистрироватьРемонтЗаказа(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры      

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.CheckCompleteFromDevicePOST(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура РегистрацияОперацииПоКонтролюОтОборудования(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ВебПриложениеРасширяемый.РазобратьТело(Запрос, Ответ, ПараметрыРазбораТелаHTTPЗапросаОперацияПоКонтролю(Запрос));
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);
	
	ЗарегистрироватьОперациюПоКонтролю(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры


// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.RegisterOrderForCampaignPOST(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура РегистрацияЗаказаНаКампанию(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);
	
	ПолучитьКампаниюПоИдентификатору(Запрос, Ответ);
	
	ЗарегистрироватьОперациюПоКампании(Запрос, Ответ, Перечисления.ОперацииКампании.Установка);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.RemoveFromCampaignPOST(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура СнятиеЗаказаСКампании(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	
	ЗаполнитьЗаказЗапроса(Запрос, Ответ);
	
	ПолучитьКампаниюПоИдентификатору(Запрос, Ответ);
	
	ЗарегистрироватьОперациюПоКампании(Запрос, Ответ, Перечисления.ОперацииКампании.Снятие);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

// Заполняет параметр Ответ для метода HTTP-сервисы.Workstation_2_0.GetResponsibleForInspectionItemGET(...)
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ОтветственныйЗаИнспектируемыйЭлемент(Запрос, Ответ) Экспорт
	
	СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ);
	
	ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ);
	
	ПолучитьИнспектируемыйЭлементПоИдентификатору(Запрос, Ответ);
	
	ПолучитьДефектПоИдентификатору(Запрос, Ответ);
	
	ЗаполнитьОтветственногоЗаИнспектируемыйЭлемент(Запрос, Ответ);
	
	РаботаСHTTPСервисами.ОформитьОтветСервиса(Запрос, Ответ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//Определение состояния инспектирования
Функция ОпределитьСостояниеИнспектирования(Заказ, ТочкаПроверкиКачества) Экспорт
	
	ИнспекцияВыполнена = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ,
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества,
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Выполнена
	|ИЗ
	|	РегистрСведений.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.СрезПоследних КАК ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних
	|ГДЕ
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ = &Заказ
	|	И ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества = &ТочкаПроверкиКачества";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИнспекцияВыполнена = ВыборкаДетальныеЗаписи.Выполнена; 
	КонецЦикла;
	
	Возврат ИнспекцияВыполнена;
	
КонецФункции

Функция ПолучитьСсылкуПоУИ(УникальныйИдентификатор, МенеджерОбъекта) Экспорт
	
	Ссылка = МенеджерОбъекта.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		Возврат Ссылка;	
	КонецЕсли;
	
	УИДСсылки = СериализаторXDTO.XMLЗначение(Тип("УникальныйИдентификатор"), УникальныйИдентификатор);
	
	НоваяСсылка = МенеджерОбъекта.ПолучитьСсылку(УИДСсылки);
	Если ОбщегоНазначения.СсылкаСуществует(НоваяСсылка) Тогда
		Ссылка = НоваяСсылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

//Определение инспектируемых элементов и их статусов для этого заказа. 
//0 - Не сканировался; 1 - ОК; 2 - Отремонтирован; 3 - Открыт дефект;            
Функция ОпределитьИнспектируемыеЭлементы(ПоказыватьВсеИнспектируемыеЭлементы,ТочкаПроверкиКачества, Заказ) Экспорт
	
	Если ПоказыватьВсеИнспектируемыеЭлементы = Ложь Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка КАК ТочкаПроверкиКачества,
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.НомерСтроки КАК НомерСтроки,
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
		|	&Заказ КАК Заказ,
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ПроверкаОбязательна КАК ПроверкаОбязательна
		|ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
		|ИЗ
		|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
		|ГДЕ
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсерныОстатки.Заказ КАК Заказ,
		|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	КонсерныОстатки.Консерн.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
		|	3 КАК Статус,
		|	КонсерныОстатки.Консерн КАК Консерн
		|ПОМЕСТИТЬ СостояниеИнспектируемыхЭлементовЗаказа
		|ИЗ
		|	РегистрНакопления.Консерны.Остатки(, Заказ = &Заказ) КАК КонсерныОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества,
		|	ВЫБОР
		|		КОГДА НЕ УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Ремонт
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних(, Заказ = &Заказ) КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
		|ГДЕ
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Выполнена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус ЕСТЬ НЕ NULL 
		|				ТОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Статус,
		|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна КАК ПроверкаОбязательна,
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA, ИСТИНА) КАК ЗадаватьПозициюA,
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB, ИСТИНА) КАК ЗадаватьПозициюB,
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC, ИСТИНА) КАК ЗадаватьПозициюC
		|ИЗ
		|	ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеИнспектируемыхЭлементовЗаказа КАК СостояниеИнспектируемыхЭлементовЗаказа
		|		ПО ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества = СостояниеИнспектируемыхЭлементовЗаказа.ТочкаПроверкиКачества
		|			И ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент = СостояниеИнспектируемыхЭлементовЗаказа.ИнспектируемыйЭлемент
		|			И ТаблицаИнспектируемыхЭлементов.Заказ = СостояниеИнспектируемыхЭлементовЗаказа.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент,
		|	ТаблицаИнспектируемыхЭлементов.НомерСтроки,
		|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна,
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA, ИСТИНА),
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB, ИСТИНА),
		|	ЕСТЬNULL(ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC, ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна УБЫВ,
		|	ТаблицаИнспектируемыхЭлементов.НомерСтроки";
	
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Заказ КАК Заказ,
		|	ИнспектируемыеЭлементы.Ссылка КАК ИнспектируемыйЭлемент
		|ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
		|ИЗ
		|	Справочник.ИнспектируемыеЭлементы КАК ИнспектируемыеЭлементы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонсерныОстатки.Заказ КАК Заказ,
		|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	КонсерныОстатки.Консерн.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
		|	3 КАК Статус,
		|	КонсерныОстатки.Консерн КАК Консерн
		|ПОМЕСТИТЬ СостояниеИнспектируемыхЭлементовЗаказа
		|ИЗ
		|	РегистрНакопления.Консерны.Остатки КАК КонсерныОстатки
		|ГДЕ
		|	КонсерныОстатки.Заказ = &Заказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества,
		|	ВЫБОР
		|		КОГДА НЕ УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Ремонт
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
		|ГДЕ
		|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ = &Заказ
		|	И УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Выполнена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус ЕСТЬ НЕ NULL 
		|				ТОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Статус,
		|	ЛОЖЬ КАК ПроверкаОбязательна,
		|	ЛОЖЬ КАК ЗадаватьПозициюA,
		|	ЛОЖЬ КАК ЗадаватьПозициюB,
		|	ЛОЖЬ КАК ЗадаватьПозициюC
		|ИЗ
		|	ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеИнспектируемыхЭлементовЗаказа КАК СостояниеИнспектируемыхЭлементовЗаказа
		|		ПО ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент = СостояниеИнспектируемыхЭлементовЗаказа.ИнспектируемыйЭлемент
		|			И ТаблицаИнспектируемыхЭлементов.Заказ = СостояниеИнспектируемыхЭлементовЗаказа.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнспектируемыйЭлемент";
		
		Запрос.УстановитьПараметр("Заказ", Заказ);
		РезультатЗапроса = Запрос.Выполнить();	
		ТаблицаИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();
	
	КонецЕсли;

	Возврат ТаблицаИнспектируемыхЭлементов;
	
КонецФункции

Функция ОпределитьПозицииСДляИнспектируемыхЭлементов(ТаблицаИнспектируемыхЭлементов, ТочкаПроверкиКачества)
	Т = ТаблицаИнспектируемыхЭлементов.Скопировать(,"ИнспектируемыйЭлемент");
	Т.Свернуть("ИнспектируемыйЭлемент");
	МассивИнспектируемыйЭлемент = Т.ВыгрузитьКолонку("ИнспектируемыйЭлемент");
	
	Запрос =  Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ТочкиПроверкиКачестваГруппыВариантовПозицииС.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	              |	ВариантыПозицииC.Ссылка КАК ВариантПозицииC,
	              |	ВариантыПозицииC.Наименование КАК Наименование
	              |ИЗ
	              |	Справочник.ТочкиПроверкиКачества.ГруппыВариантовПозицииС КАК ТочкиПроверкиКачестваГруппыВариантовПозицииС
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыПозицииC КАК ВариантыПозицииC
	              |		ПО (ВариантыПозицииC.Владелец = ТочкиПроверкиКачестваГруппыВариантовПозицииС.ГруппаВариантовПозицииС)
	              |ГДЕ
	              |	ТочкиПроверкиКачестваГруппыВариантовПозицииС.Ссылка = &ТочкаПроверкиКачества
	              |	И ТочкиПроверкиКачестваГруппыВариантовПозицииС.ИнспектируемыйЭлемент В(&ИнспектируемыйЭлемент)"; 
	Запрос.УстановитьПараметр("ИнспектируемыйЭлемент",МассивИнспектируемыйЭлемент);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества",ТочкаПроверкиКачества); 
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПозицииСДляИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();
    	ТаблицаПозицииСДляИнспектируемыхЭлементов.Индексы.Добавить("ИнспектируемыйЭлемент");
	
	Возврат ТаблицаПозицииСДляИнспектируемыхЭлементов; 	
КонецФункции

Функция ПространствоURI() Экспорт
	
	Возврат "http://QLS/icommon/workstations/1.0";
	
КонецФункции

Функция ПараметрыРазбораТелаHTTPЗапросаРегистрацииЗаказаНаТочке(Запрос) 
	
	ПространствоИмен = Запрос.ДополнительныеСвойства.ПространствоИмен;
	ТипОбъектаОбмена = ФабрикаXDTO.Тип(ПространствоИмен, "QualityStatusRequest");
	
	РазбиратьТипы = Новый Массив;
	РазбиратьТипы.Добавить("json");
	
	Возврат Новый Структура(
		"РазбиратьТипы, ЭтоXDTO, ТипXDTO", 
		РазбиратьТипы,
		Истина, 
		ТипОбъектаОбмена);
		
КонецФункции   
	
Функция ПараметрыРазбораТелаHTTPЗапросаЗакрытиеДефекта(Запрос) 
	
	ПространствоИмен = Запрос.ДополнительныеСвойства.ПространствоИмен;
	ТипОбъектаОбмена = ФабрикаXDTO.Тип(ПространствоИмен, "CloseDefectRequest");
	
	РазбиратьТипы = Новый Массив;
	РазбиратьТипы.Добавить("json");
	
	Возврат Новый Структура(
		"РазбиратьТипы, ЭтоXDTO, ТипXDTO", 
		РазбиратьТипы,
		Истина, 
		ТипОбъектаОбмена);
		
КонецФункции      
  
Функция ПараметрыРазбораТелаHTTPЗапросаОперацияПоКонтролю(Запрос) 
	
	ПространствоИмен = Запрос.ДополнительныеСвойства.ПространствоИмен;
	ТипОбъектаОбмена = ФабрикаXDTO.Тип(ПространствоИмен, "CompleteCheckRequest");
	
	РазбиратьТипы = Новый Массив;
	РазбиратьТипы.Добавить("json");
	
	Возврат Новый Структура(
		"РазбиратьТипы, ЭтоXDTO, ТипXDTO", 
		РазбиратьТипы,
		Истина, 
		ТипОбъектаОбмена);
		
КонецФункции
	
  
Функция ПараметрыРазбораТелаHTTPЗапросаВыполнитьЗадачу(Запрос) 
	
	ПространствоИмен = Запрос.ДополнительныеСвойства.ПространствоИмен;
	ТипОбъектаОбмена = ФабрикаXDTO.Тип(ПространствоИмен, "CompleteTaskRequest");
	
	РазбиратьТипы = Новый Массив;
	РазбиратьТипы.Добавить("json");
	
	Возврат Новый Структура(
		"РазбиратьТипы, ЭтоXDTO, ТипXDTO", 
		РазбиратьТипы,
		Истина, 
		ТипОбъектаОбмена);
		
КонецФункции  

Процедура СобратьПараметрыСообщенияПоHTTP(Запрос, Ответ) 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Запрос.ДополнительныеСвойства.Вставить("ПространствоИмен",			 ПространствоURI());
		Запрос.ДополнительныеСвойства.Вставить("ВерсияИнтерфейса",			 Запрос.ПараметрПути("ver"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаРесурс", Запрос.ПараметрПути("barcode"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторРабочегоМеста", Запрос.ПараметрПути("workstationId"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторЭлемента", 	 Запрос.ПараметрПути("inspectionItemId"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторИзображения", 	 Запрос.ПараметрПути("imageId"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторКампании", 	 Запрос.ПараметрПути("campaignId"));
		Запрос.ДополнительныеСвойства.Вставить("ИдентификаторДефекта",	 	 Запрос.ПараметрПути("defectId"));
		
		// Для нужд http-сервисов, используемых оборудованием, в запросе передается "Тип идентификатора заказа".
		ТипИдентификатораЗаказа = Запрос.ПараметрПути("typeOrderId");
		Если НЕ ЗначениеЗаполнено(ТипИдентификатораЗаказа) Тогда
			ТипИдентификатораЗаказа = Запрос.ПараметрЗапроса("typeOrderId");
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТипИдентификатораЗаказа) Тогда
			Запрос.ДополнительныеСвойства.Вставить("ТипИдентификатораЗаказа", ТипИдентификатораЗаказа);
		КонецЕсли;
		
		// Идентификатор заказа.
		ИдентификаторЗаказа = Запрос.ПараметрПути("orderId");
		Если Не ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
			ИдентификаторЗаказа = Запрос.ПараметрЗапроса("orderId");
		КонецЕсли; 
		Если ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
			Запрос.ДополнительныеСвойства.Вставить("ИдентификаторОбъектаРесурс", ИдентификаторЗаказа);
		КонецЕсли;
		
		// Идентификатор рабочего места.
		workstationId = Запрос.ПараметрЗапроса("workstationId");
		Если workstationId <> Неопределено Тогда
			Запрос.ДополнительныеСвойства.Вставить("ИдентификаторРабочегоМеста", workstationId);	
		КонецЕсли;  
		
		Запрос.ДополнительныеСвойства.Вставить("ТипИнтерфейса", ПолучитьИнтерфейсОператора(Запрос.ПараметрЗапроса("type")));	
			
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Ошибка  формирования параметров.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
	КонецПопытки; 
	
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеТаблицыИзВыборки(Список, Выборка, ИмяЭлемента, ПространствоИмен)
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяЭлемента));
		НоваяСтрока.Id = Выборка.Ссылка.УникальныйИдентификатор();
		НоваяСтрока.presentation = Выборка.Наименование;
		Список.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Обработчики

Процедура ПолучитьСписокДоступныхРабочихМестПоПользователю(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Пользователь = Пользователи.АвторизованныйПользователь();
		
		ТаблицаДоступныхРабочихМестОператора = ТаблицаДоступныхРабочихМестОператора(Пользователь, Запрос.ДополнительныеСвойства.ТипИнтерфейса);
		
		СписокДоступныхРМ = СписокДоступныхРабочихМестВМассиве(ТаблицаДоступныхРабочихМестОператора);
		
		Ответ.Данные = СписокДоступныхРМ;	
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Ошибка получения списка рабочих мест.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
	КонецПопытки; 
	
	
КонецПроцедуры

Функция РабочееМестоНазначеноТекущемуПользователю(РабочееМесто)
	
	Пользователь = Пользователи.АвторизованныйПользователь();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора КАК РабочееМестоОператора
	|ИЗ
	|	РегистрСведений.НазначенияРабочихМестОператорам.СрезПоследних(, Пользователь = &ТекущийПользователь) КАК НазначенияРабочихМестОператорамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
	|		ПО НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора = РабочиеМестаОператоров.Ссылка
	|			И (РабочиеМестаОператоров.Ссылка = &РабочееМесто)
	|ГДЕ
	|	НЕ РабочиеМестаОператоров.ПометкаУдаления
	|	И НЕ НазначенияРабочихМестОператорамСрезПоследних.Отключено");
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("РабочееМесто",		 РабочееМесто);
	
	РабочееМестоНазначено = Не Запрос.Выполнить().Пустой();
	
	Возврат РабочееМестоНазначено;
	
КонецФункции
 
Процедура ИнформацияРабочегоМеста(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли; 
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	Попытка
		
		ДанныеРабочегоМеста = ДанныеРабочегоМеста(РабочееМесто);
		
		Если ДанныеРабочегоМеста = Неопределено Тогда
			ТекстОтвета = "Не удалось получить данные рабочего места: " + Строка(РабочееМесто);
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
			Возврат;	
		КонецЕсли;
		
		ПространствоИмен = Неопределено;
		Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
		Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
			ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
			Возврат;
		КонецЕсли; 
		
		ПараметрыРабочегоМеста = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WorkstationDetailedObject"));
		
		WorkstationKeyProperties = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "WorkstationKeyProperties"));
		WorkstationKeyProperties.id = ДанныеРабочегоМеста.Ссылка.УникальныйИдентификатор(); 
		WorkstationKeyProperties.presentation = ДанныеРабочегоМеста.Наименование;
		
		ПараметрыРабочегоМеста.keyProperties = WorkstationKeyProperties;
		
		ПараметрыРабочегоМеста.isRareOptionsTabEnabled = Ложь; // нет таблиц             
		
		ИспользоватьКонтрольРемонта  = Константы.ИспользоватьКонтрольРемонта.Получить();
		ПараметрыРабочегоМеста.isControlTabEnabled = (ИспользоватьКонтрольРемонта И ДанныеРабочегоМеста.АктивироватьВкладкуКонтроль); 
		
		ПараметрыРабочегоМеста.isShortagesTabEnabled = ДанныеРабочегоМеста.КонтролироватьКомплектность;
		ПараметрыРабочегоМеста.isCampaignsTabEnabled = ДанныеРабочегоМеста.АктивироватьВкладкуКампании;
		
		ПараметрыРабочегоМеста.workstationType = ПолучитьПредставлениеДляТипаРабочегоМеста(ДанныеРабочегоМеста.ТипИнтерфейса);
		
		Заказ = РегистрыСведений.ТекущийЗаказНаСтанции.ПолучитьТекущийЗаказ(РабочееМесто, Ложь);
		currentOrder =  ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrderObject"));
		currentOrder.id = Заказ.УникальныйИдентификатор();
		currentOrder.vin = Заказ.Наименование;   
		Если ЗначениеЗаполнено(Заказ) Тогда       
			//временно отключили проверку
			//СтатусЗаказа = ОпределитьСостояниеИнспектирования(Заказ, РабочееМесто.ТочкаПроверкиКачества);
			//currentOrder.isInspectionCompleted = СтатусЗаказа = Истина;	
			currentOrder.isInspectionCompleted = Ложь;	
		КонецЕсли;
		ПараметрыРабочегоМеста.currentOrder = currentOrder;
		
		InspectionForm = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectionFormSettings"));
		
		InspectionForm.isClosingDefectOnLineOptionEnabled 		= ДанныеРабочегоМеста.ЗакрыватьДефектыОнЛайн;
		InspectionForm.isConcernCostFieldEnabled 				= ДанныеРабочегоМеста.ИспользоватьСтоимостьКонсерна;
		InspectionForm.useAllDefects  							= ДанныеРабочегоМеста.ПоказыватьВсеДефекты;
		InspectionForm.useAllInspectionItems					= ДанныеРабочегоМеста.ПоказыватьВсеИнспектируемыеЭлементы;
		InspectionForm.useGroupsOfInspectionItems				= ДанныеРабочегоМеста.ОтображатьИнспектируемыеЭлементыПоГруппам;
		InspectionForm.isResponsibleFieldEnabled 				= ДанныеРабочегоМеста.ИспользоватьОтветственногоЗаКонсерн;
		
		InspectionForm.isConcernDiscoveryTypeFieldEnabled		= ДанныеРабочегоМеста.ИспользоватьСпособОбнаруженияДефектов; 
		Если ДанныеРабочегоМеста.ИспользоватьСпособОбнаруженияДефектов Тогда   
			ТипConcernDiscoveryType  =  ФабрикаXDTO.Тип(ПространствоИмен, "ConcernDiscoveryType");
			static = ФабрикаXDTO.Создать(ТипConcernDiscoveryType); 
			static.id = Метаданные.Перечисления.СпособОбнаруженияДефектов.ЗначенияПеречисления.static.Имя; 
			static.presentation = Строка(Перечисления.СпособОбнаруженияДефектов.static);
            dynamic = ФабрикаXDTO.Создать(ТипConcernDiscoveryType); 
			dynamic.id = Метаданные.Перечисления.СпособОбнаруженияДефектов.ЗначенияПеречисления.dynamic.Имя; 
			dynamic.presentation = Строка(Перечисления.СпособОбнаруженияДефектов.dynamic);
			InspectionForm.concernDiscoveryTypes.Добавить(static);
			InspectionForm.concernDiscoveryTypes.Добавить(dynamic);
		КонецЕсли;  
		
		InspectionForm.isRepairTimeFieldEnabled					= ДанныеРабочегоМеста.УчитыватьВремяРемонта;
		InspectionForm.isMultipleDefectsAllowed 				= Не Константы.ЗапретитьПовторныеДефекты.Получить();
		
		ЗаполнитьЗначениеТаблицыИзВыборки(InspectionForm.positionAOptions, Справочники.ВариантыПозицииA.Выбрать(), "PositionA", ПространствоИмен);
		ЗаполнитьЗначениеТаблицыИзВыборки(InspectionForm.positionBOptions, Справочники.ВариантыПозицииB.Выбрать(), "PositionB", ПространствоИмен); 
		Если ДанныеРабочегоМеста.ПоказыватьВсеИнспектируемыеЭлементы Тогда
			ЗаполнитьЗначениеТаблицыИзВыборки(InspectionForm.positionCOptions, Справочники.ВариантыПозицииC.Выбрать(), "PositionC", ПространствоИмен);
		КонецЕсли;
			
		Если ДанныеРабочегоМеста.ИспользоватьСтоимостьКонсерна Тогда
			ЗаполнитьТаблицаСтоимостиКонсернов(ПараметрыРабочегоМеста, InspectionForm.concernCostOptions,ПространствоИмен);
		КонецЕсли; 
		
		Если ДанныеРабочегоМеста.ИспользоватьОтветственногоЗаКонсерн Тогда
			ЗаполнитьТаблицаОтветственныхЗаКонсерн(ПараметрыРабочегоМеста, InspectionForm.responsibleOptions,ПространствоИмен);
		КонецЕсли; 
		
		InspectionForm.isClosingCampaignsFromListOptionEnabled	= ДанныеРабочегоМеста.ЗакрыватьКампанииИзСписка;
		
		Если ДанныеРабочегоМеста.ЗакрыватьКампанииИзСписка Тогда
			ЗаполнитьКампанииДоступныеДляЗакрытия(РабочееМесто, InspectionForm.campaignsAvailableForClosing, ПространствоИмен);
		КонецЕсли;
		
		ПараметрыРабочегоМеста.inspectionFormSettings = InspectionForm;
		
		Ответ.Данные = ПараметрыРабочегоМеста;
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Ошибка получения информации о Рабочем месте.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки; 
	
КонецПроцедуры

// Переводит строку Base64 в обычное значение
// перед вызовом данной процедуры должна быть вызвана СобратьПараметрыСообщенияПоHTTP() этого же модуля
// для объявления переменных
//
Процедура РасшифроватьИдентификаторОбъектаИзСтрокиBase64(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ЗначениеСканирования = Запрос.ДополнительныеСвойства.ИдентификаторОбъектаРесурс;
		ЗначениеСканирования = СтрЗаменить(ЗначениеСканирования, "_", "/");
		ЗначениеСканирования = СтрЗаменить(ЗначениеСканирования, "-", "+");
		
		КоличествоСимволов = СтрДлина(ЗначениеСканирования);
		КоличествоОставшихсяСимволов = КоличествоСимволов % 4;
		Если КоличествоОставшихсяСимволов = 3 Тогда
			ЗначениеСканирования = ЗначениеСканирования + "=";
		ИначеЕсли КоличествоОставшихсяСимволов = 2 Тогда
			ЗначениеСканирования = ЗначениеСканирования + "==";
		КонецЕсли;
		
		ОтсканированноеЗначение = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(ЗначениеСканирования), КодировкаТекста.ANSI);
		Запрос.ДополнительныеСвойства.ИдентификаторОбъектаРесурс = ОтсканированноеЗначение;	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Ошибка расшифровки параметра запроса ""barcode"".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПолучитьЗаказПоЗначению(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено; 
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	ОтсканированноеЗначение = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаРесурс", ОтсканированноеЗначение);
	
	Если Не ЗначениеЗаполнено(ОтсканированноеЗначение) Тогда
		ТекстОтвета = "Не передано отсканированное значение.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Заказ = ЗаказПоЗначению(ОтсканированноеЗначение);
		
	Если Заказ.Пустая() Тогда
		ТекстОтвета = "Не удалось найти заказ по отсканированному значению: " + Строка(ОтсканированноеЗначение);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 500);
		Возврат;	
	КонецЕсли;
	
	Запрос.ДополнительныеСвойства.Вставить("Заказ", Заказ);
	
КонецПроцедуры

Функция ЗаказПоЗначению(Значение)
	
	Заказ = Справочники.Заказы.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Заказ;
	КонецЕсли;
	
	Попытка
		Заказ = ОпеределитьЗаказ(Значение);	
	Исключение	
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Не удалось определить заказ введенному значению.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));		
	КонецПопытки;
	
	Возврат Заказ;
	
КонецФункции
 
Процедура ИнформацияЗаказаПоСсылке(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	ОтсканированноеЗначение = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаРесурс", ОтсканированноеЗначение);
	 
	Если Не ЗначениеЗаполнено(ОтсканированноеЗначение) Тогда
		ТекстОтвета = "Не передано отсканированное значение.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Заказ = ЗаказПоЗначению(ОтсканированноеЗначение);
		
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	Попытка                       
		
		//ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ТочкаПроверкиКачества");  
		
		ДанныеРабочегоМеста = ДанныеРабочегоМеста(РабочееМесто);
		
		ДанныеЗаказ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrderObject"));
		ДанныеЗаказ.isError = Ложь;
		
		ТекущийЗаказ = РегистрыСведений.ТекущийЗаказНаСтанции.ПолучитьТекущийЗаказ(РабочееМесто, Ложь);

		Если ЗначениеЗаполнено(ТекущийЗаказ) И ТекущийЗаказ <> Заказ Тогда
			ДанныеЗаказ.isError = Истина;
			ДанныеЗаказ.errorMessage = "Не завершен: " + Строка(ТекущийЗаказ);
		ИначеЕсли Заказ.Пустая() Тогда
			ДанныеЗаказ.isError = Истина;
			ДанныеЗаказ.errorMessage = "Не удалось найти заказ по отсканированному значению: " + Строка(ОтсканированноеЗначение);    
		КонецЕсли;              
		
		Если Не ДанныеЗаказ.isError И ЗначениеЗаполнено(ДанныеРабочегоМеста.ПулДанныхДляКонтроля) Тогда 
			СообщениеОКонтроле = "";
			Если Не Справочники.ПулыДанныхДляКонтроля.ВыполняетсяКонтроль(Заказ,ДанныеРабочегоМеста.ПулДанныхДляКонтроля,СообщениеОКонтроле) Тогда	
				ДанныеЗаказ.isError = Истина;
				ДанныеЗаказ.errorMessage  = "У заказа "+ Заказ +" "+ СообщениеОКонтроле;
			КонецЕсли;
		КонецЕсли;
							
		Если Не ДанныеЗаказ.isError Тогда
			VINЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "VIN");
			
			ДанныеЗаказ.id = Заказ.УникальныйИдентификатор();
			ДанныеЗаказ.vin = VINЗаказа;
			
			//временно отключили проверку
			//СтатусЗаказа = ОпределитьСостояниеИнспектирования(Заказ, ТочкаПроверкиКачества);
			//ДанныеЗаказ.isInspectionCompleted = (СтатусЗаказа = Истина);	
			ДанныеЗаказ.isInspectionCompleted = Ложь;	
		КонецЕсли;	
		
		Ответ.Данные = ДанныеЗаказ;
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Не удалось получить информацию по заказу.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПолучитьСписокИнспектируемыхЭлементов(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	Попытка                
		
		ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ТочкаПроверкиКачества");

		ПоказыватьВсеИнспектируемыеЭлементы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаПроверкиКачества, "ПоказыватьВсеИнспектируемыеЭлементы");
		
		ТаблицаИнспектируемыхЭлементов = ОпределитьИнспектируемыеЭлементы(
			ПоказыватьВсеИнспектируемыеЭлементы,
			ТочкаПроверкиКачества,
			Заказ);	    
			
		ТаблицаПозицииСДляИнспектируемыхЭлементов = Неопределено;
		Если ПоказыватьВсеИнспектируемыеЭлементы = Ложь Тогда
			ТаблицаПозицииСДляИнспектируемыхЭлементов = ОпределитьПозицииСДляИнспектируемыхЭлементов(
				ТаблицаИнспектируемыхЭлементов,
				ТочкаПроверкиКачества
			) ;
		КонецЕсли;
		
		// Проверка таблицы инспектируемых элементов на применимость по формулам.
		// Удаление строк, не прошедших проверку.
		ФильтроватьИнспектируемыеЭлементыПоФормуламПрименимости(ТаблицаИнспектируемыхЭлементов, Заказ);
		
		Если ТаблицаИнспектируемыхЭлементов.Количество() = 0 Тогда
			ТекстОтвета = "Отсутсвуют доступные инспектируемые объекты.";
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 500);
			Возврат;	
		КонецЕсли;
		
		Ответ.Данные = ПреобразоватьТаблицуДляОтвета(
			ПоказыватьВсеИнспектируемыеЭлементы,
			ТаблицаИнспектируемыхЭлементов, 
			ТаблицаПозицииСДляИнспектируемыхЭлементов,
			ПространствоИмен);
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Не удалось получить список инспектируемых элементов.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
			
КонецПроцедуры

Процедура ЗарегистрироватьСтатусЗаказа(Запрос, Ответ)
	
	Обработки.WEB_WORKSTATION_2_0.ЗарегистрироватьСтатусЗаказа(Запрос, Ответ);
	
КонецПроцедуры       

Процедура ЗарегистрироватьРемонтЗаказа(Запрос, Ответ)
	
	Обработки.WEB_WORKSTATION_2_0.ЗарегистрироватьРемонт(Запрос, Ответ);
	
КонецПроцедуры         

Процедура ЗарегистрироватьОперациюПоКонтролю(Запрос, Ответ)
	
	Обработки.WEB_WORKSTATION_2_0.ЗарегистрироватьКонтроль(Запрос, Ответ);
	
КонецПроцедуры    

Процедура ЗарегистрироватьВыполнениеЗадачи(Запрос, Ответ)
	
	Обработки.WEB_WORKSTATION_2_0.ЗарегистрироватьВыполнениеЗадачи(Запрос, Ответ);
	
КонецПроцедуры    

Процедура ЗавершитьИнспекциюЗаказа(Запрос, Ответ)
		
	Обработки.WEB_WORKSTATION_2_0.ЗавершитьИнспекциюЗаказа(Запрос, Ответ);
	
КонецПроцедуры   
   
Процедура ЗавершитьИнспекциюЗаказаРемонтника(Запрос, Ответ)
		
	Обработки.WEB_WORKSTATION_2_0.ЗавершитьИнспекциюРемонтника(Запрос, Ответ);
	
КонецПроцедуры   

Процедура ПолучитьСписокДефектовРабочегоМеста(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Попытка
		Ответ.Данные = СписокДефектов(РабочееМесто, ПространствоИмен);
	Исключение
	    ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Не удалось получить информацию по инспектируемому элементу.", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		Возврат;
	КонецПопытки;	
	
КонецПроцедуры      

Процедура ПолучитьСписокКонсернов(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
				
	КонсерныЗаказа = КонсерныЗаказа(Заказ);
	
	Если Запрос.ЕстьПараметрЗапроса("sortByStatus") Тогда
		КонсерныЗаказа.Сортировать("Статус Убыв, ИнспектируемыйЭлемент");
	КонецЕсли;
	
	ConcernsList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ConcernsList"));
	КонсернТип = ФабрикаXDTO.Тип(ПространствоИмен, "Concern");
	ИнспектируемыйЭлементТип = ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties");
	ГруппаИнспектируемогоЭлементаТип = ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties").Свойства.Получить("group").Тип;
	
	Для Каждого СтрокаКонсерн Из КонсерныЗаказа Цикл
		
		СтрокаДефект = ФабрикаXDTO.Создать(КонсернТип);
		СтрокаДефект.id 		= СтрокаКонсерн.Консерн.УникальныйИдентификатор();
		СтрокаДефект.defect 	= Строка(СтрокаКонсерн.Дефект);
		СтрокаДефект.status 	= СтатусСтрокой(СтрокаКонсерн.Статус);

		СтрокаДефект.responsible	= Строка(СтрокаКонсерн.ОтветственныйЗаДефект);
		СтрокаДефект.cost 			= Строка(СтрокаКонсерн.СтоимостьКонсерна); 
	
		ИнспектируемыйЭлемент = ФабрикаXDTO.Создать(ИнспектируемыйЭлементТип);
		ИнспектируемыйЭлемент.id 			= СтрокаКонсерн.ИнспектируемыйЭлемент.УникальныйИдентификатор();
		ИнспектируемыйЭлемент.presentation	= СокрЛП(Строка(СтрокаКонсерн.ИнспектируемыйЭлемент));
		
		ИнспектируемыйЭлемент.group = ФабрикаXDTO.Создать(ГруппаИнспектируемогоЭлементаТип);
		ИнспектируемыйЭлемент.group.id = СтрокаКонсерн.ГруппаИнспектируемогоЭлемента;
		ИнспектируемыйЭлемент.group.presentation = Строка(СтрокаКонсерн.ГруппаИнспектируемогоЭлемента);
		
		СтрокаДефект.inspectionItem = ИнспектируемыйЭлемент;
		
		СтрокаДефект.imageId = СтрокаКонсерн.ИзображениеИнспектируемогоЭлемента;
		СтрокаДефект.points = СтрокаКонсерн.ОбластьНаИзображении;
		
		ConcernsList.ConcernsListElement.Добавить(СтрокаДефект);
		
	КонецЦикла;	
	
	Ответ.Данные = ConcernsList;
		
КонецПроцедуры

Процедура ПолучитьСписокКонтролируемыхКонсернов(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
				
	rConcerns = ФабрикаXDTO.Тип(ПространствоИмен, "rConcerns");
	rConcern = ФабрикаXDTO.Тип(ПространствоИмен, "rConcern");
	InspectionItemKeyProperties = ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties");   
	
	PositionA = ФабрикаXDTO.Тип(ПространствоИмен, "PositionA"); 
	PositionB = ФабрикаXDTO.Тип(ПространствоИмен, "PositionB"); 
	PositionC = ФабрикаXDTO.Тип(ПространствоИмен, "PositionC");   

	//Дефекты
	ДефектыЗаказа = Обработки.WEB_WORKSTATION_2_0.КонтролируемыеКонсерныЗаказа(Заказ, РабочееМесто.ТочкаПроверкиКачества);
	
	СписокДефектов = ФабрикаXDTO.Создать(rConcerns);

	Для Каждого Дефект  Из ДефектыЗаказа Цикл
		
		СтрокаДефект = ФабрикаXDTO.Создать(rConcern);
		СтрокаДефект.id = Дефект.Консерн.УникальныйИдентификатор();
		СтрокаДефект.defect = Строка(Дефект.Дефект);
	
		ИнспектируемыйЭлемент = ФабрикаXDTO.Создать(InspectionItemKeyProperties);
		ИнспектируемыйЭлемент.id = Дефект.ИнспектируемыйЭлемент.УникальныйИдентификатор();
		ИнспектируемыйЭлемент.presentation = СокрЛП(Дефект.ИнспектируемыйЭлемент);
		СтрокаДефект.inspectionItem = ИнспектируемыйЭлемент;  

		СтрокаДефект.comment = Дефект.Комментарий;              
		
		ПозицияА = ФабрикаXDTO.Создать(PositionA);
		ПозицияА.id =  Дефект.ПозицияА.УникальныйИдентификатор();
		ПозицияА.presentation =  СокрЛП(Дефект.ПозицияА);     
		
		ПозицияB = ФабрикаXDTO.Создать(PositionB);
		ПозицияB.id =  Дефект.ПозицияB.УникальныйИдентификатор();
		ПозицияB.presentation =  СокрЛП(Дефект.ПозицияB);  
		
		ПозицияC = ФабрикаXDTO.Создать(PositionC);
		ПозицияC.id =  Дефект.ПозицияC.УникальныйИдентификатор();
		ПозицияC.presentation =  СокрЛП(Дефект.ПозицияC);  
		
		СтрокаДефект.positionA = ПозицияА; 
		СтрокаДефект.positionB = ПозицияB;
		СтрокаДефект.positionC = ПозицияC;
		
		СтрокаДефект.imageId = Дефект.ИзображениеИнспектируемогоЭлемента;
		СтрокаДефект.points = Дефект.ОбластьНаИзображении;
		
		СписокДефектов.rConcernsElement.Добавить(СтрокаДефект);
		
	КонецЦикла;	 	//КонецЦикла;	
	
	Ответ.Данные = СписокДефектов;
		
КонецПроцедуры


Процедура ПолучитьСписокКампаний(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	КампанииЗаказа = КампанииЗаказа(Заказ, РабочееМесто);
	
	CampaignsList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "CampaignsList"));
	CampaignТип = ФабрикаXDTO.Тип(ПространствоИмен, "Campaign");
	
	Для Каждого СтрокаКампания Из КампанииЗаказа Цикл
		
		Campaign = ФабрикаXDTO.Создать(CampaignТип);
		Campaign.id = СтрокаКампания.Кампания.УникальныйИдентификатор();
		Campaign.presentation = Строка(СтрокаКампания.Кампания);
		Campaign.status = "Открыта";
		Campaign.closable = СтрокаКампания.ДоступнаДляЗакрытия;
		
		CampaignsList.CampaignsListElement.Добавить(Campaign);
		
	КонецЦикла;	
	
	Ответ.Данные = CampaignsList;
		
КонецПроцедуры

Процедура ПолучитьДанныеРемонтника(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ПространствоИмен", ПространствоИмен);
	Если Не ЗначениеЗаполнено(ПространствоИмен) Тогда
		ТекстОтвета = "Не указано пространство имен для внутреннего представления объектов.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);  
	
	rData = ФабрикаXDTO.Тип(ПространствоИмен, "rData"); 
	rConcerns = ФабрикаXDTO.Тип(ПространствоИмен, "rConcerns");
	rConcern = ФабрикаXDTO.Тип(ПространствоИмен, "rConcern");
	InspectionItemKeyProperties = ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties");   
	
	PositionA = ФабрикаXDTO.Тип(ПространствоИмен, "PositionA"); 
	PositionB = ФабрикаXDTO.Тип(ПространствоИмен, "PositionB"); 
	PositionC = ФабрикаXDTO.Тип(ПространствоИмен, "PositionC");   
	
	rTasks = ФабрикаXDTO.Тип(ПространствоИмен, "rTasks");
	rTask = ФабрикаXDTO.Тип(ПространствоИмен, "rTask");
	ActionItemKeyProperties = ФабрикаXDTO.Тип(ПространствоИмен, "ActionItemKeyProperties");  
	
	Данные =  ФабрикаXDTO.Создать(rData);
	
	//Дефекты
	ДефектыЗаказа = ПолучитьДефекты(Заказ,РабочееМесто);
	
	СписокДефектов = ФабрикаXDTO.Создать(rConcerns);

	Для Каждого Дефект  Из ДефектыЗаказа Цикл
		
		СтрокаДефект = ФабрикаXDTO.Создать(rConcern);
		СтрокаДефект.id = Дефект.Консерн.УникальныйИдентификатор();
		СтрокаДефект.defect = Строка(Дефект.Дефект);
	
		ИнспектируемыйЭлемент = ФабрикаXDTO.Создать(InspectionItemKeyProperties);
		ИнспектируемыйЭлемент.id = Дефект.ИнспектируемыйЭлемент.УникальныйИдентификатор();
		ИнспектируемыйЭлемент.presentation = СокрЛП(Дефект.ИнспектируемыйЭлемент);
		СтрокаДефект.inspectionItem = ИнспектируемыйЭлемент;  

		СтрокаДефект.comment = Дефект.Комментарий;              
		
		ПозицияА = ФабрикаXDTO.Создать(PositionA);
		ПозицияА.id =  Дефект.ПозицияА.УникальныйИдентификатор();
		ПозицияА.presentation =  СокрЛП(Дефект.ПозицияА);     
		
		ПозицияB = ФабрикаXDTO.Создать(PositionB);
		ПозицияB.id =  Дефект.ПозицияB.УникальныйИдентификатор();
		ПозицияB.presentation =  СокрЛП(Дефект.ПозицияB);  
		
		ПозицияC = ФабрикаXDTO.Создать(PositionC);
		ПозицияC.id =  Дефект.ПозицияC.УникальныйИдентификатор();
		ПозицияC.presentation =  СокрЛП(Дефект.ПозицияC);  
		
		СтрокаДефект.positionA = ПозицияА; 
		СтрокаДефект.positionB = ПозицияB;
		СтрокаДефект.positionC = ПозицияC;
		
		СтрокаДефект.imageId = Дефект.ИзображениеИнспектируемогоЭлемента;
		СтрокаДефект.points = Дефект.ОбластьНаИзображении;
		
		СписокДефектов.rConcernsElement.Добавить(СтрокаДефект);
		
	КонецЦикла;	  
	
	Если СписокДефектов.rConcernsElement.Количество() >0 Тогда
		Данные.rConsernsList = СписокДефектов; 
	КонецЕсли;    
	
	//Действия
	ДействияЗаказа = ПолучитьДействия(Заказ);
	
	СписокДействий = ФабрикаXDTO.Создать(rTasks);

	Для Каждого Действие  Из ДействияЗаказа Цикл
		
		СтрокаДействия = ФабрикаXDTO.Создать(rTask);
		СтрокаДействия.id = Действие.Задача.УникальныйИдентификатор();  
		
		ИнспектируемыйЭлемент = ФабрикаXDTO.Создать(InspectionItemKeyProperties);
		ИнспектируемыйЭлемент.id = Действие.ИнспектируемыйЭлемент.УникальныйИдентификатор();
		ИнспектируемыйЭлемент.presentation = СокрЛП(Действие.ИнспектируемыйЭлемент);
		СтрокаДействия.inspectionItem = ИнспектируемыйЭлемент;  
		
		ОписаниеДействия = ФабрикаXDTO.Создать(ActionItemKeyProperties);
		ОписаниеДействия.id = Действие.Действие.УникальныйИдентификатор();
		ОписаниеДействия.presentation = СокрЛП(Действие.Действие);
		СтрокаДействия.actionItem = ОписаниеДействия;  
		
		СтрокаДействия.description = Строка(Действие.Описание); //Строка(Null)->""
		
		СписокДействий.rTasksElement.Добавить(СтрокаДействия);
		
	КонецЦикла;	  
	
	Если СписокДействий.rTasksElement.Количество() >0 Тогда
		Данные.rTasksList = СписокДействий; 
	КонецЕсли;
	
	Ответ.Данные = Данные;
		
КонецПроцедуры

// Готовит ОбъектXDTO со списком изображений, привязанных к точке проверки качества.
// Заполняет Ответ.Данные подготовенным объектом ОбъектXDTO;
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ЗаполнитьСписокИзображенийТочкиПроверкиКачества(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	
	ПространствоИмен = Запрос.ДополнительныеСвойства.ПространствоИмен;
	
	InspectedImageList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectedImageList"));
	
	
	ЗапросКБазеДанных = Новый Запрос;
	
	// Запросом получаем инспектируемые изображения из элемента справочника ТочкиПроверкиКачества. Это корневые изображения.
	ЗапросКБазеДанных.УстановитьПараметр("Ссылка", Запрос.ДополнительныеСвойства.РабочееМесто);
	ЗапросКБазеДанных.Текст = 
		"ВЫБРАТЬ
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.ИнспектируемоеИзображение КАК ИнспектируемоеИзображение,
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.ИнспектируемоеИзображение.ФормулаПрименимости КАК ФормулаПрименимостиИзображения,
		|	ИСТИНА КАК ЭтоКорневоеИзображение
		|ИЗ
		|	Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементыПоИзображениям КАК ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям
		|		ПО РабочиеМестаОператоров.ТочкаПроверкиКачества = ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.Ссылка
		|ГДЕ
		|	РабочиеМестаОператоров.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.НомерСтроки";
	
	ТаблицаИзображений = ЗапросКБазеДанных.Выполнить().Выгрузить();
	                                       
	// Удаление из таблицы корневых изображений, для которых не выполняется формула применимости.
	Для Индекс = -ТаблицаИзображений.Количество() + 1 По 0 Цикл
		Если ЗначениеЗаполнено(ТаблицаИзображений[-Индекс].ФормулаПрименимостиИзображения)
				И НЕ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(ТаблицаИзображений[-Индекс].ФормулаПрименимостиИзображения, Запрос.ДополнительныеСвойства.Заказ) Тогда
			
			ТаблицаИзображений.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
	
	// Рекурсивной процедурой дополняем таблицу вложенными изображениями.
	Если ТаблицаИзображений.Количество() > 0 Тогда
		ДополнитьТаблицуВложеннымиИзображениями(ТаблицаИзображений, Запрос.ДополнительныеСвойства.Заказ);
	КонецЕсли;
	
	
	// Запросом выбираем данные для результата: ранее заполненная таблица + соединение с регистром.
	ЗапросКБазеДанных.УстановитьПараметр("ТаблицаПараметр", ТаблицаИзображений);
	ЗапросКБазеДанных.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметр.ИнспектируемоеИзображение КАК ИнспектируемоеИзображение,
		|	ТаблицаПараметр.ЭтоКорневоеИзображение КАК ЭтоКорневоеИзображение
		|ПОМЕСТИТЬ ТаблицаПараметр
		|ИЗ
		|	&ТаблицаПараметр КАК ТаблицаПараметр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметр.ИнспектируемоеИзображение КАК ИнспектируемоеИзображение,
		|	ТаблицаПараметр.ЭтоКорневоеИзображение КАК ЭтоКорневоеИзображение,
		|	ЕСТЬNULL(ИзображенияДляВыбораИнспектируемогоЭлемента.Изображение, ЗНАЧЕНИЕ(Справочник.ИзображенияДляВыбораИнспектируемогоЭлемента.ПустаяСсылка)) КАК Изображение
		|ПОМЕСТИТЬ ТаблицаИзображений
		|ИЗ
		|	ТаблицаПараметр КАК ТаблицаПараметр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИзображенияДляВыбораИнспектируемогоЭлемента КАК ИзображенияДляВыбораИнспектируемогоЭлемента
		|		ПО ТаблицаПараметр.ИнспектируемоеИзображение = ИзображенияДляВыбораИнспектируемогоЭлемента.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИзображений.ИнспектируемоеИзображение КАК ИнспектируемоеИзображение,
		|	ТаблицаИзображений.ЭтоКорневоеИзображение КАК ЭтоКорневоеИзображение,
		|	ТаблицаИзображений.Изображение КАК Изображение,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ИнспектируемыйЭлемент, ЗНАЧЕНИЕ(Справочник.ИнспектируемыеЭлементы.ПустаяСсылка)) КАК ИнспектируемыйЭлемент,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ИнспектируемыйЭлемент.ФормулаПрименимости, """") КАК ФормулаПрименимости,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.ЗадаватьПозициюA, ЛОЖЬ) КАК ЗадаватьПозициюA,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.ЗадаватьПозициюB, ЛОЖЬ) КАК ЗадаватьПозициюB,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.ЗадаватьПозициюC, ЛОЖЬ) КАК ЗадаватьПозициюC,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийA, ЗНАЧЕНИЕ(Справочник.ВариантыПозицииA.ПустаяСсылка)) КАК ЗначениеВариантаПозицийA,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийB, ЗНАЧЕНИЕ(Справочник.ВариантыПозицииB.ПустаяСсылка)) КАК ЗначениеВариантаПозицийB,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийC, ЗНАЧЕНИЕ(Справочник.ВариантыПозицииC.ПустаяСсылка)) КАК ЗначениеВариантаПозицийC,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ОписаниеРасположенияНаИзображении, """") КАК ОписаниеРасположенияНаИзображении,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение, ЗНАЧЕНИЕ(Справочник.ИзображенияДляВыбораИнспектируемогоЭлемента.ПустаяСсылка)) КАК ВложенноеИзображение,
		|	ЕСТЬNULL(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение.ФормулаПрименимости, """") КАК ФормулаПрименимостиВложенногоИзображения
		|ИЗ
		|	ТаблицаИзображений КАК ТаблицаИзображений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		|		ПО ТаблицаИзображений.ИнспектируемоеИзображение = ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнспектируемоеИзображение
		|ИТОГИ ПО
		|	ИнспектируемоеИзображение";
	
	РезультатЗапроса = ЗапросКБазеДанных.Выполнить();
	
	ВыборкаИнспектируемоеИзображение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИнспектируемоеИзображение.Следующий() Цикл
		InspectedImage = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectedImage"));
		
		InspectedImage.id = ВыборкаИнспектируемоеИзображение.ИнспектируемоеИзображение.УникальныйИдентификатор();
		
		Выборка = ВыборкаИнспектируемоеИзображение.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			InspectedImage.isRoot = Выборка.ЭтоКорневоеИзображение;
			
			Если НЕ ЗначениеЗаполнено(InspectedImage.image) Тогда
				InspectedImage.image = Выборка.Изображение.УникальныйИдентификатор();
			КонецЕсли;
			
			
			Polygon = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Polygon"));
			
			Если ЗначениеЗаполнено(Выборка.ОписаниеРасположенияНаИзображении) Тогда
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON();
					ЧтениеJSON.УстановитьСтроку(Выборка.ОписаниеРасположенияНаИзображении);
					Точки = ПрочитатьJSON(ЧтениеJSON);
					ЧтениеJSON.Закрыть();
					
					Для Каждого Точка Из Точки Цикл
						Polygon.points.Добавить(Точка);
					КонецЦикла;
				Исключение
					// Только для SonarQube.
					// Если значение не удалось распарсить, ошибку не пишем, не заполняем массив.
					// Рассчитываем на корректное заполнение реквизита.
					ОписаниеОшибки = "";
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ВложенноеИзображение) Тогда
				// Проверка вложенного изображения на применимость к заказу по формуле применимости.
				// Если формула не выполняется, полигон не выводим.
				Если НЕ ЗначениеЗаполнено(Выборка.ФормулаПрименимостиВложенногоИзображения)
						ИЛИ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(Выборка.ФормулаПрименимостиВложенногоИзображения, Запрос.ДополнительныеСвойства.Заказ) Тогда
					
					Polygon.ref = Выборка.ВложенноеИзображение;
					InspectedImage.polygons.Добавить(Polygon);
				КонецЕсли;
			Иначе
				// Проверка инспектируемого элемента на применимость к заказу по формуле применимости.
				// Если формула не выполняется, полигон не выводим.
				Если НЕ ЗначениеЗаполнено(Выборка.ФормулаПрименимости)
						ИЛИ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(Выборка.ФормулаПрименимости, Запрос.ДополнительныеСвойства.Заказ) Тогда
					
					ТипConcern = ФабрикаXDTO.Тип(ПространствоИмен, "Polygon").Свойства.Получить("concern").Тип;
					Concern = ФабрикаXDTO.Создать(ТипConcern);
					
					Concern.inspectionItem = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties"));
					
					Concern.inspectionItem.id = Выборка.ИнспектируемыйЭлемент.УникальныйИдентификатор();
					Concern.inspectionItem.presentation = СокрЛП(Выборка.ИнспектируемыйЭлемент);
					
					Если Выборка.ЗадаватьПозициюA Тогда
						Concern.positionA = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionA"));
						Concern.positionA.id = Выборка.ЗначениеВариантаПозицийA;
						Concern.positionA.presentation = Строка(Выборка.ЗначениеВариантаПозицийA);
						
						Concern.positions.Добавить("A");
					КонецЕсли;
					
					Если Выборка.ЗадаватьПозициюB Тогда
						Concern.positionB = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionB"));
						Concern.positionB.id = Выборка.ЗначениеВариантаПозицийB;
						Concern.positionB.presentation = Строка(Выборка.ЗначениеВариантаПозицийB);
						
						Concern.positions.Добавить("B");
					КонецЕсли;
					
					Если Выборка.ЗадаватьПозициюC Тогда
						Concern.positionC = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionC"));
						Concern.positionC.id = Выборка.ЗначениеВариантаПозицийC;
						Concern.positionC.presentation = Строка(Выборка.ЗначениеВариантаПозицийC);
						
						Concern.positions.Добавить("C");
					КонецЕсли;
					
					Polygon.concern = Concern;
					
					InspectedImage.polygons.Добавить(Polygon);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		InspectedImageList.InspectedImage.Добавить(InspectedImage);
	КонецЦикла;
	
	Ответ.Данные = InspectedImageList;
	
КонецПроцедуры

// Дополняет таблицу изображений вложенными изображениями из регистра сведений "ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях".
// Рекурсивная.
//
// Параметры:
//  ТаблицаИзображений - ТаблицаЗначений - колонки таблицы: ИнспектируемоеИзображение, ЭтоКорневоеИзображение.
//  Заказ - СправочникСсылка.Заказ - заказ для проверки формулы применимости.
//
Процедура ДополнитьТаблицуВложеннымиИзображениями(ТаблицаИзображений, Заказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИзображений", ТаблицаИзображений);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИзображений.ИнспектируемоеИзображение КАК ИнспектируемоеИзображение
		|ПОМЕСТИТЬ ТаблицаИзображений
		|ИЗ
		|	&ТаблицаИзображений КАК ТаблицаИзображений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение КАК ВложенноеИзображение,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение.ФормулаПрименимости КАК ФормулаПрименимостиВложенногоИзображения
		|ИЗ
		|	РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзображений КАК ТаблицаИзображений
		|		ПО ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение = ТаблицаИзображений.ИнспектируемоеИзображение
		|ГДЕ
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение <> ЗНАЧЕНИЕ(Справочник.ИзображенияДляВыбораИнспектируемогоЭлемента.ПустаяСсылка)
		|	И НЕ ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВложенноеИзображение В
		|				(ВЫБРАТЬ
		|					ТаблицаИзображений.ИнспектируемоеИзображение
		|				ИЗ
		|					ТаблицаИзображений)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		ЕстьНовыеЗаписи = Ложь;
		
		Пока Выборка.Следующий() Цикл
			// Перед добавлением вложенного изображения в таблицу, проверяем его применимость к заказу по формуле применимости.
			Если НЕ ЗначениеЗаполнено(Выборка.ФормулаПрименимостиВложенногоИзображения)
					ИЛИ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(Выборка.ФормулаПрименимостиВложенногоИзображения, Заказ) Тогда
				
				СтрокаТаблицы = ТаблицаИзображений.Добавить();
				СтрокаТаблицы.ИнспектируемоеИзображение = Выборка.ВложенноеИзображение;
				СтрокаТаблицы.ЭтоКорневоеИзображение = Ложь;
				
				ЕстьНовыеЗаписи = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьНовыеЗаписи Тогда
			ДополнитьТаблицуВложеннымиИзображениями(ТаблицаИзображений, Заказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает и проводит документ ОперацияПоКампании с заданным типом операции.
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//  ТипОперации - ПеречислениеСсылка.ОперацииКампании - тип операции создаваемого документа.
//
Процедура ЗарегистрироватьОперациюПоКампании(Запрос, Ответ, ТипОперации) Экспорт
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	
	// Для операции с типом "Снятие" проверяем, что кампанию возможно закрыть на текущей точке.
	Если ТипОперации = Перечисления.ОперацииКампании.Снятие Тогда
		ЗапросКБазеДанных = Новый Запрос;
		ЗапросКБазеДанных.УстановитьПараметр("Кампания", Запрос.ДополнительныеСвойства.Кампания);
		ЗапросКБазеДанных.УстановитьПараметр("РабочееМесто", Запрос.ДополнительныеСвойства.РабочееМесто);
		ЗапросКБазеДанных.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РабочиеМестаОператоров.Ссылка КАК Ссылка,
			|	ТочкиПроверкиКачества.Ссылка КАК ТочкаПроверкиКачества,
			|	ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Кампания КАК Кампания
			|ИЗ
			|	Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.КампанииДоступныеДляЗакрытия КАК ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия
			|			ПО ТочкиПроверкиКачества.Ссылка = ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Ссылка
			|		ПО РабочиеМестаОператоров.ТочкаПроверкиКачества = ТочкиПроверкиКачества.Ссылка
			|ГДЕ
			|	РабочиеМестаОператоров.Ссылка = &РабочееМесто
			|	И ТочкиПроверкиКачества.ЗакрыватьКампанииИзСписка
			|	И ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Кампания = &Кампания";
		
		РезультатЗапроса = ЗапросКБазеДанных.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ТекстОшибки = "На рабочем месте: """ + Запрос.ДополнительныеСвойства.РабочееМесто + """ отсутствует возможность закрытия кампании """ + Запрос.ДополнительныеСвойства.Кампания + """";
			ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	// Создаем документ ОперацияПоКампании.
	ОперацияПоКампании = Документы.ОперацияПоКампании.СоздатьДокумент();
	ОперацияПоКампании.Дата = ТекущаяДатаСеанса();
	ОперацияПоКампании.ОперацияКампании = ТипОперации;
	ОперацияПоКампании.Заказ = Запрос.ДополнительныеСвойства.Заказ;
	ОперацияПоКампании.Кампания = Запрос.ДополнительныеСвойства.Кампания;
	ОперацияПоКампании.Ответственный = Пользователи.ТекущийПользователь();
	
	Попытка
		// Проведение документа выполняется в Попытке.
		// При проведении проверяется принадлежность заказа кампании.
		// Снятие: Если заказ не принадлежит кампании, вызывается исключение. Текст его передаем в ответе на запрос.
		// Установка: Если заказ уже принадлежит кампании, вызывается исключение. Текст его передаем в ответе на запрос.
		ОперацияПоКампании.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации("Не удалось провести документ: """ + ОперацияПоКампании + """", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		Возврат;
	КонецПопытки;
	
	
	RegisterResponse = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Запрос.ДополнительныеСвойства.ПространствоИмен, "RegisterResponse"));
	
	RegisterResponse.errorMessage = "Создан документ: " + ОперацияПоКампании.Ссылка;
	RegisterResponse.isError = Ложь;
	
	Ответ.Данные = RegisterResponse;
	
КонецПроцедуры

// Дополняет параметр Запрос ссылкой на кампанию, определяя ее по идентификатору.
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ПолучитьКампаниюПоИдентификатору(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторКампании = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторКампании", ИдентификаторКампании);
	
	Если ИдентификаторКампании = Неопределено Тогда
		ТекстОтвета = "Не передан идентификатор кампании.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторКампании) Тогда
		ТекстОтвета = СтрШаблон("Значение <%1> не является уникальным идентификатором.", ИдентификаторКампании);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;		
	КонецЕсли;
	
	Кампания = Справочники.Кампании.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКампании));
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(Кампания) Тогда
		ТекстОтвета = "Не удалось найти кампанию по идентификатору.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 404);
		Возврат;
	КонецЕсли;
	
	Запрос.ДополнительныеСвойства.Вставить("Кампания", Кампания);
	
КонецПроцедуры

// Готовит ОбъектXDTO - ответственного за инспектируемый элемент.
// Заполняет Ответ.Данные подготовенным объектом ОбъектXDTO;
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ЗаполнитьОтветственногоЗаИнспектируемыйЭлемент(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	
	Responsible = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Запрос.ДополнительныеСвойства.ПространствоИмен, "Responsible"));
	
	ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос.ДополнительныеСвойства.РабочееМесто, "ТочкаПроверкиКачества");
	
	ОтветственныйЗаДефект = РегистрыСведений.ОтветственныеЗаДефекты.ПолучитьОтветственногоЗаДефект(ТочкаПроверкиКачества,
																									Запрос.ДополнительныеСвойства.ИнспектируемыйЭлемент,
																									Запрос.ДополнительныеСвойства.Дефект,
																									Запрос.ДополнительныеСвойства.ТипДефекта);
	
	Если НЕ ЗначениеЗаполнено(ОтветственныйЗаДефект) Тогда
		// Если из регистра получить ответственного не удалось, берем его из реквизита инспектируемого элемента.
		ОтветственныйЗаДефект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос.ДополнительныеСвойства.ИнспектируемыйЭлемент, "Ответственный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныйЗаДефект) Тогда
		ЗапросКБазеДанных = Новый Запрос;
		ЗапросКБазеДанных.УстановитьПараметр("ОтветственныйЗаДефект", ОтветственныйЗаДефект);
		ЗапросКБазеДанных.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныйЗаДефект.Ссылка КАК Ссылка,
			|	ОтветственныйЗаДефект.Наименование КАК Наименование,
			|	ОтветственныйЗаДефект.ЭтоГруппа КАК ЭтоГруппа,
			|	ОтветственныйЗаДефект.Родитель КАК Родитель
			|ИЗ
			|	Справочник.ОтветственныйЗаДефект КАК ОтветственныйЗаДефект
			|ГДЕ
			|	ОтветственныйЗаДефект.Ссылка = &ОтветственныйЗаДефект";
		
		Выборка = ЗапросКБазеДанных.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Responsible.id = Выборка.Ссылка;
		Responsible.presentation = Выборка.Наименование;
		Responsible.isFolder = Выборка.ЭтоГруппа;
		Responsible.parentId = Выборка.Родитель;
	Иначе
		Responsible.id = Справочники.ОтветственныйЗаДефект.ПустаяСсылка();
		Responsible.presentation = "";
		Responsible.isFolder = Ложь;
		Responsible.parentId = Справочники.ОтветственныйЗаДефект.ПустаяСсылка();
	КонецЕсли;
	
	
	Ответ.Данные = Responsible;
	
КонецПроцедуры

// Удаляет из таблицы инспектируемых элементов позиции, не прошедшие проверку по алгоритмам применимости.
// Если алгорим применимости не заполнен, проверка игнорируется.
//
// Параметры:
//  ТаблицаИнспектируемыхЭлементов - ТаблицаЗначений - таблица инспектируемых элементов;
//  Заказ - СправочникСсылка.Заказы - заказ, к которому проверяется применимость элементов.
//
Процедура ФильтроватьИнспектируемыеЭлементыПоФормуламПрименимости(ТаблицаИнспектируемыхЭлементов, Знач Заказ)
	
	Для Индекс = -ТаблицаИнспектируемыхЭлементов.Количество() + 1 По 0 Цикл
		ФормулаПрименимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаблицаИнспектируемыхЭлементов[-Индекс].ИнспектируемыйЭлемент, "ФормулаПрименимости");
		
		Если ЗначениеЗаполнено(ФормулаПрименимости) И НЕ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(ФормулаПрименимости, Заказ) Тогда
			ТаблицаИнспектируемыхЭлементов.Удалить(-Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Функция СписокДефектов(РабочееМесто, ПространствоИмен)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТочкаПроверкиКачества", "ТочкаПроверкиКачества");
	//Реквизиты.Вставить("ПоказыватьВсеДефекты",  "ТочкаПроверкиКачества.ПоказыватьВсеДефекты");
	
	ДанныеТочкиКачества = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочееМесто, Реквизиты);
	//ПоказыватьВсеДефекты = ДанныеТочкиКачества.ПоказыватьВсеДефекты;
	ТочкаПроверкиКачества = ДанныеТочкиКачества.ТочкаПроверкиКачества;
	
	СписокДефектов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "DefectsList"));
	Defect = ФабрикаXDTO.Тип(ПространствоИмен, "Defect");
	DefectType = ФабрикаXDTO.Тип(ПространствоИмен, "DefectType");
	
	ДанныеПоДефектам = ОпределитьТипыДефектов(ТочкаПроверкиКачества); 
	
	ВыборкаДефектов = ДанныеПоДефектам.ВыборкаДефектов;
	Пока ВыборкаДефектов.Следующий() Цикл 
		
		Дефект = ФабрикаXDTO.Создать(Defect);   
		
		Дефект.Id 				= ВыборкаДефектов.Дефект;
		Дефект.presentation 	= Строка(ВыборкаДефектов.Дефект);
		
		ВыборкаИнспектируемыйЭлемент =  ВыборкаДефектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИнспектируемыйЭлемент.Следующий()  Цикл                
			
			Если ЗначениеЗаполнено(ВыборкаИнспектируемыйЭлемент.ИнспектируемыйЭлемент) Тогда
				Дефект.inspectionItems.Добавить(ВыборкаИнспектируемыйЭлемент.ИнспектируемыйЭлемент.УникальныйИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаИнспектируемыйЭлемент.Сбросить();  
		
		Если  ВыборкаИнспектируемыйЭлемент.Следующий()  Тогда   
			ВыборкаТиповДефектов = ВыборкаИнспектируемыйЭлемент.Выбрать();
			Пока ВыборкаТиповДефектов.Следующий() Цикл
				
				Если ВыборкаТиповДефектов.ТипДефекта = Null Тогда
					Продолжить;
				КонецЕсли;             
				
				ТипДефекта = ФабрикаXDTO.Создать(DefectType);
				ТипДефекта.Id 			= ВыборкаТиповДефектов.ТипДефекта.УникальныйИдентификатор();
				ТипДефекта.presentation	= Строка(ВыборкаТиповДефектов.ТипДефекта);
				
				Дефект.types.Добавить(ТипДефекта);
			КонецЦикла;       
		КонецЕсли; 
		
		СписокДефектов.defects.Добавить(Дефект);

				
	КонецЦикла;
	
	Возврат СписокДефектов;
	
КонецФункции 

Процедура ПолучитьРабочееМестоПоИдентификатору(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторРабочегоМеста = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторРабочегоМеста", ИдентификаторРабочегоМеста);
	
	Если ИдентификаторРабочегоМеста = Неопределено Тогда
		ТекстОтвета = "Не передан идентификатор рабочего места.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторРабочегоМеста) Тогда
		ТекстОтвета = СтрШаблон("Значение <%1> не является уникальным идентификатором", ИдентификаторРабочегоМеста);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;		
	КонецЕсли;
	
	Попытка
		РабочееМесто = Справочники.РабочиеМестаОператоров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторРабочегоМеста));
	Исключение
		РабочееМесто = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	КонецПопытки;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(РабочееМесто) Тогда
		ТекстОтвета = "Не удалось найти рабочее место по идентификатору: " + Строка(РабочееМесто);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 404);
		Возврат;		
	КонецЕсли;
	
	Если Не РабочееМестоНазначеноТекущемуПользователю(РабочееМесто) Тогда
		ТекстОтвета = "Рабочее место с идентификатором """ + Строка(РабочееМесто) + """ не назначено пользователю.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 403);
		Возврат;	
	КонецЕсли; 
	
	Запрос.ДополнительныеСвойства.Вставить("РабочееМесто", РабочееМесто);
	
КонецПроцедуры

// Получаем таблицу всех рабочих мест оператора для конкретного пользователя. 
// Рабочее место должно быть доступно пользователю, также оно должно быть добавлено в настройки нетипового обмена
//
Функция ТаблицаДоступныхРабочихМестОператора(Пользователь, ТипИнтерфейса = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора КАК РабочееМестоОператора
	|ИЗ
	|	РегистрСведений.НазначенияРабочихМестОператорам.СрезПоследних(, Пользователь = &ТекущийПользователь) КАК НазначенияРабочихМестОператорамСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
	|		ПО НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора = РабочиеМестаОператоров.Ссылка
	|ГДЕ
	|	НЕ РабочиеМестаОператоров.ПометкаУдаления
	|	И НЕ НазначенияРабочихМестОператорамСрезПоследних.Отключено
	|	И РабочиеМестаОператоров.ТочкаПроверкиКачества.ТипИнтерфейса = &ТипИнтерфейса
	|
	|УПОРЯДОЧИТЬ ПО
	|	НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора.Наименование";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь); 
	Запрос.УстановитьПараметр("ТипИнтерфейса", ТипИнтерфейса);
	
	ТаблицаДоступныхРабочихМестОператора = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДоступныхРабочихМестОператора;
	
КонецФункции

Функция ДанныеРабочегоМеста(РабочееМесто)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РабочиеМестаОператоров.Ссылка КАК Ссылка,
	|	РабочиеМестаОператоров.Наименование КАК Наименование,
	|	РабочиеМестаОператоров.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
	|	РабочиеМестаОператоров.ТочкаПроверкиКачества.ТипИнтерфейса КАК ТипИнтерфейса,
	|	ТочкиПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек КАК КонтролироватьПрохождениеОбязательныхТочек,
	|	ТочкиПроверкиКачества.КонтролироватьКомплектность КАК КонтролироватьКомплектность,
	|	ТочкиПроверкиКачества.КонтролироватьНаличиеОткрытыхКонсернов КАК КонтролироватьНаличиеОткрытыхКонсернов,
	|	ТочкиПроверкиКачества.КонтролироватьНаличиеКампаний КАК КонтролироватьНаличиеКампаний,
	|	ТочкиПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы КАК ПоказыватьВсеИнспектируемыеЭлементы,
	|	ЕСТЬNULL(ТочкиПроверкиКачества.ОтображатьИнспектируемыеЭлементыПоГруппам, ЛОЖЬ) КАК ОтображатьИнспектируемыеЭлементыПоГруппам,
	|	ТочкиПроверкиКачества.ЗакрыватьДефектыОнЛайн КАК ЗакрыватьДефектыОнЛайн,
	|	ТочкиПроверкиКачества.ИспользоватьСтоимостьКонсерна КАК ИспользоватьСтоимостьКонсерна,
	|	ТочкиПроверкиКачества.ИспользоватьОтветственногоЗаКонсерн КАК ИспользоватьОтветственногоЗаКонсерн,
	|	ТочкиПроверкиКачества.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты,
	|	ТочкиПроверкиКачества.ЗакрыватьКампанииИзСписка КАК ЗакрыватьКампанииИзСписка,
	|	ТочкиПроверкиКачества.ИспользоватьСпособОбнаруженияДефектов КАК ИспользоватьСпособОбнаруженияДефектов,
	|	ТочкиПроверкиКачества.УчитыватьВремяРемонта КАК УчитыватьВремяРемонта,
	|	ТочкиПроверкиКачества.КонтролироватьВыполненныйРемонт КАК КонтролироватьВыполненныйРемонт,
	|	ТочкиПроверкиКачества.АктивироватьВкладкуКампании КАК АктивироватьВкладкуКампании,
	|	ТочкиПроверкиКачества.АктивироватьВкладкуКонтроль КАК АктивироватьВкладкуКонтроль,
	|	ТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля КАК ПулИнспектируемыхЭлементовДляКонтроля,
	|	ТочкиПроверкиКачества.ПулДанныхДляКонтроля КАК ПулДанныхДляКонтроля
	|ИЗ
	|	Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
	|		ПО РабочиеМестаОператоров.ТочкаПроверкиКачества = ТочкиПроверкиКачества.Ссылка
	|ГДЕ
	|	РабочиеМестаОператоров.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", РабочееМесто);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Функция СписокДоступныхРабочихМестВМассиве(ТаблицаРабочихМест)
	
	WorkstationsList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://QLS/icommon/workstations/1.0", "WorkstationsList"));	
		
	Для Каждого СтрокаРМ Из ТаблицаРабочихМест Цикл
		
		WorkstationKeyProperties = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://QLS/icommon/workstations/1.0", "WorkstationKeyProperties")); 
		
		WorkstationKeyProperties.id = СтрокаРМ.РабочееМестоОператора.УникальныйИдентификатор();
		WorkstationKeyProperties.presentation = Строка(СтрокаРМ.РабочееМестоОператора);
		
		WorkstationsList.WorkstationObject.Добавить(WorkstationKeyProperties);
		 		
	КонецЦикла;
	
	Возврат WorkstationsList;
			
КонецФункции

Функция ОпределитьТипыДефектов(ТочкаПроверкиКачества)
		
	Запрос = Новый Запрос;
	Запрос.Текст =              
	"ВЫБРАТЬ
	|	ТочкиПроверкиКачества.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты
	|ПОМЕСТИТЬ УсловиеПоказыватьВсеДефекты
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
	|ГДЕ
	|	ТочкиПроверкиКачества.Ссылка = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТочкиПроверкиКачестваДефекты.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТочкиПроверкиКачестваДефекты.Дефект КАК Дефект
	|ПОМЕСТИТЬ ДефектыТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.Дефекты КАК ТочкиПроверкиКачестваДефекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловиеПоказыватьВсеДефекты КАК УсловиеПоказыватьВсеДефекты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	УсловиеПоказыватьВсеДефекты.ПоказыватьВсеДефекты = ЛОЖЬ
	|	И ТочкиПроверкиКачестваДефекты.Ссылка = &ТочкаПроверкиКачества
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ИнспектируемыеЭлементы.ПустаяСсылка),
	|	Дефекты.Ссылка
	|ИЗ
	|	Справочник.Дефекты КАК Дефекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловиеПоказыватьВсеДефекты КАК УсловиеПоказыватьВсеДефекты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	УсловиеПоказыватьВсеДефекты.ПоказыватьВсеДефекты = ИСТИНА
	|	И НЕ Дефекты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДефектыТочки.Дефект КАК Дефект,
	|	ДефектыТочки.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТипыДефектов.Ссылка КАК ТипДефекта
	|ИЗ
	|	ДефектыТочки КАК ДефектыТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыДефектов КАК ТипыДефектов
	|		ПО ДефектыТочки.Дефект = ТипыДефектов.Владелец
	|			И (НЕ ТипыДефектов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДефектыТочки.Дефект.Наименование
	|ИТОГИ ПО
	|	Дефект,
	|	ИнспектируемыйЭлемент";
	
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДефектов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Новый Структура("ВыборкаДефектов", ВыборкаДефектов);

КонецФункции

Функция ВсеОтветственные()
		
	Запрос = Новый Запрос;
	Запрос.Текст =              
	"ВЫБРАТЬ
	|	ОтветственныйЗаДефект.Ссылка КАК Ссылка,
	|	ОтветственныйЗаДефект.ЭтоГруппа КАК ЭтоГруппа,
	|	ОтветственныйЗаДефект.Наименование КАК Наименование,
	|	ОтветственныйЗаДефект.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ОтветственныйЗаДефект КАК ОтветственныйЗаДефект
	|ГДЕ
	|	Не ОтветственныйЗаДефект.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции       

Функция ВсеСтоимости()
		
	Запрос = Новый Запрос;
	Запрос.Текст =              
	"ВЫБРАТЬ
	|	СтоимостьКонсернов.Ссылка КАК Ссылка,
	|	СтоимостьКонсернов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтоимостьКонсернов КАК СтоимостьКонсернов
	|ГДЕ
	|	Не СтоимостьКонсернов.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции 

Процедура ЗаполнитьТаблицаСтоимостиКонсернов(ПараметрыРабочегоМеста, ТаблицаСтоимости, ПространствоИмен)

	ConsernCosts 	= ФабрикаXDTO.Тип(ПространствоИмен,  "ConsernCosts");  

	Для Каждого Стр Из  ВсеСтоимости() Цикл
		
		Стоимость = ФабрикаXDTO.Создать(ConsernCosts);
		Стоимость.id 				= Стр.Ссылка.УникальныйИдентификатор();
		Стоимость.presentation 	= Стр.Наименование;
		
		ТаблицаСтоимости.Добавить(Стоимость);
			
	КонецЦикла;
	
КонецПроцедуры  

Процедура ЗаполнитьТаблицаОтветственныхЗаКонсерн(ПараметрыРабочегоМеста, ТаблицаОтветственных, ПространствоИмен)

	Responsible 		= ФабрикаXDTO.Тип(ПространствоИмен, "Responsible");  
	
	Для Каждого Стр Из  ВсеОтветственные() Цикл
		
		Ответственный = ФабрикаXDTO.Создать(Responsible);
		Ответственный.Id 				= Стр.Ссылка;
		Ответственный.presentation 	= Стр.Наименование;
		Ответственный.isFolder  		= Стр.ЭтоГруппа;
		Ответственный.parentId 		= Стр.Родитель;       
		
		ТаблицаОтветственных.Добавить(Ответственный);
			
	КонецЦикла;
	
КонецПроцедуры  

// Заполняет список кампаний, доступных для закрытия на точке проверки качества по рабочему месту.
//
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМестаОператоров - рабочее место оператора;
//  СписокКампаний - СписокXDTO - список кампаний для заполнения (XDTO-пакет.Workstation_2_0.InspectionFormSettings.campaignsAvailableForClosing);
//  ПространствоИмен - Строка - пространство имен http-запроса.
//
Процедура ЗаполнитьКампанииДоступныеДляЗакрытия(РабочееМесто, СписокКампаний, ПространствоИмен)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РабочееМесто);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.НомерСтроки КАК НомерСтроки,
		|	ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Кампания КАК Кампания,
		|	ЕСТЬNULL(Кампании.Код, """") КАК Код
		|ИЗ
		|	Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.КампанииДоступныеДляЗакрытия КАК ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кампании КАК Кампании
		|			ПО ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Кампания = Кампании.Ссылка
		|		ПО РабочиеМестаОператоров.ТочкаПроверкиКачества = ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Ссылка
		|ГДЕ
		|	РабочиеМестаОператоров.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипКампании = ФабрикаXDTO.Тип(ПространствоИмен, "Campaign");  
	
	Пока Выборка.Следующий() Цикл
		Кампания = ФабрикаXDTO.Создать(ТипКампании);
		
		Кампания.id = Выборка.Кампания;
		Кампания.presentation = СокрЛП(Выборка.Код);
		
		СписокКампаний.Добавить(Кампания);
	КонецЦикла;
	
КонецПроцедуры  


Функция ПреобразоватьТаблицуДляОтвета(ПоказыватьВсеИнспектируемыеЭлементы, ТаблицаИнспектируемыхЭлементов, ТаблицаПозицииСДляИнспектируемыхЭлементов,  ПространствоИмен)

	InspectionItemsList = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemsList"));   
		
	Для Каждого Элемент Из ТаблицаИнспектируемыхЭлементов Цикл
		
		НоваяСтрока = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectionListElement"));
		
		InspectionItemKeyProperties = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "InspectionItemKeyProperties"));
		InspectionItemKeyProperties.id = Элемент.ИнспектируемыйЭлемент.УникальныйИдентификатор();
		InspectionItemKeyProperties.presentation = Строка(Элемент.ИнспектируемыйЭлемент);
		
		НоваяСтрока.keyProperties = InspectionItemKeyProperties;
		НоваяСтрока.isCheckRequired = Элемент.ПроверкаОбязательна;   
		
		Статус =  СтатусСтрокой(Элемент.Статус);
		Если Статус <> "" Тогда
			НоваяСтрока.status =  СтатусСтрокой(Элемент.Статус);
		КонецЕсли;
		
		Если Элемент.ЗадаватьПозициюA Тогда
			НоваяСтрока.positions.Добавить("A");	
		КонецЕсли;
		
		Если Элемент.ЗадаватьПозициюB Тогда
			НоваяСтрока.positions.Добавить("B");	
		КонецЕсли;
		
		Если Элемент.ЗадаватьПозициюC Тогда
			НоваяСтрока.positions.Добавить("C");	
		КонецЕсли;                              
		
		Если Не ПоказыватьВсеИнспектируемыеЭлементы  и ЗначениеЗаполнено(ТаблицаПозицииСДляИнспектируемыхЭлементов) Тогда   
			
			Отбор = Новый Структура("ИнспектируемыйЭлемент",Элемент.ИнспектируемыйЭлемент);
			М = ТаблицаПозицииСДляИнспектируемыхЭлементов.НайтиСтроки(Отбор);
			Для Каждого Вариант Из М Цикл
				СтрокаPositionC = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "PositionC"));
				СтрокаPositionC.Id 			= Вариант.ВариантПозицииC.УникальныйИдентификатор();
				СтрокаPositionC.presentation 	= Вариант.Наименование;
				
				НоваяСтрока.positionCOptions.Добавить(СтрокаPositionC);
			КонецЦикла
			
		КонецЕсли;
		
		InspectionItemsList.keyProperties.Добавить(НоваяСтрока);     
		
	КонецЦикла; 
	
	Возврат InspectionItemsList;
	
КонецФункции
 
Функция ДанныеИнспектируемогоЭлемента(ИнспектируемыйЭлемент, ТочкаПроверкиКачества)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка КАК ТочкаПроверкиКачества,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.НомерСтроки КАК НомерСтроки,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ПроверкаОбязательна КАК ПроверкаОбязательна,
	|	ИнспектируемыеЭлементы.Наименование КАК Наименование,
	|	ВариантыИспользованияИнспектируемыхЭлементов.ЗадаватьПозициюA КАК ЗадаватьПозициюA,
	|	ВариантыИспользованияИнспектируемыхЭлементов.ЗадаватьПозициюB КАК ЗадаватьПозициюB,
	|	ВариантыИспользованияИнспектируемыхЭлементов.ЗадаватьПозициюC КАК ЗадаватьПозициюC
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнспектируемыеЭлементы КАК ИнспектируемыеЭлементы
	|		ПО ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент = ИнспектируемыеЭлементы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыИспользованияИнспектируемыхЭлементов КАК ВариантыИспользованияИнспектируемыхЭлементов
	|		ПО ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента = ВариантыИспользованияИнспектируемыхЭлементов.Ссылка
	|ГДЕ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества
	|	И ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент");
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
	
	Результат = Запрос.Выполнить(); 
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;	
	
КонецФункции

Функция КонсерныЗаказа(Заказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КонсерныОбороты.Консерн КАК Консерн,
		|	КонсерныОбороты.Заказ КАК Заказ,
		|	ВЫБОР
		|		КОГДА КонсерныОбороты.КоличествоПриход - КонсерныОбороты.КоличествоРасход <> 0
		|			ТОГДА 3
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Статус
		|ПОМЕСТИТЬ КонсерныЗаказа
		|ИЗ
		|	РегистрНакопления.Консерны.Обороты(, , , Заказ = &Заказ) КАК КонсерныОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонсерныЗаказа.Консерн КАК Консерн,
		|	ЕСТЬNULL(ОперацияПоКачеству.ИнспектируемыйЭлемент, ЗНАЧЕНИЕ(Справочник.ИнспектируемыеЭлементы.ПустаяСсылка)) КАК ИнспектируемыйЭлемент,
		|	ЕСТЬNULL(ОперацияПоКачеству.ИнспектируемыйЭлемент.ГруппаИнспектируемогоЭлемента, ЗНАЧЕНИЕ(Справочник.ГруппыИнспектируемыхЭлементов.ПустаяСсылка)) КАК ГруппаИнспектируемогоЭлемента,
		|	ЕСТЬNULL(ОперацияПоКачеству.Дефект, ЗНАЧЕНИЕ(Справочник.Дефекты.ПустаяСсылка)) КАК Дефект,
		|	КонсерныЗаказа.Заказ КАК Заказ,
		|	КонсерныЗаказа.Статус КАК Статус,
		|	ЕСТЬNULL(ОперацияПоКачеству.ОтветственныйЗаДефект, ЗНАЧЕНИЕ(Справочник.ОтветственныйЗаДефект.ПустаяСсылка)) КАК ОтветственныйЗаДефект,
		|	ЕСТЬNULL(ОперацияПоКачеству.СтоимостьКонсернаНовый, ЗНАЧЕНИЕ(Справочник.СтоимостьКонсернов.ПустаяСсылка)) КАК СтоимостьКонсерна,
		|	ЕСТЬNULL(ОперацияПоКачеству.ИзображениеИнспектируемогоЭлемента, ЗНАЧЕНИЕ(Справочник.ИзображенияПрисоединенныеФайлы.ПустаяСсылка)) КАК ИзображениеИнспектируемогоЭлемента,
		|	ЕСТЬNULL(ОперацияПоКачеству.ОбластьНаИзображении, """") КАК ОбластьНаИзображении
		|ИЗ
		|	КонсерныЗаказа КАК КонсерныЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияПоКачеству КАК ОперацияПоКачеству
		|		ПО КонсерныЗаказа.Консерн = ОперацияПоКачеству.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнспектируемыйЭлемент";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции  

// Получает список кампаний, в которых присутствует заказ. Выделяет среди них, доступные для закрытия на указанном рабочем месте.
//
// Параметры:
//  Заказ - СправочникСсылка.Заказы - заказ, для которого получаются кампании.
//  РабочееМесто - СправочникСсылка.РабочиеМестаОператоров - рабочее место, для которого получаются доступные для закрытия кампании.
//
Функция КампанииЗаказа(Заказ, РабочееМесто = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	// Если передан параметр РабочееМесто, дополняем список кампаний признаком доступности для закрытия на указанном рабочем месте.
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КампанииОстатки.Заказ КАК Заказ,
			|	КампанииОстатки.Кампания КАК Кампания,
			|	КампанииОстатки.КоличествоОстаток КАК КоличествоОстаток,
			|	ЛОЖЬ КАК ДоступнаДляЗакрытия
			|ИЗ
			|	РегистрНакопления.Кампании.Остатки(, Заказ = &Заказ) КАК КампанииОстатки
			|
			|УПОРЯДОЧИТЬ ПО
			|	Кампания";
	Иначе
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Кампания КАК Кампания,
			|	ИСТИНА КАК ДоступнаДляЗакрытия
			|ПОМЕСТИТЬ КампанииДоступныеДляЗакрытия
			|ИЗ
			|	Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
			|		ПО РабочиеМестаОператоров.ТочкаПроверкиКачества = ТочкиПроверкиКачества.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.КампанииДоступныеДляЗакрытия КАК ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия
			|		ПО (ТочкиПроверкиКачества.Ссылка = ТочкиПроверкиКачестваКампанииДоступныеДляЗакрытия.Ссылка)
			|ГДЕ
			|	РабочиеМестаОператоров.Ссылка = &РабочееМесто
			|	И ТочкиПроверкиКачества.ЗакрыватьКампанииИзСписка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КампанииОстатки.Заказ КАК Заказ,
			|	КампанииОстатки.Кампания КАК Кампания,
			|	КампанииОстатки.КоличествоОстаток КАК КоличествоОстаток,
			|	ЕСТЬNULL(КампанииДоступныеДляЗакрытия.ДоступнаДляЗакрытия, ЛОЖЬ) КАК ДоступнаДляЗакрытия
			|ИЗ
			|	РегистрНакопления.Кампании.Остатки(, Заказ = &Заказ) КАК КампанииОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ КампанииДоступныеДляЗакрытия КАК КампанииДоступныеДляЗакрытия
			|		ПО КампанииОстатки.Кампания = КампанииДоступныеДляЗакрытия.Кампания";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции


Функция ПолучитьДефекты(Заказ, РабочееМесто)       
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РабочееМестоОператора.ТочкаПроверкиКачества КАК Ссылка,
	               |	РабочееМестоОператора.ТочкаПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы КАК ПоказыватьВсеИнспектируемыеЭлементы,
	               |	РабочееМестоОператора.ТочкаПроверкиКачества.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты
	               |ПОМЕСТИТЬ ТочкаПроверкиКачества
	               |ИЗ
	               |	Справочник.РабочиеМестаОператоров КАК РабочееМестоОператора
	               |ГДЕ
	               |	РабочееМестоОператора.Ссылка = &РабочееМесто
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
	               |ПОМЕСТИТЬ ИнспектируемыеЭлементы
	               |ИЗ
	               |	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	               |		ПО ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = ТочкаПроверкиКачества.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТочкиПроверкиКачестваДефекты.Дефект КАК Дефект
	               |ПОМЕСТИТЬ Дефекты
	               |ИЗ
	               |	Справочник.ТочкиПроверкиКачества.Дефекты КАК ТочкиПроверкиКачестваДефекты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	               |		ПО ТочкиПроверкиКачестваДефекты.Ссылка = ТочкаПроверкиКачества.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонсерныОстатки.Консерн.Дата КАК Дата,
	               |	КонсерныОстатки.Консерн КАК Консерн,
	               |	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	               |	КонсерныОстатки.Консерн.Дефект КАК Дефект,
	               |	КонсерныОстатки.Консерн.ТипДефекта КАК ТипДефекта,
	               |	КонсерныОстатки.Консерн.ПозицияА КАК ПозицияА,
	               |	КонсерныОстатки.Консерн.ПозицияB КАК ПозицияB,
	               |	КонсерныОстатки.Консерн.ПозицияC КАК ПозицияC,
	               |	КонсерныОстатки.Консерн.Комментарий КАК Комментарий,
				   |	КонсерныОстатки.Консерн.ИзображениеИнспектируемогоЭлемента КАК ИзображениеИнспектируемогоЭлемента,
				   |	КонсерныОстатки.Консерн.ОбластьНаИзображении КАК ОбластьНаИзображении
	               |ИЗ
	               |	РегистрНакопления.Консерны.Остатки(, Заказ = &Заказ) КАК КонсерныОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ИСТИНА
	               |	И (ТочкаПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы
	               |			ИЛИ КонсерныОстатки.Консерн.ИнспектируемыйЭлемент В
	               |				(ВЫБРАТЬ
	               |					ИнспектируемыеЭлементы.ИнспектируемыйЭлемент
	               |				ИЗ
	               |					ИнспектируемыеЭлементы))
	               |	И (ТочкаПроверкиКачества.ПоказыватьВсеДефекты
	               |			ИЛИ КонсерныОстатки.Консерн.Дефект В
	               |				(ВЫБРАТЬ
	               |					Дефекты.Дефект
	               |				ИЗ
	               |					Дефекты))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";

	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Дефекты = РезультатЗапроса.Выгрузить();
	
	Возврат Дефекты;

КонецФункции

Функция ПолучитьДействия(Заказ)       
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбслуживаниеПриЗакрытииКонсерна.Ссылка КАК Задача,
		|	ОбслуживаниеПриЗакрытииКонсерна.ДокументЗакрытияКонсерна.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	ОбслуживаниеПриЗакрытииКонсерна.СработавшееДействие КАК Действие,
		|	ОбслуживаниеПриЗакрытииКонсерна.СработавшееДействие.ОписаниеОбслуживания КАК Описание
		|ИЗ
		|	Задача.ОбслуживаниеПриЗакрытииКонсерна КАК ОбслуживаниеПриЗакрытииКонсерна
		|ГДЕ
		|	ОбслуживаниеПриЗакрытииКонсерна.Заказ = &Заказ
		|	И НЕ ОбслуживаниеПриЗакрытииКонсерна.Выполнена
		|	И НЕ ОбслуживаниеПриЗакрытииКонсерна.ПометкаУдаления";

	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Действия = РезультатЗапроса.Выгрузить();
	
	Возврат Действия;

КонецФункции


//Если в отсканированном значении был передан VIN длиной 7, 8, 17 символов, мы его находим и возвращаем обратно заказ
Функция ОпеределитьЗаказ(ОтсканированноеЗначение)
	
	Заказ = Справочники.Заказы.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ОтсканированноеЗначение) Тогда
		Возврат Заказ;
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОтсканированноеЗначение) Тогда
		
		Попытка
			Заказ = Справочники.Заказы.ПолучитьСсылку(Новый УникальныйИдентификатор(ОтсканированноеЗначение));
		Исключение
		    Заказ = Справочники.Заказы.ПустаяСсылка();
		КонецПопытки;
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Заказ) Тогда
			Заказ = Справочники.Заказы.ПустаяСсылка();
		КонецЕсли; 
		
	Иначе
		
		Заказ = Справочники.Заказы.НайтиПоVINНомеру(ОтсканированноеЗначение);
		
	КонецЕсли;	
	
	Возврат Заказ;
	
КонецФункции

Функция СтатусСтрокой(Статус) 
	
	СтатусСтрока = "";
	Если Статус = 0 Тогда
		СтатусСтрока = "";	
	ИначеЕсли Статус = 1 Тогда 
		СтатусСтрока = "проверен";
	ИначеЕсли Статус = 2 Тогда 
		СтатусСтрока = "закрыт";
	ИначеЕсли Статус = 3 Тогда 
		СтатусСтрока = "открыт";
	КонецЕсли;
	
	Возврат СтатусСтрока;
	
КонецФункции


Функция ПолучитьПредставлениеДляТипаРабочегоМеста(Тип)
	Результат = "";
	Если Тип = Перечисления.ИнтерфейсыОператоров.Инспектор Тогда
		Результат = "inspector";
	ИначеЕсли Тип = Перечисления.ИнтерфейсыОператоров.Ремонтник Тогда
		Результат = "repairer";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции   


Функция ПолучитьИнтерфейсОператора(Представление)
	Результат = Неопределено;
	Если Представление = "inspector" Тогда
		Результат = Перечисления.ИнтерфейсыОператоров.Инспектор;
	ИначеЕсли Представление = "repairer"Тогда
		Результат = Перечисления.ИнтерфейсыОператоров.Ремонтник;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции   

// Дополняет структуру Запрос.ДополнительныеСвойства ссылкой на заказ.
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ЗаполнитьЗаказЗапроса(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	
	ИдентификаторЗаказа = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаРесурс", ИдентификаторЗаказа);
	
	ТипИдентификатораЗаказа = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ТипИдентификатораЗаказа", ТипИдентификатораЗаказа);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаказа) Тогда
		ТекстОтвета = "Не указан идентификатор заказа.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Заказ = Справочники.Заказы.НайтиЗаказПоИдентификатору(ИдентификаторЗаказа, ТипИдентификатораЗаказа);
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		ТекстОтвета = "Не удалось найти заказ по идентификатору: """ + ИдентификаторЗаказа + """" + ?(ЗначениеЗаполнено(ТипИдентификатораЗаказа), " (тип """ + ТипИдентификатораЗаказа + """)", "");
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 500);
		Возврат;
	КонецЕсли;
	
	Запрос.ДополнительныеСвойства.Вставить("Заказ", Заказ);
	
КонецПроцедуры

// Дополняет структуру Запрос.ДополнительныеСвойства ссылкой на дефект.
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ПолучитьДефектПоИдентификатору(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	
	ИдентификаторДефекта = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторДефекта", ИдентификаторДефекта);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторДефекта) Тогда
		ТекстОтвета = "Не передан идентификатор дефекта.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДефекта) Тогда
		ТекстОтвета = СтрШаблон("Значение <%1> не является уникальным идентификатором", ИдентификаторДефекта);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;		
	КонецЕсли;
	
	Дефект = Справочники.Дефекты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторДефекта));
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(Дефект) Тогда
		ТекстОтвета = "Не удалось найти дефект по идентификатору: " + Строка(ИдентификаторДефекта);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 404);
		Возврат;		
	КонецЕсли;
	
	Запрос.ДополнительныеСвойства.Вставить("Дефект", Дефект);
	
	
	ИдентификаторТипаДефекта = Запрос.ПараметрЗапроса("type");
	
	Если ЗначениеЗаполнено(ИдентификаторТипаДефекта) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторТипаДефекта) Тогда
			ТекстОтвета = СтрШаблон("Значение <%1> не является уникальным идентификатором", ИдентификаторТипаДефекта);
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
			Возврат;		
		КонецЕсли;
		
		ТипДефекта = Справочники.ТипыДефектов.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТипаДефекта));
		
		Если НЕ ОбщегоНазначения.СсылкаСуществует(ТипДефекта) Тогда
			ТекстОтвета = "Не удалось найти тип дефекта по идентификатору: " + Строка(ИдентификаторТипаДефекта);
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 404);
			Возврат;		
		КонецЕсли;
		
		Запрос.ДополнительныеСвойства.Вставить("ТипДефекта", ТипДефекта);
	Иначе
		Запрос.ДополнительныеСвойства.Вставить("ТипДефекта", Справочники.ТипыДефектов.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру Запрос.ДополнительныеСвойства ссылкой на инспектируемый элемент.
//
// Параметры:
//  Запрос - ОбработкаОбъект.ВебПриложение_HTTPЗапрос - параметры http-запроса.
//  Ответ - ОбработкаОбъект.ВебПриложение_HTTPОтвет - параметры http-ответа.
//
Процедура ПолучитьИнспектируемыйЭлементПоИдентификатору(Запрос, Ответ)
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторИнспектируемогоЭлемента = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("ИдентификаторЭлемента", ИдентификаторИнспектируемогоЭлемента);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторИнспектируемогоЭлемента) Тогда
		ТекстОтвета = "Не передан идентификатор инспектируемого элемента.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторИнспектируемогоЭлемента) Тогда
		ТекстОтвета = СтрШаблон("Значение <%1> не является уникальным идентификатором", ИдентификаторИнспектируемогоЭлемента);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 400);
		Возврат;		
	КонецЕсли;
	
	ИнспектируемыйЭлемент = Справочники.ИнспектируемыеЭлементы.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторИнспектируемогоЭлемента));
	
	Если НЕ ОбщегоНазначения.СсылкаСуществует(ИнспектируемыйЭлемент) Тогда
		ТекстОтвета = "Не удалось найти инспектируемый элемент по идентификатору: " + Строка(ИдентификаторИнспектируемогоЭлемента);
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 404);
		Возврат;		
	КонецЕсли;
	
	Запрос.ДополнительныеСвойства.Вставить("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
	
КонецПроцедуры

#КонецОбласти
