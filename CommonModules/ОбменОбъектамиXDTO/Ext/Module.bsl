#Область СлужебныйПрограммныйИнтерфейс

// Выполняет преобразование объекта XDTO в структуру с данными.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Значение, которое необходимо преобразовать.
//
// Возвращаемое значение:
//  Структура - Структура, имитирующая объект XDTO.
//    Ключи структуры соответствуют свойствам объекта XDTO.
//    Значения соответствуют значениям свойств объекта XDTO.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO) Экспорт
	
	Приемник = Новый Структура;
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		КонвертацияСвойстваXDTOВЭлементСтруктуры(ОбъектXDTO, Свойство, Приемник);
	КонецЦикла;
	
	Если Приемник.Свойство("КлючевыеСвойства")
		И Приемник.КлючевыеСвойства.Свойство("Ссылка") Тогда
		Приемник.Вставить("Ссылка", Приемник.КлючевыеСвойства.Ссылка);
	КонецЕсли;
	
	Возврат Приемник;
КонецФункции

// Выполняет поиск правила конвертации объекта по имени.
//
// Параметры:
//  ПравилаКонвертации - ТаблицаЗначений - содержит все правила.
//  Имя - Строка - имя правила.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - Строка таблицы правил обмена, в которой содержится искомое правило.
//
Функция ПКОПоИмени(ПравилаКонвертации, Имя) Экспорт
	
	ПравилоКонвертации = ПравилаКонвертации.Найти(Имя, "ИмяПКО");
	
	Если ПравилоКонвертации = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдено ПКО с именем %1'"), Имя);
			
	Иначе
		Возврат ПравилоКонвертации;
	КонецЕсли;

КонецФункции

// В свойствах правила конвертации ищет ключевые свойства и проставляет соответствующий признак
// 
// Параметры:
// 	ТипОбъектаОбмена - ТипОбъектаXDTO
// 	ПравилоКонвертации - СтрокаТаблицыЗначений
Процедура ОпределитьКлючевыеСвойства(ТипОбъектаОбмена, ПравилоКонвертации) Экспорт
	
	КлючевыеСвойства = ТипОбъектаОбмена.Свойства.Получить("КлючевыеСвойства");
	Если КлючевыеСвойства <> Неопределено Тогда
		
		ТипКлючевыхСвойствОбъектаXDTO = КлючевыеСвойства.Тип;
		
		СвойстваКлючевыхСвойств = Новый Массив;
		Для Каждого ДочернееСвойство Из ТипКлючевыхСвойствОбъектаXDTO.Свойства Цикл
			СвойстваКлючевыхСвойств.Добавить(ДочернееСвойство.Имя);
		КонецЦикла;
		
		ТаблицаПКС = ПравилоКонвертации.Свойства;
		Для Каждого ПКС Из ТаблицаПКС Цикл
			
			Если СвойстваКлючевыхСвойств.Найти(ПКС.СвойствоФормата) <> Неопределено Тогда
				ПКС.ОбработкаКлючевогоСвойства = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Заполняет объект информационной базы, соответствующий полученным данным.
// 
// Параметры:
//  ДанныеXDTO       - Структура - структура, имитирующая объект XDTO.
//  ПолученныеДанные - Объект - заполняемый объект.
//  ПравилоКонвертации - СтрокаТаблицыЗначений - строка таблицы правил конвертации объектов.
//
Процедура СтруктураОбъектаXDTOВДанныеИБ(ДанныеXDTO, ПолученныеДанные, ПравилоКонвертации) Экспорт
		
	Попытка
		// Конвертация реквизитов.
		Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
			КонвертацияСвойстваСтруктурыОбъектаXDTO(ДанныеXDTO, ПолученныеДанные, ПКС);
		КонецЦикла;
		
		// Конвертация табличных частей.
		Для Каждого ТЧ Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
			
			Если ЗначениеЗаполнено(ТЧ.ТЧКонфигурации) И ЗначениеЗаполнено(ТЧ.ТЧФормата) Тогда
				ПолученныеДанные[ТЧ.ТЧКонфигурации].Очистить();
				
				// Прямая конвертация табличных частей.
				ТЧФормата = Неопределено;
				Если НЕ ДанныеXDTO.Свойство(ТЧ.ТЧФормата, ТЧФормата) Тогда
					Продолжить;
				ИначеЕсли ТЧФормата.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				МассивКолонокТЧ = Новый Массив;
				Для Каждого КолонкаТЧ Из ТЧФормата.Колонки Цикл
					МассивКолонокТЧ.Добавить(КолонкаТЧ.Имя);
				КонецЦикла;
				
				ИменаКолонокСтрокой = СтрСоединить(МассивКолонокТЧ, ",");
				Для НомерСтроки = 1 По ТЧФормата.Количество() Цикл
					
					ДанныеСтрокиXDTO = ТЧФормата[НомерСтроки - 1];
					СтрокаТЧ = ПолученныеДанные[ТЧ.ТЧКонфигурации].Добавить();
					СтруктураДанныхСтрокиXDTO = Новый Структура(ИменаКолонокСтрокой);
					ЗаполнитьЗначенияСвойств(СтруктураДанныхСтрокиXDTO, ДанныеСтрокиXDTO);
					
					Для Каждого ПКС Из ТЧ.Свойства Цикл
						КонвертацияСвойстваСтруктурыОбъектаXDTO(СтруктураДанныхСтрокиXDTO, СтрокаТЧ, ПКС);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ТекстОшибки = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект: %1.
				|Ошибка конвертации свойств.
				|%2.'"),
			ПолученныеДанные,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Формирует таблицу правил конвертации
// 
// Возвращаемое значение:
// 	ТаблицаЗначений
//
Функция ТаблицаПравилКонвертации(ИмяМодуляПодсистемыОбмена) Экспорт
	Возврат ОбменОбъектамиXDTOПовтИсп.ТаблицаПравилКонвертации(ИмяМодуляПодсистемыОбмена);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КонвертацияСвойстваXDTOВЭлементСтруктуры(Источник, Свойство, Приемник, ИмяДляСвойстваСоставногоТипа = "")
	
	Если Не Источник.Установлено(Свойство) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = ?(ИмяДляСвойстваСоставногоТипа = "", Свойство.Имя, ИмяДляСвойстваСоставногоТипа);
	
	ЗначениеXDTO = Источник.ПолучитьXDTO(Свойство);
	
	Попытка
		
		Если ТипЗнч(ЗначениеXDTO) = Тип("ЗначениеXDTO") Тогда
			
			Значение = ПрочитатьЗначениеXDTO(ЗначениеXDTO);
			
			Если ТипЗнч(Приемник) = Тип("Структура") Тогда
				Приемник.Вставить(ИмяСвойства, Значение);
			Иначе
				Приемник[ИмяСвойства] = Значение;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеXDTO) = Тип("ОбъектXDTO") Тогда
			
			// В свойстве могут находиться:
			// - дополнительная информация
			// - табличная часть
			// - набор ключевых свойств
			// - набор общих свойств
			// - свойство составного типа.
			
			Если ИмяСвойства = "AdditionalInfo" Тогда // Дополнительная информация
				
				Значение = СериализаторXDTO.ПрочитатьXDTO(ЗначениеXDTO);
				Приемник.Вставить(ИмяСвойства, Значение);
				
			ИначеЕсли ЭтоТаблицаОбъекта(Свойство) Тогда
				
				// Инициализируем таблицу значений, которая отображает табличную часть объекта.
				Значение = ТаблицаОбъектаПоТипу(Свойство.Тип.Свойства[0].Тип);
				
				ТабличнаяЧастьXDTO = Источник[ИмяСвойства].Строка;
				
				Для Индекс = 0 По ТабличнаяЧастьXDTO.Количество() - 1 Цикл
					
					СтрокаТЧ = Значение.Добавить();
					СтрокаXDTO = ТабличнаяЧастьXDTO.ПолучитьXDTO(Индекс);
					Для Каждого СвойствоСтрокиТЧ Из СтрокаXDTO.Свойства() Цикл
						
						КонвертацияСвойстваXDTOВЭлементСтруктуры(СтрокаXDTO, СвойствоСтрокиТЧ, СтрокаТЧ);
						
					КонецЦикла;
					
				КонецЦикла;
				
				Приемник.Вставить(ИмяСвойства, Значение);
				
			ИначеЕсли СтрНайти(ЗначениеXDTO.Тип().Имя, "КлючевыеСвойства") > 0 Тогда
				
				Значение = Новый Структура("ЭтоНаборКлючевыхСвойств");
				Значение.Вставить("ТипЗначения", СтрЗаменить(ЗначениеXDTO.Тип().Имя, "КлючевыеСвойства", ""));
				Для Каждого КлючевоеСвойство Из ЗначениеXDTO.Свойства() Цикл
					КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, КлючевоеСвойство, Значение);
				КонецЦикла;
				
				
				Если ТипЗнч(Приемник) = Тип("Структура") Тогда
					Приемник.Вставить(ИмяСвойства, Значение);
				Иначе
					Приемник[ИмяСвойства] = Значение;
				КонецЕсли;
				
			ИначеЕсли СтрНайти(ЗначениеXDTO.Тип().Имя, "ОбщиеСвойства") > 0 Тогда
				Если ТипЗнч(Приемник) = Тип("Структура") Тогда 
					ПриемникГруппыСвойств = Новый Структура;
					Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
						
						КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, ПриемникГруппыСвойств);
						
					КонецЦикла;
					Приемник.Вставить(ИмяСвойства, ПриемникГруппыСвойств);
					// По возможности свойства из группы свойств надо продублировать в приемнике,
					// Для совместимости с существующими правилами и алгоритмами.
					ЕстьКлючевыеСвойства = Приемник.Свойство("КлючевыеСвойства");
					Для Каждого СвойствоГруппы Из ПриемникГруппыСвойств Цикл
						ИмяПодСвойства = СвойствоГруппы.Ключ;
						Если НЕ Приемник.Свойство(ИмяПодСвойства)
							И НЕ (ЕстьКлючевыеСвойства И Приемник.КлючевыеСвойства.Свойство(ИмяПодСвойства)) Тогда
							Приемник.Вставить(ИмяПодСвойства, СвойствоГруппы.Значение);
						КонецЕсли;
					КонецЦикла;
				Иначе
					
					Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
						
						КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, Приемник);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				// Свойство составного типа 
				Значение = Неопределено;
				Для Каждого ПодСвойство Из ЗначениеXDTO.Свойства() Цикл
					
					Если НЕ ЗначениеXDTO.Установлено(ПодСвойство) Тогда
						Продолжить;
					КонецЕсли;
					
					КонвертацияСвойстваXDTOВЭлементСтруктуры(ЗначениеXDTO, ПодСвойство, Приемник, ИмяСвойства);
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка чтения объекта XDTO, имя свойства: <%1>.'"), ИмяСвойства)
			+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	
	Если ТипЗнч(СвойствоXDTO.Тип) = Тип("ТипОбъектаXDTO")
		И СвойствоXDTO.Тип.Свойства.Количество() = 1 Тогда
		
		Возврат СвойствоXDTO.Тип.Свойства[0].ВерхняяГраница <> 1;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ТаблицаОбъектаПоТипу(Знач Тип)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из Тип.Свойства Цикл
		
		Если СтрНайти(Колонка.Тип.Имя, "ОбщиеСвойства") > 0 Тогда
			
			Для Каждого ПодКолонка Из Колонка.Тип.Свойства Цикл
				
				Результат.Колонки.Добавить(ПодКолонка.Имя);
				
			КонецЦикла;
			
		Иначе
			Результат.Колонки.Добавить(Колонка.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПрочитатьЗначениеXDTO(ЗначениеXDTO)
	
	Если ЗначениеXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоСсылкаXDTO(ЗначениеXDTO.Тип()) Тогда // Конвертация ссылки
		Значение = ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеXDTO, "Ссылка");
	Иначе // Конвертация обычного значения.
		Значение = ЗначениеXDTO.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЭтоСсылкаXDTO(Знач Тип)
	
	Возврат ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Ref").ЭтоПотомок(Тип);
	
КонецФункции

Функция XMLБазоваяСхема()
	
	Возврат "http://mes.fordsollers.com/Exchange/Message";
	
КонецФункции

Функция ПрочитатьЗначениеXDTOСложногоТипа(ЗначениеXDTO, СложныйТип)
	
	СтруктураXDTO = Новый Структура;
	СтруктураXDTO.Вставить("ЭтоСсылка", СложныйТип = "Ссылка");
	СтруктураXDTO.Вставить("ЭтоПеречисление", СложныйТип = "Перечисление");
	СтруктураXDTO.Вставить("ТипЗначенияXDTO", ЗначениеXDTO.Тип());
	СтруктураXDTO.Вставить("Значение", ЗначениеXDTO.Значение);

	Возврат СтруктураXDTO;
	
КонецФункции

Процедура КонвертацияСвойстваСтруктурыОбъектаXDTO(ДанныеXDTO, ПриемникДанных, ПКС)
	
	ЗначениеСвойства = "";
	Попытка
			
		Если Не ЗначениеЗаполнено(ПКС.СвойствоФормата) Тогда
			Возврат;
		КонецЕсли;
		
		Если ПКС.ОбработкаКлючевогоСвойства Тогда
			ИсточникДанных = ДанныеXDTO.КлючевыеСвойства;
		Иначе
			ИсточникДанных = ДанныеXDTO;
		КонецЕсли;
		
		СвойствоФормата_Имя = СокрЛП(ПКС.СвойствоФормата);
		ПозицияТочки = СтрНайти(СвойствоФормата_Имя, ".");
		// Указано полное имя свойства, входящего в группу общих свойств.
		Если ПозицияТочки > 0 Тогда
			ВложенныеСвойства = СтрРазделить(СвойствоФормата_Имя,".",Ложь);
			ПолучитьЗначениеВложенныхСвойств(ИсточникДанных, ВложенныеСвойства, ЗначениеСвойства);
		Иначе
			ИсточникДанных.Свойство(СвойствоФормата_Имя, ЗначениеСвойства);
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура") Тогда
			Если НЕ ЗначениеСвойства.Свойство("Ссылка") Тогда
				Возврат;
			КонецЕсли;
			ЗначениеСвойства = ЗначениеСвойства.Ссылка;
		КонецЕсли;
		ПриемникДанных[ПКС.СвойствоКонфигурации] = ЗначениеСвойства;
				
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка конвертации свойства объекта XDTO, имя свойства: <%1>.'"), ПКС.СвойствоКонфигурации)
			+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры


Процедура ПолучитьЗначениеВложенныхСвойств(ИсточникСвойства, ВложенныеСвойства, ЗначениеСвойства)
	ТекущийИсточникСвойства = ИсточникСвойства;
	ТекущееЗначениеСвойства = Неопределено;
	Для Уровень = 0 По ВложенныеСвойства.Количество()-1 Цикл
		Если НЕ ТекущийИсточникСвойства.Свойство(ВложенныеСвойства[Уровень], ТекущееЗначениеСвойства) Тогда
			Прервать;
		КонецЕсли;
		Если Уровень = ВложенныеСвойства.Количество()-1 Тогда
			ЗначениеСвойства = ТекущееЗначениеСвойства;
		ИначеЕсли ТипЗнч(ТекущееЗначениеСвойства) <> Тип("Структура") Тогда
			Прервать;
		Иначе
			ТекущийИсточникСвойства = ТекущееЗначениеСвойства;
			ТекущееЗначениеСвойства = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
