
Процедура АвтоматическоеУправлениеКомпаниямиПриЗаписи(Источник, Отказ, Замещение) Экспорт
	//Если ПараметрыСеанса.ОтключитьОбработчикиПроведенияЗаказаПоТочкеРегистрации Тогда
	//	Возврат;
	//КонецЕсли;
	//
	Если Источник.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаДанных = Источник.Выгрузить(,"ВидДвижения,ТочкаРегистрации,Регистратор");
	ТаблицаДанных.Свернуть("ВидДвижения,ТочкаРегистрации,Регистратор");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	
		"ВЫБРАТЬ
		|	ТаблицаРегистра.ВидДвижения,
		|	ТаблицаРегистра.ТочкаРегистрации,
		|	ТаблицаРегистра.Регистратор
		|ПОМЕСТИТЬ ТаблицаРегистра
		|ИЗ
		|	&ТаблицаРегистра КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Регистратор
		|ПОМЕСТИТЬ Исходная
		|ИЗ
		|	ТаблицаРегистра КАК ТаблицаРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АвтоматическоеУправлениеКампаниями КАК АвтоматическоеУправлениеКампаниями
		|		ПО ТаблицаРегистра.ТочкаРегистрации = АвтоматическоеУправлениеКампаниями.ТочкаРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НетиповыеОбменыДанными.Ссылка
		|ПОМЕСТИТЬ Обмен
		|ИЗ
		|	Справочник.НетиповыеОбменыДанными КАК НетиповыеОбменыДанными
		|ГДЕ
		|	НетиповыеОбменыДанными.ИмяОбработкиОбмена = &ИмяОбработкиОбмена
		|	И НетиповыеОбменыДанными.ВключитьРегистрациюИзмененийВПланеОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Обмен.Ссылка КАК Обмен,
		|	Исходная.Регистратор
		|ИЗ
		|	Обмен КАК Обмен,
		|	Исходная КАК Исходная";
	
	Запрос.УстановитьПараметр("ТаблицаРегистра",ТаблицаДанных);
	Запрос.УстановитьПараметр("ИмяОбработкиОбмена",Метаданные.Обработки.АвтоматическоеУправлениеКомпаниями.Имя);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			ЗарегистрироватьИзмененияОбъектаВПланеОбмена(Выборка.Регистратор,Выборка.Обмен);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура АвтоматическаяУстановкаКонсернов(Источник, Отказ, РежимПроведения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаАвтоматическойУстановкиКонсерновСрезПоследних.Правило КАК Правило,
		|	ПравилаАвтоматическойУстановкиКонсерновСрезПоследних.Правило.ФормулаПрименимости КАК ФормулаПрименимости
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическойУстановкиКонсернов.СрезПоследних(, ТочкаРегистрацииMES = &ТочкаРегистрации) КАК ПравилаАвтоматическойУстановкиКонсерновСрезПоследних
		|ГДЕ
		|	(ПравилаАвтоматическойУстановкиКонсерновСрезПоследних.ПоследнийЗаказ = &Заказ
		|			ИЛИ ПравилаАвтоматическойУстановкиКонсерновСрезПоследних.Действует)";
	
	Запрос.УстановитьПараметр("ТочкаРегистрации", Источник.ТочкаРегистрации);
	Запрос.УстановитьПараметр("Заказ", Источник.Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствуетФормулеПрименимости = Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(
			Выборка.ФормулаПрименимости,
			Источник.Заказ);
			
		Если СоответствуетФормулеПрименимости Тогда
			МассивОбменов = Справочники.НетиповыеОбменыДанными.ПолучитьОбменыПоИмениОбработки(
				Метаданные.Обработки.АвтоматическаяУстановкаКонсернов.Имя);
			Для каждого ВидВыгрузкиДанных Из МассивОбменов Цикл
				НетиповыеОбмены.ЗарегистрироватьИзмененияОбъектаВПланеОбмена(Источник.Ссылка, ВидВыгрузкиДанных);
			КонецЦикла;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияОбъектаВПланеОбмена(ВыгружаемыйОбъект,ВидВыгрузкиДанных) Экспорт
	
	// может регистрация выгрузки по этому обмену не включена для планов обмена?
	Если Не ВидВыгрузкиДанных.ВключитьРегистрациюИзмененийВПланеОбмена Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ВидВыгрузкиДанных.УзелРегистрацииИзменений) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(ВидВыгрузкиДанных.СобытиеЖурналаРегистрации,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,"Не заполнен реквизит ""Узел регистрации изменений"" нетипового обмена """+ВидВыгрузкиДанных+""". Невозможно зарегистрировать """+ВыгружаемыйОбъект+""" для выгрузки.");
		Возврат;
	КонецЕсли;
	
	//регистрация в плане обмена НетиповыеОбмены
	Если ВидВыгрузкиДанных.УзелРегистрацииИзменений.Метаданные().Состав.Найти(ВыгружаемыйОбъект.Метаданные()) <> Неопределено Тогда
		//// если это набор записей, то его надо регистрировать по особенному...
		Если НЕ ЗначениеЗаполнено(ВыгружаемыйОбъект) Тогда
			Возврат;
		КонецЕсли;
		ПланыОбмена.ЗарегистрироватьИзменения(ВидВыгрузкиДанных.УзелРегистрацииИзменений, ВыгружаемыйОбъект);
		РаботасОбменомДанными.ЗапуститьРеглЗадание(ВидВыгрузкиДанных);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапроса_ВыгружаемыеДокументыПоУзлуНетиповогоОбмена() экспорт
        ТекстЗапроса = "";
		ТипыРегистраторовДвиженийЗаказов = Метаданные.РегистрыНакопления.ДвижениеЗаказов.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,СТРОКА(ТипыРегистраторовДвиженийЗаказов));
		ПерваяСтрока = Истина;

		Для Каждого ТипРегистратора Из ТипыРегистраторовДвиженийЗаказов Цикл
			Док = Новый (ТипРегистратора);
			Если ПланыОбмена.НетиповыеОбмены.ПустаяСсылка().Метаданные().Состав.Найти(Док.Метаданные()) <> Неопределено Тогда
				РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,1);
				ИмяДока = Док.Метаданные().Имя;
				Если ПерваяСтрока Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ТаблицаДокументаИзменения.Ссылка КАК ВыгружаемыйОбъект
					|ПОМЕСТИТЬ НовыеДвиженияПоКонвейеру
					|ИЗ
					|	Документ."+ИмяДока+".Изменения КАК ТаблицаДокументаИзменения
					|ГДЕ
					|	ТаблицаДокументаИзменения.Узел = &Узел
					|";
					ПерваяСтрока = Ложь;
				Иначе
					ТекстЗапроса = ТекстЗапроса + "
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ТаблицаДокументаИзменения.Ссылка
					|ИЗ
					|	Документ."+ИмяДока+".Изменения КАК ТаблицаДокументаИзменения
					|ГДЕ
					|	ТаблицаДокументаИзменения.Узел = &Узел";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	Возврат ТекстЗапроса;
КонецФункции // ПолучитьТекстЗапроса_ВыгружаемыеДокументыПоУзлуНетиповогоОбмена()


Функция ЗарегистрироватьВыгрузкуОбъектовИзПланаОбмена(ВидВыгрузки,ВыгружаемыеОбъекты,НомерВыгрузки = Неопределено,ТекстОшибки = "",ТекстСтатистикаОбъектовПоВидам = "", ТекстПредупреждение = "") Экспорт
	
	Попытка
		Узел = ВидВыгрузки.УзелРегистрацииИзменений;
		// может регистрация выгрузки по этому обмену не включена для планов обмена?
		Если Не ВидВыгрузки.ВключитьРегистрациюИзмененийВПланеОбмена Тогда
			Возврат Ложь;
		КонецЕсли;
		// может регистрация выгрузки по этому обмену не включена для планов обмена?
		Если Не ЗначениеЗаполнено(Узел) Тогда
			ТекстОшибки = НСтр("ru='В нетиповом обмене ';en='In the atypical exchange '")+ВидВыгрузки+НСтр("ru=' не заполнен узел регистрации изменений';en=' node of registration of changes is not filled'");
			Возврат Ложь;
		КонецЕсли;
		
		
		
		Если ТипЗнч(ВыгружаемыеОбъекты) = Тип("СписокЗначений") Тогда
			флПроверятьНаличиеОтметкиОшибкиПриВыгрузке = Истина;
			// если нам передали выгружаемые объекты в виде списка значений и у значения будет установлена отметка, 
			// то будем ее отразим ее как признак наличия ошибки при выгрузке этого объекта
		Иначе	
			флПроверятьНаличиеОтметкиОшибкиПриВыгрузке = Ложь;
		КонецЕсли;
		
		СтатистикаОбъектов = новый ТаблицаЗначений;
		СтатистикаОбъектов.Колонки.Добавить("ВидДокумента");
		СтатистикаОбъектов.Колонки.Добавить("КоличествоДокументов");
		СтатистикаОбъектов.Колонки.Добавить("КоличествоДокументовСОшибкойПриВыгрузке");
		Если ТипЗнч(ВыгружаемыеОбъекты) = Тип("ТаблицаЗначений") тогда
			МассивОбъектовВыгрузки = ВыгружаемыеОбъекты.Скопировать(,"ВыгружаемыйОбъект");
			МассивОбъектовВыгрузки.Свернуть("ВыгружаемыйОбъект");
			МассивОбъектовВыгрузки = МассивОбъектовВыгрузки.ВыгрузитьКолонку("ВыгружаемыйОбъект");			
		Иначе
			МассивОбъектовВыгрузки = ВыгружаемыеОбъекты;	
		КонецЕсли;

		Для каждого ЭлементКоллекции из МассивОбъектовВыгрузки цикл
			Если флПроверятьНаличиеОтметкиОшибкиПриВыгрузке Тогда
			
				ОбъектВыгрузки = ЭлементКоллекции.Значение;
				ПриВыгрузкеОбъектаВозниклаОшибка = ЭлементКоллекции.Пометка;
				Если ПриВыгрузкеОбъектаВозниклаОшибка Тогда
					ТекстПредупреждение = ТекстПредупреждение + ?(ПустаяСтрока(ТекстПредупреждение),НСтр("ru=' данные, связанные с нижеперечисленными объектами не удалось передать: ';en=' data, connected with the below-enumerated objects failed to transfer: '"),"")+символы.ПС+ОбъектВыгрузки;
				КонецЕсли; 
			Иначе
				ОбъектВыгрузки = ЭлементКоллекции;
				ПриВыгрузкеОбъектаВозниклаОшибка = Ложь;
			КонецЕсли; 
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектВыгрузки);
			
			ТекДата = ТекущаяДата();
			
			Если не Лев(ТипЗнч(ОбъектВыгрузки),7)="Регистр" Тогда
				НаборЗаписейВыгруженныеОбъекты = РегистрыСведений.ВыгруженныеОбъекты.СоздатьНаборЗаписей();
				НаборЗаписейВыгруженныеОбъекты.Отбор.Период.Установить(ТекДата);
				НаборЗаписейВыгруженныеОбъекты.Отбор.ВидОбмена.Установить(ВидВыгрузки);
				НаборЗаписейВыгруженныеОбъекты.Отбор.Объект.Установить(ОбъектВыгрузки);
				
				ЗапиьРегистра = НаборЗаписейВыгруженныеОбъекты.Добавить();
				ЗапиьРегистра.Период = ТекДата;
				ЗапиьРегистра.ВидОбмена = ВидВыгрузки;
				ЗапиьРегистра.Объект = ОбъектВыгрузки;
				Если НомерВыгрузки <> Неопределено Тогда
					ЗапиьРегистра.НомерВыгрузки = НомерВыгрузки;
				КонецЕсли;
				ЗапиьРегистра.ПриВыгрузкеВозниклаОшибка = ПриВыгрузкеОбъектаВозниклаОшибка;
				
				НаборЗаписейВыгруженныеОбъекты.Записать();
			КонецЕсли;
			
			
			ВидДокумента = ""+ТипЗНЧ(ОбъектВыгрузки);
			НайденнаяСтрока = СтатистикаОбъектов.Найти(ВидДокумента,"ВидДокумента");
			Если НайденнаяСтрока = Неопределено Тогда
				новСтрока = СтатистикаОбъектов.Добавить();
				новСтрока.ВидДокумента = ВидДокумента;
				Если ПриВыгрузкеОбъектаВозниклаОшибка Тогда
					новСтрока.КоличествоДокументовСОшибкойПриВыгрузке = 1;
				Иначе
					новСтрока.КоличествоДокументов = 1;
				КонецЕсли; 
			Иначе
				Если ПриВыгрузкеОбъектаВозниклаОшибка Тогда
					НайденнаяСтрока.КоличествоДокументовСОшибкойПриВыгрузке = НайденнаяСтрока.КоличествоДокументовСОшибкойПриВыгрузке + 1;
				Иначе
					НайденнаяСтрока.КоличествоДокументов = НайденнаяСтрока.КоличествоДокументов + 1;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;
		
		Если СтатистикаОбъектов.Количество() > 1 Тогда
			ТекстСтатистикаОбъектовПоВидам = НСтр("ru='Выгружено объектов: ';en='Uploaded object: '")+СтатистикаОбъектов.Итог("КоличествоДокументов");
			ТекстСтатистикаОбъектовПоВидам = ТекстСтатистикаОбъектовПоВидам + символы.ПС + НСтр("ru='в том числе: ';en='including: '");
			Для каждого строкаДок Из СтатистикаОбъектов Цикл
				ТекстСтатистикаОбъектовПоВидам = ТекстСтатистикаОбъектовПоВидам +символы.ПС + """"+строкаДок.ВидДокумента+""" : "+строкаДок.КоличествоДокументов;
			КонецЦикла; 
		ИначеЕсли СтатистикаОбъектов.Количество() = 1 Тогда
			ТекстСтатистикаОбъектовПоВидам = НСтр("en='Uploaded objects of the kind ""';ru='Выгружено объектов вида ""'")+СтатистикаОбъектов[0].ВидДокумента+""": "+СтатистикаОбъектов.Итог("КоличествоДокументов");
		ИначеЕсли СтатистикаОбъектов.Количество()=0 Тогда	
			ТекстСтатистикаОбъектовПоВидам = НСтр("ru='Выгружено 0 объектов';en='0 objects were uploaded'");
		КонецЕсли; 
		
		Возврат Истина;
	
	Исключение
		
        ТекстОшибки = ТекстОшибки + ОписаниеОшибки()+символы.ПС;
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции
