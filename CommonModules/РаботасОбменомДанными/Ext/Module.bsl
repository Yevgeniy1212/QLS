
Функция ЕстьНеудовлетвореннаяПотребностьВПолученииУчетныхДанных(НастройкаОбмена)
	времИмяПользователя = "";
	Если НастройкаОбмена.Свойство("GUID_УчетнойЗаписи") и НастройкаОбмена.GUID_УчетнойЗаписи<>Неопределено Тогда
		 	
	// проверка успешности получения учетных данных из внешней системы
		НастройкаОбмена.Свойство("ИмяПользователя",времИмяПользователя);
		Если ПустаяСтрока(времИмяПользователя) Тогда
			// ага, получить учетные данные не удалось
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаОбмена.Свойство("ЭлементыНастроек") и НастройкаОбмена.ЭлементыНастроек.Количество()>0 Тогда
		Для каждого ЭлементНастроек Из НастройкаОбмена.ЭлементыНастроек Цикл
			Если ЭлементНастроек.Свойство("GUID_УчетнойЗаписи") и ЭлементНастроек.GUID_УчетнойЗаписи <> Неопределено Тогда
				ЭлементНастроек.Свойство("ИмяПользователя",времИмяПользователя);
				Если ПустаяСтрока(времИмяПользователя) Тогда
					// ага, получить учетные данные не удалось
					Возврат Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
 
Функция ВыполнениеОбмена(ОбработкаОбмена,Знач НастройкаОбмена_ЭлементСправочника,ДопПараметр=Неопределено,Событие = Неопределено) Экспорт
	РезультатОбмена = Неопределено;
	IDCеансаОперации = Неопределено;
	Попытка
		РезультатОбмена = ВыполнениеОбмена_ОсновнаяЛогика(ОбработкаОбмена,НастройкаОбмена_ЭлементСправочника,ДопПараметр,Событие);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗарегистрироватьОкончаниеОперации(НастройкаОбмена_ЭлементСправочника,IDCеансаОперации,ТекстОшибки);
		ВызватьИсключение ;
	КонецПопытки;
	
	ЗарегистрироватьОкончаниеОперации(НастройкаОбмена_ЭлементСправочника,IDCеансаОперации);
	Возврат РезультатОбмена;
КонецФункции 

Функция ВыполнениеОбмена_ОсновнаяЛогика(ОбработкаОбмена,Знач НастройкаОбмена_ЭлементСправочника,ДопПараметр=Неопределено,Событие = Неопределено)
	
	перем уровеньСообщения,ТекстСообщения;
	перем ВК_маркеров,ИмяМаркера; //Softpoint
	
	ТекстСообщения = "";
	Если Событие = Неопределено Тогда
		Событие = НастройкаОбмена_ЭлементСправочника.СобытиеЖурналаРегистрации;
		Если Не ЗначениеЗаполнено(Событие) Тогда
			ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена_ЭлементСправочника.Наименование+""" не указано значение события журнала регистрации.";
			РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
			ВызватьИсключение ТекстСообщения;
		КонецЕсли; 
	КонецЕсли;
	
	РегистрироватьНачалоОбменаВЖурнале = НастройкаОбмена_ЭлементСправочника.РегистрироватьНачалоОбменаВЖурналеСобытий;	
	Если НастройкаОбмена_ЭлементСправочника.ИзмерятьДлительностьВыполненияОбмена Тогда
	
		ВремяНачалаОбмена = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	КонецЕсли;
	
	НастройкаОбмена = ПолучитьСводнуюНастройкуНетиповогоОбмена(НастройкаОбмена_ЭлементСправочника,ТекстСообщения);
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
	КонецЕсли; 
	
	Если ЕстьНеудовлетвореннаяПотребностьВПолученииУчетныхДанных(НастройкаОбмена) Тогда
		Если НастройкаОбмена.АварийноеЗавершениеРегламентногоЗаданияЕслиЕстьОшибкаПолученияУчетныхДанныхИзPMS Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Возврат ТекстСообщения;
	КонецЕсли; 
	
	Если РегистрироватьНачалоОбменаВЖурнале Тогда
		ТекстСообщения = "Начало обмена";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Информация,ТекстСообщения);	
	КонецЕсли; 
	
	Если Не Справочники.НетиповыеОбменыДанными.ОбменЗапускаетсяВРазрешенноеВремя(НастройкаОбмена) Тогда
		Сообщение = "Запуск обмена не разрешен.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Информация,Сообщение);	
		Возврат Сообщение;
	КонецЕсли;
	
	Если НастройкаОбмена.ЛогироватьПолученноеСообщение И ЗначениеЗаполнено(ДопПараметр) Тогда
		ЛогируемоеСообщение = "Полученное сообщение: " + Символы.ПС + ОбщегоНазначения.ЗначениеВСтрокуXML(ДопПараметр);
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Информация,ЛогируемоеСообщение);	
	КонецЕсли;
	
	ПроизошлаОшибкаВыполненияОбмена = Ложь;
	Попытка
		Если ДопПараметр = Неопределено Тогда
			РезультатОбмена =  ОбработкаОбмена.ВыполнитьОбмен(Событие,НастройкаОбмена);
		Иначе	
			РезультатОбмена =  ОбработкаОбмена.ВыполнитьОбмен(Событие,НастройкаОбмена,ДопПараметр);
		КонецЕсли;
	Исключение
	    ПроизошлаОшибкаВыполненияОбмена = Истина;
		РезультатОбмена = ОписаниеОшибки();
	КонецПопытки;
	
	//В этом регистре периодически возникают блокировки, поэтому пишем сюда только нужную информацию. Обмен закончил выполняться - ставим реквизит "Выполняется" в ложь
	Если НастройкаОбмена.СохранятьВремяНачалаИОкончанияОбмена Тогда
		РегистрацияВремениВыполненияОбмена = РегистрыСведений.ВремяПоследнегоЗапускаОбменов.СоздатьМенеджерЗаписи();
		РегистрацияВремениВыполненияОбмена.ОбменДанными = НастройкаОбмена_ЭлементСправочника;
		РегистрацияВремениВыполненияОбмена.Дата = ТекущаяДата();
		РегистрацияВремениВыполненияОбмена.Записать();
	КонецЕсли;
	
	Если НастройкаОбмена.ИзмерятьДлительностьВыполненияОбмена Тогда
	
		ВремяОкончанияОбмена = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ДлительностьОбмена = ВремяОкончанияОбмена - ВремяНачалаОбмена;
		Если ДлительностьОбмена/1000 > НастройкаОбмена.ПороговаяДлительностьОбмена Тогда
			ДопСтатистика = "";
			Если ДопПараметр <> Неопределено Тогда
				Если ТипЗнч(ДопСтатистика)= Тип("Структура") Тогда
					Если Не ДопСтатистика.Свойство("Статистика",ДопСтатистика) Тогда
						ДопСтатистика = "";
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "Длительность обмена: "+ДлительностьОбмена/1000+ " сек.";
			РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Информация,ТекстСообщения);	
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПроизошлаОшибкаВыполненияОбмена Тогда
	    ВызватьИсключение РезультатОбмена;
	КонецЕсли;
	Возврат РезультатОбмена;
КонецФункции 

Процедура УниверсальныйЗапускНетиповогоОбмена(НетиповойОбменGUID) Экспорт
	НастройкаОбмена = Справочники.НетиповыеОбменыДанными.ПолучитьСсылку(Новый УникальныйИдентификатор(НетиповойОбменGUID));
	
	// определим событие обмена
	Событие = НастройкаОбмена.СобытиеЖурналаРегистрации;
	Если Не ЗначениеЗаполнено(Событие) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указано значение события журнала регистрации.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	// определим обработку обмена
	ИмяОбработкиОбмена = НастройкаОбмена.ИмяОбработкиОбмена;
	Если Не ЗначениеЗаполнено(ИмяОбработкиОбмена) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указана обработка обмена";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	Попытка
		ОбработкаОбмена = Обработки[ИмяОбработкиОбмена];
	Исключение
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" указана несуществующая обработка обмена """+ИмяОбработкиОбмена+"""";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	//считаем обработку обмена
	Попытка
		ОписаниеОбработкиОбмена = ОбработкаОбмена.ПолучитьОписаниеОбработкиОбмена();
	Исключение
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" некорректная обработка обмена """+ИмяОбработкиОбмена+"""";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	// проверки, основанные с описанием обработки обмена
	Если ОписаниеОбработкиОбмена.XML_НастройкаОбязательна Тогда
	
		Если ПустаяСтрока(НастройкаОбмена.НастройкиОбмена) Тогда
			ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не заданы настройки подключения.";
			РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	
	КонецЕсли;
	
	ВыполнениеОбмена(ОбработкаОбмена,НастройкаОбмена,,Событие);
КонецПроцедуры

Функция ПолучитьИмяСервера_ИБ() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	Результат = новый Структура;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияСБД) Тогда
		Возврат Неопределено;
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = ИмяИБНаСервере;
		Результат.Вставить("Сервер",ВРЕГ(ИмяСервера));
		Результат.Вставить("ИБ",ВРЕГ(ИмяИБНаСервере));
		Возврат Результат;
	КонецЕсли;
	
КонецФункции
 
Функция РасшифроватьФайл(ПутьКЗашифрованномуФайлу,ТекстСообщения)
	
	// проверим наличие ключа для расшифровки файла
	ПутьКСекретномуКлючу = Константы.ПутьКФайлуСКлючомДляРасшифровкиФайлаНастроекОбмена.Получить();
	НайденныеФайлы = НайтиФайлы(ПутьКСекретномуКлючу);	
	Если НайденныеФайлы.Количество()=0 Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС +"Файл <"+ПутьКСекретномуКлючу+">, содержащий ключ для расшифровки файла настроек обмена данными не найден.";
		Возврат Неопределено;
	КонецЕсли; 
	
	ПутьКРасшифрованномуФайлу = ПолучитьИмяВременногоФайла();
	ПутьКЛогуРасшифровки = ПолучитьИмяВременногоФайла();
	
	// сохраним из макета в файл программу шифрования	
	ПутьКПрограммеРасшифровки = ПолучитьИмяВременногоФайла("exe");
	ПрограммаШифрования=получитьобщиймакет("УтилитаШифрования_fmccrypt");
	ПрограммаШифрования.Записать(ПутьКПрограммеРасшифровки);
	Попытка
		ЗапуститьПриложение(ПутьКПрограммеРасшифровки +" -D """+ ПутьКСекретномуКлючу+ """ -f """ +СокрЛП(ПутьКЗашифрованномуФайлу)+ """ -o """+СокрЛП(ПутьКРасшифрованномуФайлу)+""" > """+ПутьКЛогуРасшифровки+"""",,истина);
		УдалитьФайлы(ПутьКПрограммеРасшифровки);
	Исключение
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Ошибка расшифровки файла <"+ПутьКЗашифрованномуФайлу+">. Причина: "+ОписаниеОшибки();
	КонецПопытки;
	
	
	// Проверим, появился ли расшифрованный файл
	НайденныеФайлы = НайтиФайлы(ПутьКРасшифрованномуФайлу);	
	Если НайденныеФайлы.Количество()>0 Тогда
		// все хорошо, файл расшифрован
		УдалитьФайлы(ПутьКЛогуРасшифровки);  
		Возврат ПутьКРасшифрованномуФайлу;
	Иначе
		// получим содержимое лога		
		ТекстОшибки = "";
		FSOFtpLog = ПолучитьCOMОбъект("","Scripting.FileSystemObject");
		Попытка
			FtpLogFile = FSOFtpLog.OpenTextFile(ПутьКЛогуРасшифровки, 1);
			ЛогПередачиФайла = "";
			Пока НЕ(FtpLogFile.AtEndOfStream) Цикл
				ТекСтр = СокрЛП(FtpLogFile.ReadLine());
				ЛогПередачиФайла = ЛогПередачиФайла + символы.ПС + ТекСтр;
			КонецЦикла;
			FtpLogFile.Close();
			FtpLogFile = 0;
		Исключение
			ТекстОшибки = "Лог-файл процесса расшифровки по какой-то причине не был создан.";
		КонецПопытки;
		
		
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Ошибка расшифровки файла <"+ПутьКЗашифрованномуФайлу+">. Ниже приведено содержимое лога процесса расшифровки:"+символы.ПС+ЛогПередачиФайла;
		Иначе
			ТекстСообщения = ТекстСообщения + Символы.ПС + "Ошибка расшифровки файла <"+ПутьКЗашифрованномуФайлу+">. "+ТекстОшибки;
		КонецЕсли; 
		
		УдалитьФайлы(ПутьКЛогуРасшифровки);
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
КонецФункции // РасшифроватьФайл(КаталогХраненияНастроекОбмена+ИмяФайлаНастроек,ТекстСообщения)()

Функция ПолучитьДанныеУчетнойЗаписи_ШифрованныйФайл(Знач GUID_УчетнойЗаписи,ТекстСообщения)
	
	
	// определим имя файла с настройками и проверим, есть ли он в каталоге настроек
	КаталогХраненияНастроекОбмена = Константы.КаталогХраненияНастроекОбмена.Получить();
	Если ПустаяСтрока(КаталогХраненияНастроекОбмена) Тогда
		ТекстСообщения = "Константа ""Каталог хранения настроек обмена"" не заполнена. Обратитесь к консультантам.";
		Возврат Неопределено;
	КонецЕсли; 
	Если Найти("/\",Прав(КаталогХраненияНастроекОбмена,1))=0 Тогда
		КаталогХраненияНастроекОбмена = КаталогХраненияНастроекОбмена+"/";
	КонецЕсли; 
	КаталогХраненияНастроекОбмена = СтрЗаменить(КаталогХраненияНастроекОбмена,"\","/");
	
	Сервер_ИмяИБ = ПолучитьИмяСервера_ИБ();  
	Если Сервер_ИмяИБ = Неопределено Тогда
		ТекстСообщения = "Текущая информационная база является файловой. Обмен данными разрешен только в клиент-серверной ИБ";
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Найти(Сервер_ИмяИБ.Сервер,",") Тогда
		ИмяСервера = ОбщегоНазначенияQLS.РазобратьСтроку(Сервер_ИмяИБ.Сервер,",")[0]; 
	Иначе	
		ИмяСервера = Сервер_ИмяИБ.Сервер;
	КонецЕсли; 
	ИмяФайлаНастроек = "Exchange settings for server *["+ИмяСервера+"]* database ["+Сервер_ИмяИБ.ИБ+"].xml";
	НайденныеФайлы = НайтиФайлы(КаталогХраненияНастроекОбмена,ИмяФайлаНастроек);	
	ПрефиксСообщения = "Файл настроек обмена """+ИмяФайлаНастроек+""" в каталоге """+КаталогХраненияНастроекОбмена+""" ";
	Если НайденныеФайлы.Количество()=0 Тогда
		ТекстСообщения = ПрефиксСообщения+"не найден.";
		Возврат Неопределено;
	КонецЕсли; 
	
	ПутьКРасшифрованномуФайлу = РасшифроватьФайл(КаталогХраненияНастроекОбмена+НайденныеФайлы[0].Имя,ТекстСообщения);
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	//ПутьКРасшифрованномуФайлу = КаталогХраненияНастроекОбмена+НайденныеФайлы[0].Имя;
	
	ТекстовыйФайл = новый ТекстовыйДокумент;
	
	Попытка
		ТекстовыйФайл.Прочитать(ПутьКРасшифрованномуФайлу,КодировкаТекста.UTF8);
	Исключение
		ТекстСообщения = ПрефиксСообщения+", ошибка чтения: "+ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	ВсегоСтрок = ТекстовыйФайл.КоличествоСтрок();
	Для НомерСтроки = 1 По ВсегоСтрок Цикл
	
		ТекСтрока = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки);
		УчетнаяЗапись = ОбщегоНазначенияQLS.РазобратьСтроку(ТекСтрока,"|");
		Если УчетнаяЗапись.Количество()<3 Тогда
			Продолжить;
		КонецЕсли; 
		ТекGUID = УчетнаяЗапись[0];
		Если СОКРЛП(GUID_УчетнойЗаписи)=СОКРЛП(ТекGUID) Тогда
			Возврат Новый Структура("ИмяПользователя,Пароль",УчетнаяЗапись[1],УчетнаяЗапись[2]);
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = ПрефиксСообщения+", данные учетной записи для GUID """+GUID_УчетнойЗаписи+""" не найдены";
	Возврат Неопределено;
	
КонецФункции // ПолучитьДанныеУчетнойЗаписи()
Функция ПолучитьДанныеУчетнойЗаписи_PMS(Знач GUID_УчетнойЗаписи,ТекстСообщения)
	
	ДопПараметры = Новый Структура("GUID_УчетнойЗаписи,ИмяПользователя,Пароль,СообщениеОбОшибке",GUID_УчетнойЗаписи,"","","");
	
	Попытка
		РаботасОбменомДанными.ВыполнениеОбмена(Обработки.ЗагрузкаGET_FROM_PMS_USER_CREDENTIALS,
										   Справочники.НетиповыеОбменыДанными.GET_FROM_PMS_USER_CREDENTIALS,ДопПараметры);
		Если Не ПустаяСтрока(ДопПараметры.СообщениеОбОшибке) Тогда
		
			ТекстСообщения = "Ошибка получения имени пользователя и пароля по GUID учетной записи: "+ДопПараметры.СообщениеОбОшибке;
			Возврат Неопределено;
		Иначе
			Возврат ДопПараметры;
		КонецЕсли;
	Исключение
		ТекстСообщения = "Ошибка получения имени пользователя и пароля по GUID учетной записи: "+ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
										   
КонецФункции // ПолучитьДанныеУчетнойЗаписи()

Функция ПолучитьДанныеУчетнойЗаписи(Знач GUID_УчетнойЗаписи,ТекстСообщения) Экспорт
	
	Если Константы.ПолучатьУчетныеДанныеПользователяИзPMS.Получить() Тогда
		Возврат ПолучитьДанныеУчетнойЗаписи_PMS(GUID_УчетнойЗаписи,ТекстСообщения);
	Иначе	
		Возврат ПолучитьДанныеУчетнойЗаписи_ШифрованныйФайл(GUID_УчетнойЗаписи,ТекстСообщения);
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеУчетнойЗаписи()

Функция ПолучитьДанныеXML_ExchangeSettings(СтрокаСXML,ТекстОшибки) Экспорт

	
	ВидОбменаТип = ФабрикаXDTO.Тип("http://localhost/WS/Exchange_Settings","НастройкиОбмена");
	ЧтениеXML = новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаСXML);
		Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ВидОбменаТип);
		Возврат Данные;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	

КонецФункции // ПолучитьДанныеXML_ExchangeSettings(СтрокаСXML)()

Процедура СчитатьВСтруктуруСвойстваУзла(СтруктураПриемник,УзелИсточник,УзелСОбщимиНастройками,ТекстОшибки,РежимЗаполненияСвойствПоСсылкеНаОбщуюНастройку=Ложь,ОбращатьсяВPMS_ВСлучаеНеобходимости=Истина)

	СвойстваУзла = УзелИсточник.Свойства();
	ДанныеУчетнойЗаписи = Неопределено;
	
	
	Если не РежимЗаполненияСвойствПоСсылкеНаОбщуюНастройку и ЗначениеЗаполнено(УзелИсточник.ИдентификаторОбщейНастройки) Тогда
	    // если указан идентификатор общей настройки, то сначала загрузим свойства из этой общей настройки
		Если УзелСОбщимиНастройками = Неопределено Тогда
			ТекстОшибки = "В XML-настройках обмена указана ссылка на элемент общих настроек, но в данной ИБ такие настройки не заданы";
			возврат;
		Иначе
			флНашлиЭлементОбщихНастроек = Ложь;
			Для каждого ЭлементОбщихНастроек Из УзелСОбщимиНастройками.ЭлементНастроек Цикл
				Если ВРЕГ(ЭлементОбщихНастроек.Идентификатор) = ВРЕГ(УзелИсточник.ИдентификаторОбщейНастройки) Тогда
					флНашлиЭлементОбщихНастроек = Истина;
					СчитатьВСтруктуруСвойстваУзла(СтруктураПриемник,ЭлементОбщихНастроек,УзелСОбщимиНастройками,ТекстОшибки,Истина,ОбращатьсяВPMS_ВСлучаеНеобходимости);
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						Возврат;
					КонецЕсли;
					прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не флНашлиЭлементОбщихНастроек Тогда
			ТекстОшибки = "Не удалось найти элемент общих настроек с идентификатором """+УзелИсточник.ИдентификаторОбщейНастройки+"""";
			возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// теперь загрузим свойства текущего узла
	Для каждого СвойствоУзла Из СвойстваУзла Цикл
		ДобавлятьСвойство = Ложь;
		ЗначениеСвойства = УзелИсточник[СвойствоУзла.Имя];
		
		// добавляем свойство в двух случаях
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		// если свойство узла имеет значение 
			ДобавлятьСвойство = Истина;
		Иначе
			// или свойство структуры отсутствует или оно есть, но пустое
			ТекЗначениеСвойства = Неопределено;
			СвойствоУСтруктурыОтсутствует = Не СтруктураПриемник.Свойство(СвойствоУзла.Имя,ТекЗначениеСвойства);
			
			Если СвойствоУСтруктурыОтсутствует или ТекЗначениеСвойства = Неопределено Тогда
				ДобавлятьСвойство = Истина;
			КонецЕсли; 
		КонецЕсли;
		// так как сначала загружаются свойства общей настройки, а потом - свойства узла, то таким образом общие настройки перезатираются настройками узла в обмене
		
		
		Если ДобавлятьСвойство Тогда
			СтруктураПриемник.Вставить(СвойствоУзла.Имя,ЗначениеСвойства);
			
			Если ВРЕГ(СвойствоУзла.Имя) = "GUID_УЧЕТНОЙЗАПИСИ" Тогда
				Если ЗначениеЗаполнено(УзелИсточник.GUID_УчетнойЗаписи) Тогда
					Если ОбращатьсяВPMS_ВСлучаеНеобходимости Тогда
						ДанныеУчетнойЗаписи = ПолучитьДанныеУчетнойЗаписи(УзелИсточник.GUID_УчетнойЗаписи,ТекстОшибки);
					Иначе	
						ДанныеУчетнойЗаписи = Неопределено;
					КонецЕсли; 
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	ИсхИмяПользователя = Неопределено;
	Если ДанныеУчетнойЗаписи <> Неопределено Тогда
		СтруктураПриемник.Вставить("ИмяПользователя",ДанныеУчетнойЗаписи.ИмяПользователя);
		СтруктураПриемник.Вставить("Пароль",ДанныеУчетнойЗаписи.Пароль);
	Иначе	
		Если СтруктураПриемник.Свойство("ИмяПользователя") = Ложь Тогда
			СтруктураПриемник.Вставить("ИмяПользователя","");
		КонецЕсли;
		Если СтруктураПриемник.Свойство("Пароль") = Ложь Тогда
			СтруктураПриемник.Вставить("Пароль","");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СчитатьВСтруктуруЭлементыУзла()

////////////////////////////////////////////////////////////////////////////////
//
// Функция ОбменБеретУчетныеДанныеИзPMS
//
// Описание: функция дает ответ - будет ли указанный обмен обращаться в PMS за учетными данными для авторизации
//
//
// Параметр - ссылка на элемент справочника "Обмены данными"
//
// Возвращаемое значение: булево
//
Функция ОбменБеретУчетныеДанныеИзPMS(НастройкаОбмена_ЭлементСправочника) Экспорт
    Если не ЗначениеЗаполнено(НастройкаОбмена_ЭлементСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;
	ТекстСообщения = "";
	ВнешниеНастройки = ПолучитьВнешниеНастройкиНетиповогоОбмена(НастройкаОбмена_ЭлементСправочника,ТекстСообщения,,Ложь);
	Если ВнешниеНастройки.Свойство("GUID_УчетнойЗаписи") и ВнешниеНастройки.GUID_УчетнойЗаписи <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	Если ВнешниеНастройки.Свойство("ЭлементыНастроек")и ВнешниеНастройки.ЭлементыНастроек.Количество()>0 Тогда
		Для каждого ЭлементНастроек Из ВнешниеНастройки.ЭлементыНастроек Цикл
			Если ЭлементНастроек.Свойство("GUID_УчетнойЗаписи") и ЭлементНастроек.GUID_УчетнойЗаписи <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
КонецФункции //ОбменБеретУчетныеДанныеИзPMS

Функция ПолучитьВнешниеНастройкиНетиповогоОбмена(Знач НастройкаОбмена_ЭлементСправочника,ТекстСообщения,СтруктураНастроек = Неопределено,ОбращатьсяВPMS_ВСлучаеНеобходимости=Истина) экспорт
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = новый Структура;
	КонецЕсли;
	
	ТекстТекОшибки = "";
	
	НастройкиОбмена = "";
	Если Не СтруктураНастроек.Свойство("НастройкиОбмена",НастройкиОбмена) Тогда
		НастройкиОбмена = НастройкаОбмена_ЭлементСправочника.НастройкиОбмена;
	КонецЕсли;
	
	Если ПустаяСтрока(НастройкиОбмена) Тогда
		// настроек нет, нечего обрабатывать
		Возврат СтруктураНастроек;
	Иначе
		НастройкиОбмена_XML =  ПолучитьДанныеXML_ExchangeSettings(НастройкиОбмена,ТекстТекОшибки);
		Если НастройкиОбмена_XML = Неопределено Тогда
			ТекстСообщения = "Ошибка обработки настроек обмена в формате XML:"+Символы.ПС+ТекстТекОшибки;
			Возврат СтруктураНастроек;
		КонецЕсли;
	КонецЕсли;
	Сервер_ИмяИБ = ПолучитьИмяСервера_ИБ();

	Если Сервер_ИмяИБ = Неопределено Тогда
		ТекстСообщения = "Текущая информационная база является файловой. Обмен данными разрешен только в клиент-серверной ИБ";
		Возврат СтруктураНастроек;
	КонецЕсли; 
	
	Если Найти(Сервер_ИмяИБ.Сервер,",") Тогда
		ИмяСервера = ОбщегоНазначенияQLS.РазобратьСтроку(Сервер_ИмяИБ.Сервер,",")[0]; 
	Иначе	
		ИмяСервера = Сервер_ИмяИБ.Сервер;
	КонецЕсли; 
	ТекстТекОшибки = "";
	ОбщиеНастройкиОбменов = Константы.ОбщиеНастройкиОбменов.Получить();
	Если Не ПустаяСТрока(ОбщиеНастройкиОбменов) Тогда
		ОбщиеНастройки_XML =  ПолучитьДанныеXML_ExchangeSettings(ОбщиеНастройкиОбменов,ТекстТекОшибки);
		Если ОбщиеНастройки_XML = Неопределено Тогда
			ТекстСообщения = "Ошибка обработки настроек обмена в формате XML:"+Символы.ПС+ТекстТекОшибки;
			Возврат СтруктураНастроек;
		КонецЕсли;
	Иначе
		// а может они и не понадобятся?...
		ОбщиеНастройки_XML = Неопределено;
	КонецЕсли;
	НастройкиОбмена_XML_НашаИБ = Неопределено;
	ОбщиеНастройки_XML_НашаИБ = Неопределено;
	// теперь найдем узел, соответствующий нашей базе данных
	Для каждого БазаДанных Из НастройкиОбмена_XML.БазаДанных Цикл
		Если Найти(ВРЕГ(БазаДанных.ИмяСервера),ИмяСервера)>0 и ВРЕГ(БазаДанных.ИмяБазыДанных) = Сервер_ИмяИБ.ИБ  Тогда
			НастройкиОбмена_XML_НашаИБ = БазаДанных;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НастройкиОбмена_XML_НашаИБ = Неопределено Тогда
		ТекстСообщения = "В XML-настройках обмена не удалось найти данные для текущей ИБ";
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	Если ОбщиеНастройки_XML <> Неопределено Тогда
		Для каждого БазаДанных Из ОбщиеНастройки_XML.БазаДанных Цикл
			Если Найти(ВРЕГ(БазаДанных.ИмяСервера),ИмяСервера)>0 и ВРЕГ(СОКРЛП(БазаДанных.ИмяБазыДанных)) = Сервер_ИмяИБ.ИБ  Тогда
				ОбщиеНастройки_XML_НашаИБ = БазаДанных;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// теперь переберем все значения узла и занесем их в результирующую структуру 
	
	КоличествоЭлементовНастроек = НастройкиОбмена_XML_НашаИБ.ЭлементНастроек.Количество();
	Если КоличествоЭлементовНастроек = 0 Тогда
		// Элементов настроек нет, делать тут нечего
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// определим узел настроек, из которого элементы попадут в непосредственно в структуру
	
	МассивЭлементов = новый Массив;
	Если КоличествоЭлементовНастроек=1 Тогда
		//либо он единственный, тогда просто берем из него данные
		СчитатьВСтруктуруСвойстваУзла(СтруктураНастроек,НастройкиОбмена_XML_НашаИБ.ЭлементНастроек[0],ОбщиеНастройки_XML_НашаИБ,ТекстСообщения,,ОбращатьсяВPMS_ВСлучаеНеобходимости);
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			Возврат СтруктураНастроек;
		КонецЕсли;
	Иначе
		// а если элементов много - главным будет тот, у которого не указан идентификатор
		Для каждого ТекЭлементНастроек Из НастройкиОбмена_XML_НашаИБ.ЭлементНастроек Цикл
			Если ТекЭлементНастроек.Идентификатор = Неопределено Тогда
				СчитатьВСтруктуруСвойстваУзла(СтруктураНастроек,ТекЭлементНастроек,ОбщиеНастройки_XML_НашаИБ,ТекстСообщения,,ОбращатьсяВPMS_ВСлучаеНеобходимости);
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					Возврат СтруктураНастроек;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//а здесь мы переберем те элементы, у которых задан идентификатор, это множественные настройки обмена
		Для каждого ТекЭлементНастроек Из НастройкиОбмена_XML_НашаИБ.ЭлементНастроек Цикл
			Если ТекЭлементНастроек.Идентификатор <> Неопределено Тогда
				ВложеннаяСтруктура = новый Структура;
				ТекстОшибки = "";
				СчитатьВСтруктуруСвойстваУзла(ВложеннаяСтруктура,ТекЭлементНастроек,ОбщиеНастройки_XML_НашаИБ,ТекстСообщения,,ОбращатьсяВPMS_ВСлучаеНеобходимости);
				//Если Не ПустаяСтрока(ТекстСообщения) Тогда
				//	Возврат СтруктураНастроек;
				//КонецЕсли;
				МассивЭлементов.Добавить(ВложеннаяСтруктура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураНастроек.Вставить("ЭлементыНастроек",МассивЭлементов);
	Возврат СтруктураНастроек;
КонецФункции // ПолучитьВнешниеНастройкиНетиповогоОбмена()
 
Функция ПолучитьСводнуюНастройкуНетиповогоОбмена(НастройкаОбмена_ЭлементСправочника,ТекстСообщения) Экспорт
	// создадим структуру, которая будет содержать все свойства из НастройкаОбмена_ЭлементСправочника 
	// плюс настройки, взятые из текстов XML (то, что в реквизите "НастройкиОбмена" в самом обмене и в константе "ОбщиеНастройкиОбменов");
	СводнаяНастройка = новый Структура;
	ВнешниеНастройки = Неопределено;
	////////////////////////////////////////////////////////////////////////////////
	// первая задача - вставить все свойства из элемента справочника в структуру
	////////////////////////////////////////////////////////////////////////////////
	
	СводнаяНастройка.Вставить("Ссылка",НастройкаОбмена_ЭлементСправочника.Ссылка);
	ПрочитатьНастройкуНетиповогоОбмена(СводнаяНастройка); 
	Если СводнаяНастройка.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService Тогда
		ДополнитьНастройкамиРаботыС_WebService(СводнаяНастройка);
	КонецЕсли;
	
	// вторая задача - считать некоторые настройки из xml файла и обновить значения 
	////////////////////////////////////////////////////////////////////////////////
	
	ВнешниеНастройки = ПолучитьВнешниеНастройкиНетиповогоОбмена(НастройкаОбмена_ЭлементСправочника,ТекстСообщения);  
	ТекИдентификатор = Неопределено;
	ИдентификаторЗадан = ВнешниеНастройки.Свойство("Идентификатор",ТекИдентификатор);
	Если Не ИдентификаторЗадан или ПустаяСтрока(ТекИдентификатор) Тогда
		ВнешниеНастройки.Вставить("Идентификатор",Справочники.НетиповыеОбменыДанными.ПолучитьИмяПредопределенного(НастройкаОбмена_ЭлементСправочника.Ссылка));
	КонецЕсли;
	
	
	Если ВнешниеНастройки = Неопределено Тогда      
		Возврат СводнаяНастройка;
	КонецЕсли; 
	
	Для каждого СвойствоВнешнейНастройки Из ВнешниеНастройки Цикл
		
		ИмяСвойства = СвойствоВнешнейНастройки.Ключ;
		//Если ТипЗНЧ(СвойствоВнешнейНастройки.Значение) = Тип("Неопределено") Тогда
		//            продолжить;
		//КонецЕсли; 
		Если СводнаяНастройка.Свойство(ИмяСвойства) Тогда
			СводнаяНастройка[ИмяСвойства] = СвойствоВнешнейНастройки.Значение;
		Иначе
			СводнаяНастройка.Вставить(ИмяСвойства,СвойствоВнешнейНастройки.Значение);
		КонецЕсли; 
	КонецЦикла; 
	Возврат СводнаяНастройка;
КонецФункции // ПолучитьСводнуюНастройкуНетиповогоОбмена()
 
Процедура ПрочитатьНастройкуНетиповогоОбмена(НастройкаОбмена) Экспорт
	
	Для каждого РеквизитСправочника Из Метаданные.Справочники.НетиповыеОбменыДанными.Реквизиты Цикл
		Если НастройкаОбмена.Свойство(РеквизитСправочника.Имя) Тогда
			НастройкаОбмена[РеквизитСправочника.Имя] = НастройкаОбмена.Ссылка[РеквизитСправочника.Имя];
		Иначе
			НастройкаОбмена.Вставить(РеквизитСправочника.Имя,НастройкаОбмена.Ссылка[РеквизитСправочника.Имя]);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
Функция ПолучитьЗначениеСвойстваИзНастройкиОбмена(НастройкаОбмена,ИмяСвойства,ТекстСообщения) экспорт
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
	
		ТекстСообщения = "Не задана настройка подключения";
		Возврат Неопределено;
	КонецЕсли; 
	СтруктураНастроек = ПолучитьВнешниеНастройкиНетиповогоОбмена(НастройкаОбмена,ТекстСообщения);	
	ЗначениеСвойства = Неопределено;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Возврат Неопределено;
	ИначеЕсли СтруктураНастроек.Свойство(ИмяСвойства,ЗначениеСвойства)Тогда
		Возврат ЗначениеСвойства;
	Иначе
		ТекстСообщения = ""+НастройкаОбмена + ": искомое свойство """+ИмяСвойства+""" отсутствует.";
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции // ПолучитьСвойствоВнешнейНастройки()
 
Функция ДополнитьНастройкиТиповогоОбменаВнешнимиДанными(НастройкаОбмена,СтруктураНастроек) Экспорт
	перем ТекстСообщения;
	Событие = Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы;
	Если СтруктураНастроек.Свойство("FILEКаталогОбменаИнформацией") Тогда
		СтруктураНастроек.FILEКаталогОбменаИнформацией = "";
		
		ПутьККаталогуОбмена = ПолучитьЗначениеСвойстваИзНастройкиОбмена(НастройкаОбмена,"ПутьККаталогуОбмена",ТекстСообщения);		
		
		Если ПутьККаталогуОбмена = Неопределено Тогда
			ТекстСообщения = ТекстСообщения;
			ВызватьИсключение ТекстСообщения;
		Иначе
			СтруктураНастроек.FILEКаталогОбменаИнформацией = ПутьККаталогуОбмена;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтруктураНастроек;
КонецФункции // ПолучитьВнешниеНастройкиТиповогоОбмена()
 
 
Процедура ДополнитьНастройкамиРаботыС_WebService(СтруктураНастроек)
	
	НастройкаОбмена = СтруктураНастроек.Ссылка;
	
	ОтветВебСервисаПриходитВШифрованномВиде = УправлениеСвойствамиПереопределяемый.ПолучитьДопРеквизит(НастройкаОбмена,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ОтветВебСервисаПриходитВШифрованномВиде);
	Если ОтветВебСервисаПриходитВШифрованномВиде <> Неопределено Тогда
		СтруктураНастроек.Вставить("ОтветВебСервисаПриходитВШифрованномВиде",
		ОтветВебСервисаПриходитВШифрованномВиде);
	Иначе
	КонецЕсли; 
	
КонецПроцедуры


//Возвращает подключение к веб-сервису
// в случае неудачи - возвращает Неопределено, а в параметре "СообщениеОбОшибке" - описание ошибки
Функция ИнициализацияПодкюченияКВебСервису(СводнаяНастройка,СообщениеОбОшибке) Экспорт
	
	WEB_Service_URIПространстваИмен = СводнаяНастройка.WEB_Service_URIПространстваИмен;
	WEB_Service_WSDL				= СводнаяНастройка.WEB_Service_WSDL;
	WEB_Service_ИмяСервиса			= СводнаяНастройка.WEB_Service_ИмяСервиса;
	WEB_Service_ИмяТочкиПодключения = СводнаяНастройка.WEB_Service_ИмяТочкиПодключения;
	Таймаут = ?(СводнаяНастройка.Таймаут=Неопределено,0,СводнаяНастройка.Таймаут);
	ИмяПользователя 	= СводнаяНастройка.ИмяПользователя;
	Пароль 	= СводнаяНастройка.Пароль;
	
	Если Не ЗначениеЗаполнено(WEB_Service_WSDL) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке),"",Символы.ПС)+"Не заполнено поле ""WSDL-ссылка""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(WEB_Service_URIПространстваИмен) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке),"",Символы.ПС)+"Не заполнено поле ""URI пространства имен""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(WEB_Service_ИмяСервиса) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке),"",Символы.ПС)+"Не заполнено поле ""Имя сервиса""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(WEB_Service_ИмяТочкиПодключения) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ПустаяСтрока(СообщениеОбОшибке),"",Символы.ПС)+"Не заполнено поле ""Имя точки подключения""";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ИмяПользователя = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Пароль) Тогда
		Пароль = "";
	КонецЕсли;
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Попытка
		Определения = новый WSОпределения(WEB_Service_WSDL,ИмяПользователя,Пароль);
		Прокси =  новый WSПрокси(Определения,WEB_Service_URIПространстваИмен,WEB_Service_ИмяСервиса,WEB_Service_ИмяТочкиПодключения,Таймаут);
		Прокси.Пользователь = ИмяПользователя;
		Прокси.Пароль = Пароль;
		Возврат Прокси;
	Исключение
		СообщениеОбОшибке = СообщениеОбОшибке +?(ПустаяСтрока(СообщениеОбОшибке),"",Символы.ПС)+"Ошибка подключения к веб-сервису:" +Символы.ПС+ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
		
КонецФункции

Функция ЗапуститьРеглЗадание(ВидОбмена,СекундОтсрочки=1,СообщениеОбОшибке="",ОбязательныйЗапуск = Ложь) Экспорт
	
	ЗапускатьРеглЗаданиеПриРегистрации = ВидОбмена.ЗапускатьРеглЗаданиеПриРегистрации;
	
	Если НЕ ЗапускатьРеглЗаданиеПриРегистрации и не ОбязательныйЗапуск Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БлокировкаРегЗадания = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаРегЗадания.Добавить("РегистрСведений.БлокировкиРегламентныхЗаданийНетиповыхОбменов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ОбменДанными",ВидОбмена.Ссылка);
	БлокировкаРегЗадания.Заблокировать();
	РегламентноеЗадание = Справочники.НетиповыеОбменыДанными.ПолучитьРегламентноеЗаданиеНетиповогоОбменаПоGUID(ВидОбмена);
	Если РегламентноеЗадание = Неопределено Тогда
		СообщениеОбОшибке = "В нетиповом обмене """+ВидОбмена+""" указано неверное регламентное задание.";
		Возврат Ложь;
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней        = 0;
	Расписание.ПериодПовтораВТечениеДня = 0;
	ТекДата = ТекущаяДата();
	Расписание.ВремяНачала     = ТекДата+СекундОтсрочки;
	Попытка
		РегламентноеЗадание.Расписание = Расписание;
		РегламентноеЗадание.Записать();
	Исключение
		СообщениеОбОшибке = "Не удалось запустить выполнение рег.задания """+РегламентноеЗадание+""". "+ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	// сохраним дату запуска для механима контроля за работой операций
	ЗаписьРегистра = РегистрыСведений.РасписанияОпераций.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Операция = ВидОбмена.Ссылка;
	ЗаписьРегистра.ДатаЗапуска = Расписание.ВремяНачала;
	ЗаписьРегистра.Записать(Истина);
	
КонецФункции

Процедура ПриЗаписиНетиповогоОбменаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
        Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.РегламентноеЗаданиеGUID) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БлокировкиРегламентныхЗаданийНетиповыхОбменов.ОбменДанными
		|ИЗ
		|	РегистрСведений.БлокировкиРегламентныхЗаданийНетиповыхОбменов КАК БлокировкиРегламентныхЗаданийНетиповыхОбменов
		|ГДЕ
		|	БлокировкиРегламентныхЗаданийНетиповыхОбменов.ОбменДанными = &ОбменДанными";
	
	Запрос.УстановитьПараметр("ОбменДанными", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		МенеджерЗаписи = РегистрыСведений.БлокировкиРегламентныхЗаданийНетиповыхОбменов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбменДанными = Источник.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
		

КонецПроцедуры

Функция МаскаОтветаПодходит(Знач Ответ, МаскаОтвета)

	ДлинаМаскиОтвета = СтрДлина(МаскаОтвета);
	Ответ = ОбщегоНазначенияПереопределяемый.ДополнитьСимволами(Ответ," ",ДлинаМаскиОтвета,"СПРАВА",Истина);
	ПриведенныйКМаскеОтвет = "";
	Для поз = 1 По ДлинаМаскиОтвета Цикл
	
		ТекСимволМаски  = Сред(МаскаОтвета,поз,1);
		Если ТекСимволМаски = "#" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСимволОтвета = Сред(Ответ,поз,1);
		
		Если ТекСимволМаски <> ТекСимволОтвета Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // МаскаОтветаПодходит(Результат, НастройкаОбмена.ОтветВСлучаеУспехаПередачи)()

Процедура ЗарегистрироватьОкончаниеОперации(Операция,IDCеансаОперации,ТекстСообщения = Неопределено,УровеньСобытия = Неопределено) Экспорт
	Если ТекстСообщения <> Неопределено Тогда
		Если УровеньСобытия = Неопределено Тогда
			УровеньСобытия = Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка;
		КонецЕсли; 
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Операция.СобытиеЖурналаРегистрации,УровеньСобытия,ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры