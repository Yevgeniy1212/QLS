
//Входящие параметры формируются в модуле веб-сервиса и передаются сюда в виде соответствия.
//Если пользовательская сессия найдена, то пользователь прописывается в параметры сеанса и в ответ возвращается пустая строка.
//Если нет, то в ответ возвращается HTML-страница ввода логина и пароля.
Функция ВыполнитьАутентификациюПользователя(НастройкаОбмена, ВходящиеПараметры, Отказ, ПользовательскиеСкрипты="") Экспорт
	
	HTMLPage = "";
	ТекстСообщения = "";
	Пользователь = Неопределено;
	ТипЗапроса = ВходящиеПараметры.Получить("requestType");
	JSONСоответствие = ВходящиеПараметры.Получить("JSONСоответствие");
	UserGUID = ВходящиеПараметры.Получить("userGuid");
	
	//1. Пользователь ввёл свои доменные логин и пароль на специальной странице авторизации
	Если НастройкаОбмена.СпособАвторизацииНаЭтомВебИнтерфейсе = Перечисления.ВидыАвторизацииПользователейНаWebWorkstation.ВыводитьОкноАвторизацииПользователяПоДаннымДоменнойУчетнойЗаписи Тогда
		
		Если ЗначениеЗаполнено(JSONСоответствие) Тогда
			
			//Получить пользователя из справочника "Пользователи" и записать его в параметры сеанса
			Пользователь = РегистрыСведений.WebWorkstation_ТекущиеСессии.ПоследняяСессия(НастройкаОбмена, ТипЗапроса, JSONСоответствие.Получить("allAttributeUserSessionGuid"), JSONСоответствие.Получить("allInputUserLogin"), РасшифроватьСтрокуJS(JSONСоответствие.Получить("allInputUserPassword")), ТекстСообщения);						
			Если ЗначениеЗаполнено(Пользователь) Тогда
				ПараметрыСеанса.ТекущийПользователь = Пользователь;
				Если ЗначениеЗаполнено(JSONСоответствие.Получить("allInputUserLogin")) Тогда				
					//Сохраняем пользователя в куки
					ПользовательскиеСкрипты = ПользовательскиеСкрипты + "saveUsername('"+JSONСоответствие.Получить("allInputUserLogin")+"');";					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
				
	//2. Пробрасывается DOMAIN\Username текущего пользователя Windows
	ИначеЕсли НастройкаОбмена.СпособАвторизацииНаЭтомВебИнтерфейсе = Перечисления.ВидыАвторизацииПользователейНаWebWorkstation.ИспользоватьТекущегоПользователяWindows Тогда
		
		//Определяем идентификатор сессии
		GUIDСессии_Строка = JSONСоответствие.Получить("allAttributeUserSessionGuid");
		Если Не ЗначениеЗаполнено(GUIDСессии_Строка) Тогда
			GUIDСессии = Новый УникальныйИдентификатор;
		Иначе
			GUIDСессии = Новый УникальныйИдентификатор(GUIDСессии_Строка);
		КонецЕсли;
		
		//Получаем имя пользователя из первого параметра, переданного нам веб-приложением
		//Если ЗначениеЗаполнено(UserGUID) Тогда
		//	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(UserGUID, "\"); 
		//	
		//	Если МассивСтрок.Количество() = 2 Тогда
		//		ИмяПользователя = МассивСтрок[1];
		//	Иначе
		//		ИмяПользователя = UserGUID;
		//	КонецЕсли;
		//	
		//	Пользователь = Пользователи.НайтиПоИмени(ИмяПользователя);
		//	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		//		ТекстСообщения = НСтрMES("ru='Пользователь ';en='The user '")+ИмяПользователя+ НСтрMES("ru=' отсутствует в QLS.';en=' is absent in QLS'");
		//	КонецЕсли;		
		//Иначе
		//	ТекстСообщения = НСтрMES("ru='Текущий пользователь Windows не был получен из веб-приложения. Проверьте настройки веб-сервера, либо измените способ авторизации на веб-интерфейсе';en='Current user of Windows was not received from web application. Check settings of web-server, or change authorization method on web-interface.'");
		//КонецЕсли;
		//
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		//Записывам данные о нашем виндовом пользователе в регистр сессиий, а заодно сохраняем номер сессии на форме
		Пользователь = РегистрыСведений.WebWorkstation_ТекущиеСессии.ПоследняяСессия(НастройкаОбмена, ТипЗапроса, GUIDСессии, "", "", ТекстСообщения, Пользователь);						
		//Если ЗначениеЗаполнено(Пользователь) Тогда
		//	ПараметрыСеанса.ТекущийПользователь = Пользователь;
		//КонецЕсли;
		

		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#allAttributeUserSessionGuid').text("""+GUIDСессии_Строка+""");";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.form-signin').remove();";
		
	//4. Берём пользователя из строки url
	ИначеЕсли НастройкаОбмена.СпособАвторизацииНаЭтомВебИнтерфейсе = Перечисления.ВидыАвторизацииПользователейНаWebWorkstation.ИспользоватьАнонимногоПользователя Тогда	
	
		//Получаем имя пользователя из настроек обмена
		Если ЗначениеЗаполнено(НастройкаОбмена.Пользователь) Тогда
			Пользователь = НастройкаОбмена.Пользователь;				
			ПараметрыСеанса.ТекущийПользователь = НастройкаОбмена.Пользователь;
		Иначе
			ТекстСообщения = НСтрMES("ru='В настройках обмена не выбран пользователь, под которым должна происходить авторизация. Проверьте настройки веб-сервера, либо измените способ авторизации на веб-интерфейсе';en='A user, under which authorization should be executed was not chosen in the settings of exchange. Check settings of web-server, or change authorization method on web-interface.'");
		КонецЕсли;
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#allAttributeUserSessionGuid').text('');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.form-signin').remove();";
	
	//5. В настройках этого обмена не указали способ авторизации
	Иначе 
		
		ТекстСообщения = НСтрMES("ru='В настройках QLS для обмена ""';en='In settings of QLS for exchange ""'")+НастройкаОбмена.Ссылка+НСтрMES("ru='"" не выбран способ авторизации. Обратитесь к консультантам.';en='"" method of authorization was not chose. Contact your consultants.'");
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.form-signin').remove();";

	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда		
		HTMLPage = ПолучитьСтраницуАутентификации(ВходящиеПараметры, ТекстСообщения, Отказ);			
	КонецЕсли;
	
	Возврат HTMLPage;
	
КонецФункции

//Получаем страницу ввода логина и пароля и выводим или не выводим на неё сообщение
Функция ПолучитьСтраницуАутентификации(ВходящиеПараметры, ТекстСообщения, Отказ)
	
	//Вывести страницу ввода логина и пароля
	Отказ = Истина;
	HTMLPage = ПолучитьСтраницу(ПолучитьОбщийМакет("WebWorkstation_AuthenticationHTML"), "Ошибка");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionGuid-->", Новый УникальныйИдентификатор);
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionBeginningDate-->", Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"));	
	HTMLPage = СтрЗаменить(HTMLPage, "#allFormPageReloadClass", "class='form-signin'");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--ТекстСообщенияПредупреждения-->", СтрЗаменить(Константы.ИнформационноеСообщениеПослеЗапускаСистемы.Получить(), Символы.ПС, "<br>"));
	
	Если ЗначениеЗаполнено(ТекстСообщения) И НРег(ВходящиеПараметры.Получить("requestType"))<>"exit" Тогда
		//Выводим на окно авторизации сообщение о том, почему нам не удалось войти
		HTMLPage = СтрЗаменить(HTMLPage, "<!--allCaptionUserSessionMessage-->", ТекстСообщения);
	Иначе
		//Удаляем всплывающий блок "alert"
		ПользовательскиеСкрипты = "$('#allDivUserSessionMessage').remove();";
		HTMLPage = СтрЗаменить(HTMLPage, "//*scripts*//", "//*scripts*//" + Символы.ПС + ПользовательскиеСкрипты);
	КонецЕсли;
	
	//Перевод наименования элементов формы
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияЗаголовок-->", НСтрMES("ru = 'Войдите в систему'; en = 'Enter the system'"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияЛогин-->", НСтрMES("ru = 'Логин'; en = 'Login'"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияПароль-->", НСтрMES("ru = 'Пароль'; en = 'Password'"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияВойти-->", НСтрMES("ru = 'Войти'; en = 'Enter'"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияОшибка-->", НСтрMES("ru = 'Ошибка!'; en = 'Error!'"));
	
	//Подгрузка скриптов и стилей страницы аутентификации
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", "/*СтилиСтраницы*/" + Символы.ПС + ПолучитьОбщийМакет("WebWorkstation_AuthenticationStyles").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", "/*СкриптыСтраницы*/" + Символы.ПС + ПолучитьОбщийМакет("WebWorkstation_AuthenticationScripts").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);
	
	Возврат HTMLPage;
	
КонецФункции

//Функция определяет текущее рабочее место из входящих параметров. Если рабочее место найдено, оно присваивается переменной РабочееМестоОператора.
//Если рабочее место не найдено, функция возвращает в ответ HTML-страницу со списком доступных рабочих мест оператора
Функция ВыбратьРабочееМестоОператора(ТаблицаДоступныхРабочихМестОператора, РабочееМестоОператора, ВходящиеПараметры, Отказ) Экспорт
	
	HTMLPage = "";
	
	РабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	НайденноеРабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	
	//Сперва пытаемся получить рабочее место оператора из входящих параметров. Так как возможно, что мы уже загрузили рабочее место оператора и знаем его GUID
	GUIDРабочегоМестаОператора = ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeCurrentWorkstationGuid");
	Если ЗначениеЗаполнено(GUIDРабочегоМестаОператора) И Не ЗначениеЗаполнено(НайденноеРабочееМестоОператора) Тогда
		Если ТипЗнч(GUIDРабочегоМестаОператора) = Тип("Строка") Тогда
			GUIDРабочегоМестаОператора = Новый УникальныйИдентификатор(GUIDРабочегоМестаОператора);
		КонецЕсли;
		НайденноеРабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПолучитьСсылку(GUIDРабочегоМестаОператора);

	КонецЕсли;
	//Также пытаемся получить рабочее место из URL. Код там может быть
	КодРабочегоМестаОператора = ВходящиеПараметры.Получить("URLСоответствие").Получить("id");
	Если ЗначениеЗаполнено(КодРабочегоМестаОператора) И Не ЗначениеЗаполнено(НайденноеРабочееМестоОператора) Тогда
		НайденноеРабочееМестоОператора = Справочники.РабочиеМестаОператоров.НайтиПоКоду(КодРабочегоМестаОператора);
	КонецЕсли;
	
	//Ищем, есть ли у нас такое рабочее место в списке доступных рабочих мест
	Если ТаблицаДоступныхРабочихМестОператора.Найти(НайденноеРабочееМестоОператора) <> Неопределено Тогда
		РабочееМестоОператора = НайденноеРабочееМестоОператора;	
	КонецЕсли;
	
	//Если у нас нет рабочего места оператора, то выводим целый список для того, чтобы можно было выбрать одно рабочее место и работать с ним
	Если Не ЗначениеЗаполнено(РабочееМестоОператора) Тогда
		Если ТаблицаДоступныхРабочихМестОператора.Количество() = 1 Тогда
			РабочееМестоОператора = ТаблицаДоступныхРабочихМестОператора.Получить(0).РабочееМестоОператора;
		Иначе			
			HTMLPage = ПолучитьСтраницуВыбораРабочегоМестаОператора(ВходящиеПараметры, ТаблицаДоступныхРабочихМестОператора, Отказ);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат HTMLPage;
	
КонецФункции

//Эта функция относится к функции ВыбратьРабочееМестоОператора. Формирует таблицу HTML из списка рабочих мест оператора 
Функция ПолучитьСтраницуВыбораРабочегоМестаОператора(ВходящиеПараметры, ТаблицаДоступныхРабочихМестОператора, Отказ)
	
	Если ТаблицаДоступныхРабочихМестОператора.Количество() = 0 Тогда
		ТекстСообщения = НСтрMES("ru='Пользователю ""';en='The user ""'")+Пользователи.АвторизованныйПользователь()+НСтрMES("ru='"" не назначено ни одного рабочего места. Пожалуйста, обратитесь к консультантам.';en='"" wasn''t assigned any working place. Please, contact your consultants.'");
		HTMLPage = ПолучитьСтраницуАутентификации(ВходящиеПараметры, ТекстСообщения, Отказ);		
	ИначеЕсли ТаблицаДоступныхРабочихМестОператора.Количество() = 1 Тогда
		//Рабочее место одно. Его и выводим.
		HTMLPage = "";
	Иначе
		//Рабочих мест несколько
		ТаблицаСменитьРабочееМестоОператора = WebWorkstationОбщиеФункции.ПолучитьHTMLТаблицуДоступныхРабочихМестОператора(ТаблицаДоступныхРабочихМестОператора);	
		HTMLPage = ПолучитьСтраницу(ПолучитьОбщийМакет("WebWorkstation_ВыборРабочегоМестаHTML"), НСтрMES("ru='Выберите рабочее место оператора';en='Choose working place of operator'"));
		HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаЗаголовокСтанция-->", НСтрMES("ru='Выберите рабочее место оператора';en='Choose working place of operator'"));	
		HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаДоступныеСтанции-->", ТаблицаСменитьРабочееМестоОператора);	
		HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаКнопкаВыход-->", 	НСтрMES("ru='Выход';en='Exit'"));
		Отказ = Истина;
	КонецЕсли;
		
	Возврат HTMLPage;
	
КонецФункции

//Функция получения HTML-кода из макетов
Функция ПолучитьСтраницу(Макет, Заголовок) Экспорт
	HTMLPage = ПолучитьОбщийМакет("WebWorkstation_HTML").ПолучитьТекст();
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", ПолучитьОбщийМакет("WebWorkstation_Styles").ПолучитьТекст()+Символы.ПС+"/*СтилиСтраницы*/");
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", ПолучитьОбщийМакет("WebWorkstation_Scripts").ПолучитьТекст()+Символы.ПС+"/*СкриптыСтраницы*/");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--htmlPageTitle-->", Заголовок);
	HTMLPage = СтрЗаменить(HTMLPage, "<!--htmlBodyText-->", Макет.ПолучитьТекст());
	Возврат HTMLPage;
КонецФункции

//Получаем таблицу всех рабочих мест оператора для конкретного пользователя. 
//Рабочее место должно быть доступно пользователю, также оно должно быть добавлено в настройки нетипового обмена
Функция ПолучитьТаблицуДоступныхРабочихМестОператора(Пользователь, НетиповойОбмен) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора КАК РабочееМестоОператора
		|ПОМЕСТИТЬ НазначенныеРабочиеМестаОператораДокументом
		|ИЗ
		|	РегистрСведений.НазначенияРабочихМестОператорам.СрезПоследних(, Пользователь = &ТекущийПользователь) КАК НазначенияРабочихМестОператорамСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМестаОператоров КАК РабочиеМестаОператоров
		|		ПО НазначенияРабочихМестОператорамСрезПоследних.РабочееМестоОператора = РабочиеМестаОператоров.Ссылка
		|ГДЕ
		|	НЕ РабочиеМестаОператоров.ПометкаУдаления
		|	И НЕ НазначенияРабочихМестОператорамСрезПоследних.Отключено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НазначенныеРабочиеМестаОператораДокументом.РабочееМестоОператора КАК РабочееМестоОператора
		|ИЗ
		|	НазначенныеРабочиеМестаОператораДокументом КАК НазначенныеРабочиеМестаОператораДокументом
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НетиповыеОбменыДанными.РабочиеМестаОператоров КАК НазначенныеРабочиеМестаОператораОбменом
		|		ПО НазначенныеРабочиеМестаОператораДокументом.РабочееМестоОператора = НазначенныеРабочиеМестаОператораОбменом.РабочееМестоОператора
		|ГДЕ
		|	НазначенныеРабочиеМестаОператораОбменом.Ссылка = &НетиповойОбмен
		|	И НазначенныеРабочиеМестаОператораДокументом.РабочееМестоОператора ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	НазначенныеРабочиеМестаОператораДокументом.РабочееМестоОператора.Наименование");
		
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("НетиповойОбмен", НетиповойОбмен);	
	
	ТаблицаДоступныхРабочихМестОператора = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДоступныхРабочихМестОператора;
	
КонецФункции
																	
//Функция преобразует входящую таблицу значений в HTML-таблицу. 
//В атрибутах можно передавать соответствие, в котором доступно включение и отключение части алгоритма этой функции
Функция ПреобразоватьТаблицуЗначенийВТаблицуHTML(ТаблицаЗначений, Атрибуты = Неопределено) Экспорт
	
	HTMLTable = "";	
	
	Если ТипЗнч(ТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
		
		//Определение известных атрибутов
		Если Атрибуты = Неопределено Тогда
			Атрибуты = Новый Соответствие;
		КонецЕсли;
		
		АтрибутTable = Атрибуты.Получить("table"); 
		АтрибутHead = Атрибуты.Получить("thead");
		АтрибутGuid = Атрибуты.Получить("guid");
		АтрибутCode= Атрибуты.Получить("code");
		
		HTMLTable = HTMLTable + "<table "+АтрибутTable+">";
		
		//Заголовки
		Если АтрибутHead <> Ложь Тогда
			HTMLTable = HTMLTable + "<thead "+АтрибутHead+">";	
			HTMLTable = HTMLTable + "<tr>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				HTMLTable = HTMLTable + "<th>" + СтрЗаменить(Колонка.Заголовок, "_", " ") + "</th>";
			КонецЦикла;
			HTMLTable = HTMLTable + "</tr>";		
			HTMLTable = HTMLTable + "</thead>";
		КонецЕсли;
		
		//Строки
		Для Каждого Строка Из ТаблицаЗначений Цикл
			HTMLTable = HTMLTable + "<tr>";	
			
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				
				ДополнительныеАтрибуты = "";
				
				//Для каждого объекта получаем guid и вставляем его в тэги
				Если АтрибутGuid = Истина Тогда 
					Попытка
						guid = Строка[Колонка.Имя].УникальныйИдентификатор();
					Исключение
						guid = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");	
					КонецПопытки;
					ДополнительныеАтрибуты = ДополнительныеАтрибуты + " guid = '"+guid+"' ";
				КонецЕсли;
				
				//Для каждого объекта получаем код и вставляем его в тэги
				Если АтрибутCode = Истина Тогда					
					Попытка
						Код = Строка[Колонка.Имя].Код;
					Исключение
						Код = "";	
					КонецПопытки;
					ДополнительныеАтрибуты = ДополнительныеАтрибуты + " code = '"+Код+"' ";
				КонецЕсли;
				
				HTMLTable = HTMLTable + "<td name='"+Колонка.Имя+"' "+ДополнительныеАтрибуты+">" + Строка[Колонка.Имя] + "</td>";
				
			КонецЦикла;
			HTMLTable = HTMLTable + "</tr>";
		КонецЦикла;
		
		HTMLTable = HTMLTable + "</table>";
		
	КонецЕсли;
	
	Возврат HTMLTable;
КонецФункции

//Запись результатов операций в регистр
Процедура ЗаписатьВЖурналСканирования(Событие, УровеньСобытия, ОтсканированноеЗначение, Заказ=Неопределено, СообщениеОператору=Неопределено, РабочееМестоОператора=Неопределено, Дата=Неопределено) Экспорт
	
	СтруктураВходныхПараметров = Новый Структура;
	СтруктураВходныхПараметров.Вставить("Дата", Дата);
	СтруктураВходныхПараметров.Вставить("Событие", Событие);
	СтруктураВходныхПараметров.Вставить("УровеньСобытия", УровеньСобытия);
	СтруктураВходныхПараметров.Вставить("Значение", ОтсканированноеЗначение);
	СтруктураВходныхПараметров.Вставить("Станция", РабочееМестоОператора);
	СтруктураВходныхПараметров.Вставить("Заказ", Заказ);
	СтруктураВходныхПараметров.Вставить("СообщениеОператору", СокрЛП(СообщениеОператору));
	СтруктураВходныхПараметров.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РегистрыСведений.ЖурналОперацийQLS.ЗафиксироватьИнформационноеСообщение(СтруктураВходныхПараметров);
	
КонецПроцедуры

//Функция возвращает список всех доступных рабочих мест оператора в виде HTML-таблицы
Функция ПолучитьHTMLТаблицуДоступныхРабочихМестОператора(ТаблицаДоступныхРабочихМестОператора) Экспорт
	
	//Список рабочих мест оператора в виде таблицы HTML
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("table", "id=""allTableChangeCurrentWorkstation"" class=""table table-hover"" style=""width: 100%;""");
	Атрибуты.Вставить("thead", Ложь);
	Атрибуты.Вставить("guid", Истина);
	Атрибуты.Вставить("code", Истина);
	
	HTMLРабочиеМестаОператора = WebWorkstationОбщиеФункции.ПреобразоватьТаблицуЗначенийВТаблицуHTML(ТаблицаДоступныхРабочихМестОператора, Атрибуты);
	
	Возврат HTMLРабочиеМестаОператора;									
	
КонецФункции

//Так как все скрипты и стили мы должны хранить в базе, дополняем нашу страницу ими. 
//Это должен быть последний шаг, перед тем, как возвращать страницу наружу, так как названия стилей могут совпадать с заменяемыми элементами
Функция ДополнитьСтраницуСтилямиИСкриптамиИзБазы(HTMLPage) Экспорт
	HTMLPage = СтрЗаменить(HTMLPage, "<!--customStyles-->", "<style>"+ПолучитьОбщийМакет("WebWorkstation_CustomStyles").ПолучитьТекст()+"</style>");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--customScripts-->", "<script>"+ПолучитьОбщийМакет("WebWorkstation_CustomScripts").ПолучитьТекст()+"</script>");
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--customStyles-->", "<link rel='stylesheet' type='text/css' href='css/style.css'>");
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--customScripts-->", "<script type='text/javascript' charset='utf8' src='js/scripts.js'></script>");
	Возврат HTMLPage;
КонецФункции

//Получить историю сканирования в виде таблицы
Функция ПолучитьЛогиСканированияЗаТекущуюСмену(ТекущееРабочееМесто) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	ТекущаяСмена = Производство.ОпределитьСмену(ТекущаяДата);
	ВремяНачалаСмены = Производство.ПолучитьВремяНачалаСмены(ТекущаяДата, ТекущаяСмена);
	Если ВремяНачалаСмены > ТекущаяДата Тогда //Это может возникнуть, если у нас третья смена и дата начала нашей смены перенесется на завтра
		ВремяНачалаСмены = ВремяНачалаСмены - 24*60*60;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОперацийQLS.Дата КАК Дата,
		|	ЖурналОперацийQLS.Значение,
		|	ЖурналОперацийQLS.Заказ,
		|	ЖурналОперацийQLS.СообщениеОператору КАК Сообщение
		|ИЗ
		|	РегистрСведений.ЖурналОперацийQLS КАК ЖурналОперацийQLS
		|ГДЕ
		|	ЖурналОперацийQLS.Станция = &Станция
		|	И ЖурналОперацийQLS.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";

	Запрос.УстановитьПараметр("ДатаНачала", ВремяНачалаСмены);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата);
	Запрос.УстановитьПараметр("Станция", ТекущееРабочееМесто);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

//Получить историю сканирования в виде текстового поля, а не таблицы
Функция ЗаполнитьИсториюСканирования(ТекущееРабочееМесто, ВремяНачалаСессии, ПодсвечиватьЗаголовки) Экспорт
	
	ЖурналИсторииСканирования = "";
	
	Если ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
		ТекущаяДата = ТекущаяДата();
		ТекущаяСмена = Производство.ОпределитьСмену(ТекущаяДата);
		ВремяНачалаСмены = Производство.ПолучитьВремяНачалаСмены(ТекущаяДата, ТекущаяСмена);
		Если ВремяНачалаСмены > ТекущаяДата Тогда //Это может возникнуть, если у нас третья смена и дата начала нашей смены перенесется на завтра
			ВремяНачалаСмены = ВремяНачалаСмены - 24*60*60;
		КонецЕсли;
		ТекущийЗаказ = Справочники.Заказы.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЖурналОперацийQLS.Дата КАК Дата,
			|	ЖурналОперацийQLS.Станция,
			|	ЖурналОперацийQLS.Заказ,
			|	ЖурналОперацийQLS.СообщениеОператору
			|ИЗ
			|	РегистрСведений.ЖурналОперацийQLS КАК ЖурналОперацийQLS
			|ГДЕ
			|	ЖурналОперацийQLS.Станция = &Станция
			|	И ЖурналОперацийQLS.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";

		Запрос.УстановитьПараметр("ДатаНачала", ВремяНачалаСессии);
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата);
		Запрос.УстановитьПараметр("Станция", ТекущееРабочееМесто);

		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ТекущийЗаказ <> ВыборкаДетальныеЗаписи.Заказ Тогда
				ТекущийЗаказ = ВыборкаДетальныеЗаписи.Заказ;
				Заголовок = "<span style=""font-weight: bold;"">" + " ----- " + ТекущийЗаказ + " ----- " + "</span>";
				ЖурналИсторииСканирования = ЖурналИсторииСканирования + Символы.ПС +  Заголовок + Символы.ПС + Символы.ПС ;
			КонецЕсли;
			ЖурналИсторииСканирования = ЖурналИсторииСканирования + Формат(ВыборкаДетальныеЗаписи.Дата, "ДФ=HH:mm:ss") + ": "+ СтрЗаменить(ВыборкаДетальныеЗаписи.СообщениеОператору, Символы.ПС, ". ") + Символы.ПС;
		КонецЦикла;
		
		ЖурналИсторииСканирования = РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.УбратьНедопустимыеСимволы(ЖурналИсторииСканирования);
	КонецЕсли;
	
	
	
	Возврат СокрЛП(ЖурналИсторииСканирования);
	
КонецФункции

//Пароль с клиентской стороны передаётся в зашифрованном виде. Расшифровываем его
Функция РасшифроватьСтрокуJS(ВходящаяСтрока)
	
	ИсходящаяСтрока = "";
	ДлинаСтроки = СтрДлина(ВходящаяСтрока);
	Массив1 = Новый Массив;
	Массив2 = Новый Массив;
	
	Счётчик = 1;
	Пока Счётчик < ДлинаСтроки Цикл
		
		Массив1.Добавить(КодСимвола(ВходящаяСтрока, Счётчик));
		Массив2.Добавить(КодСимвола(ВходящаяСтрока, Счётчик+1));
		
		Счётчик = Счётчик + 1;
	КонецЦикла;
		
	Счётчик = 0;
	Пока Счётчик < ДлинаСтроки Цикл
		
		КодСимвола1 = Массив1.Получить(Счётчик);
		КодСимвола2 = Массив2.Получить(Счётчик);
		ИсходящаяСтрока = ИсходящаяСтрока + Символ(Массив1.Получить(Счётчик) - Массив2.Получить(Счётчик));
		
		Счётчик = Счётчик + 2;
	КонецЦикла;
		
	//Шифрование на JS
	//function encrypt(theText) {
	//	output = new String;
	//	Temp = new Array();
	//	Temp2 = new Array();
	//	TextSize = theText.length;
	//	for (i = 0; i < TextSize; i++) {
	//		rnd = Math.round(Math.random() * 122) + 68;
	//		Temp[i] = theText.charCodeAt(i) + rnd;
	//		Temp2[i] = rnd;
	//	}
	//	for (i = 0; i < TextSize; i++) {
	//		output += String.fromCharCode(Temp[i], Temp2[i]);
	//	}
	//	return output;
	//}
	
	//Расшифровка на JS
	//function unEncrypt(theText) {
	//	output = new String;
	//	Temp = new Array();
	//	Temp2 = new Array();
	//	TextSize = theText.length;
	//	for (i = 0; i < TextSize; i++) {
	//		Temp[i] = theText.charCodeAt(i);
	//		Temp2[i] = theText.charCodeAt(i + 1);
	//	}
	//	for (i = 0; i < TextSize; i = i+2) {
	//		output += String.fromCharCode(Temp[i] - Temp2[i]);
	//	}
	//	return output;
	//}	
	
	Возврат ИсходящаяСтрока;
	
КонецФункции

//Замена шаблонного значения в HTML строке
Функция HTMLЗаполнитьЗначение(HTMLPage, Шаблон, Значение, СохранитьШаблон = Ложь) Экспорт
	
	Шаблон = "<!--"+Шаблон+"-->";
	
	Если Не СохранитьШаблон Тогда
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение));
	Иначе
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение)+Символы.ПС+Шаблон);
	КонецЕсли;
	
	Возврат HTMLPage;
	
КонецФункции

//Превращение строки в Base64
Функция КодироватьСтрокуВBase64(ИсходнаяСтрока) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.Записать(ИсходнаяСтрока);
	ЗаписьТекста.Закрыть();
	
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));

	Попытка 
		УдалитьФайлы(ИмяВременногоФайла) 	  
  	Исключение
	  
	КонецПопытки;

	Возврат Результат;

конецфункции

//Получаем структуру, которой будем отвечать на вызовы по веб-сервису
Функция ПолучитьСтруктуруОтветовHTTP() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("StatusCode", 200);
	Структура.Вставить("ContentType", "text/html; charset=utf-8");
	Структура.Вставить("ContentBase64", "ContentBase64Value");
	Структура.Вставить("Content", "");
	
	Возврат Структура;
	
КонецФункции

Функция СгенерироватьСтраницуСОшибкой(ТекстСообщения, ВходящиеПараметры, Отказ) Экспорт
	
	//Вывести страницу ввода логина и пароля
	Отказ = Истина;
	HTMLPage = ПолучитьСтраницу(ПолучитьОбщийМакет("WebWorkstation_ErrosPageHTML"), "Авторизация");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionGuid-->", Новый УникальныйИдентификатор);
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionBeginningDate-->", Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"));	
	HTMLPage = СтрЗаменить(HTMLPage, "#allFormPageReloadClass", "class='form-signin'");
	HTMLPage = СтрЗаменить(HTMLPage, "<!--ТекстСообщенияПредупреждения-->", СтрЗаменить(Константы.ИнформационноеСообщениеПослеЗапускаСистемы.Получить(), Символы.ПС, "<br>"));
	
	Если ЗначениеЗаполнено(ТекстСообщения) И НРег(ВходящиеПараметры.Получить("requestType"))<>"exit" Тогда
		//Выводим на окно авторизации сообщение о том, почему нам не удалось войти
		HTMLPage = СтрЗаменить(HTMLPage, "<!--allCaptionUserSessionMessage-->", ТекстСообщения);
	Иначе
		//Удаляем всплывающий блок "alert"
		ПользовательскиеСкрипты = "$('#allDivUserSessionMessage').remove();";
		HTMLPage = СтрЗаменить(HTMLPage, "//*scripts*//", "//*scripts*//" + Символы.ПС + ПользовательскиеСкрипты);
	КонецЕсли;
	
	//Перевод наименования элементов формы
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияЗаголовок-->", НСтрMES("ru = 'Войдите в систему'; en = 'Enter the system'"));
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияЛогин-->", НСтрMES("ru = 'Логин'; en = 'Login'"));
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияПароль-->", НСтрMES("ru = 'Пароль'; en = 'Password'"));
	//HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияВойти-->", НСтрMES("ru = 'Войти'; en = 'Enter'"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--НаименованиеРеквизитаАвторизацияОшибка-->", НСтрMES("ru = 'Ошибка!'; en = 'Error!'"));
	
	//Подгрузка скриптов и стилей страницы аутентификации
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", "/*СтилиСтраницы*/" + Символы.ПС + ПолучитьОбщийМакет("WebWorkstation_AuthenticationStyles").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", "/*СкриптыСтраницы*/" + Символы.ПС + ПолучитьОбщийМакет("WebWorkstation_AuthenticationScripts").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);
	
	Возврат HTMLPage;

	
КонецФункции