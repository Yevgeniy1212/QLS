
Функция ОбязательныеТочкиПройдены(Заказ, ТочкаПроверкиКачества, ТекстСообщенияДетализация) экспорт
	
	Если ТочкаПроверкиКачества.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("КонтролироватьПрохождениеОбязательныхТочек");
	Реквизиты.Вставить("ОбязательныеТочкиПроверкиКачества");
	Реквизиты.Вставить("ОбязательныеТочкиРегистрации");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТочкаПроверкиКачества, Реквизиты);
	Если Не ЗначенияРеквизитов.КонтролироватьПрохождениеОбязательныхТочек Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТочкиПроверкиКачества = ЗначенияРеквизитов.ОбязательныеТочкиПроверкиКачества.Выгрузить();
	ТочкиРегистрации	  = ЗначенияРеквизитов.ОбязательныеТочкиРегистрации.Выгрузить();
	
	Если ТочкиПроверкиКачества.Количество() > 0 Тогда
		ВсеТочкиПроверкиКачестваПройдены = ТочкиПроверкиКачестваПройдены(Заказ, ТочкаПроверкиКачества, ТекстСообщенияДетализация);
	Иначе
		ВсеТочкиПроверкиКачестваПройдены = Истина;
	КонецЕсли; 	
	
	Если ТочкиРегистрации.Количество() > 0 Тогда
		ВсеТочкиРегистрацииПройдены = ТочкиРегистрацииПройдены(Заказ, ТочкаПроверкиКачества, ТекстСообщенияДетализация);
	Иначе
		ВсеТочкиРегистрацииПройдены = Истина;
	КонецЕсли; 
		
	Возврат ВсеТочкиПроверкиКачестваПройдены и ВсеТочкиРегистрацииПройдены;
	
КонецФункции

// Проверяет, все ли точки проверки качества из табличной части точки регистрации / точки проверки качества пройдены
//
// Параметры:
//  Заказ						 - СправчоникСсылка.Заказы	 - Заказ по которому проверяем точки проверки качества
//  ТочкаПроверкиКачества		 - СправчоникСсылка.ТочкиПроверкиКачества - Проверяемая точка проверки качества (если не указана, проверяются все)
//  ТекстСообщенияДетализация	 - Строка	 - Сообщение об ошибке
// 
// Возвращаемое значение:
// ВсеТочкиПроверкиКачестваПройдены - Булево - возвращает истину если указанные точки пройдены по заказу
//
Функция ТочкиПроверкиКачестваПройдены(Заказ, ТочкаПроверкиКачества = Неопределено, ТекстСообщенияДетализация) экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбязательныеТочки.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	|ПОМЕСТИТЬ ИсходныеТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества КАК ТочкиПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.ОбязательныеТочкиПроверкиКачества КАК ОбязательныеТочки
	|		ПО ТочкиПроверки.Ссылка = ОбязательныеТочки.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоЗначению
	|				ТОГДА ТочкиПроверки.Ссылка = &ТочкаПроверкиКачества
	|			ИНАЧЕ ИСТИНА
	|					И НЕ ТочкиПроверки.ПометкаУдаления
	|		КОНЕЦ
	|	И НЕ ТочкиПроверки.ЭтоГруппа
	|	И ТочкиПроверки.КонтролироватьПрохождениеОбязательныхТочек
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбязательныеТочки.ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеТочки.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	|ПОМЕСТИТЬ ОбязательныеТочки
	|ИЗ
	|	ИсходныеТочки КАК ИсходныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества КАК ТочкиПроверки
	|		ПО ИсходныеТочки.ТочкаПроверкиКачества = ТочкиПроверки.Ссылка
	|ГДЕ
	|	НЕ ТочкиПроверки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества КАК ПройденнаяТочкаПроверкиКачества
	|ПОМЕСТИТЬ ПройденныеТочки
	|ИЗ
	|	ОбязательныеТочки КАК ОбязательныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.СрезПоследних(, Заказ = &Заказ) КАК ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних
	|		ПО ОбязательныеТочки.ТочкаПроверкиКачества = ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества
	|ГДЕ
	|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Выполнена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбязательныеТочки.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	|ИЗ
	|	ОбязательныеТочки КАК ОбязательныеТочки
	|ГДЕ
	|	НЕ ОбязательныеТочки.ТочкаПроверкиКачества В
	|				(ВЫБРАТЬ
	|					ПройденныеТочки.ПройденнаяТочкаПроверкиКачества
	|				ИЗ
	|					ПройденныеТочки КАК ПройденныеТочки)";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	Запрос.УстановитьПараметр("ОтборПоЗначению", ЗначениеЗаполнено(ТочкаПроверкиКачества));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВсеТочкиПроверкиКачестваПройдены = РезультатЗапроса.Пустой();

	Если ВсеТочкиПроверкиКачестваПройдены Тогда
		Возврат ВсеТочкиПроверкиКачестваПройдены;
	КонецЕсли;
	
	//Формируем подробный текст сообщения
	Выборка = РезультатЗапроса.Выбрать();
	Разделитель = ?(ПустаяСтрока(ТекстСообщенияДетализация), "", Символы.ПС) 
				  + НСтрMES("ru='Непройденные точки проверки качества: ';en='Not passed сheckpoints of quality: '");
	Пока Выборка.Следующий() Цикл
		ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Выборка.ТочкаПроверкиКачества + "'";
		Разделитель = ","+Символы.ПС;		
	КонецЦикла; 
	
	Возврат ВсеТочкиПроверкиКачестваПройдены;
	
КонецФункции

// Проверяет, все ли точки проверки регистрации из табличной части точки регистрации пройдены
//
// Параметры:
//  Заказ						 - СправчоникСсылка.Заказы	 - Заказ по которому проверяем точки регистрации
//  ТочкаПроверкиКачества		 - СправчоникСсылка.ТочкиРегистрации - Список Проверяемых точкек регистрации (если не указан, проверяются все)
//  ТекстСообщенияДетализация	 - Строка	 - Сообщение об ошибке
// 
// Возвращаемое значение:
// 	ВсеТочкиПройдены - Булево - возвращает истину если указанные точки пройдены по заказу 
//
Функция ТочкиРегистрацииПройдены(Заказ, ТочкаПроверкиКачества, ТекстСообщенияДетализация) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбязательныеТочки.ТочкаРегистрации КАК ТочкаРегистрации
	|ПОМЕСТИТЬ ОбязательныеТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ОбязательныеТочкиРегистрации КАК ОбязательныеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТочкиРегистрации КАК ТочкиРегистрации
	|		ПО ОбязательныеТочки.ТочкаРегистрации = ТочкиРегистрации.Ссылка
	|ГДЕ
	|	ОбязательныеТочки.Ссылка = &ТочкаПроверкиКачества
	|	И НЕ ТочкиРегистрации.ЭтоГруппа
	|	И НЕ ТочкиРегистрации.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбязательныеТочки.ТочкаРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеЗаказовОбороты.ТочкаРегистрации КАК ТочкаРегистрации
	|ПОМЕСТИТЬ ПройденныеТочки
	|ИЗ
	|	РегистрНакопления.ДвижениеЗаказов.Обороты(
	|			,
	|			,
	|			,
	|			Заказ = &Заказ
	|				И ТочкаРегистрации В
	|					(ВЫБРАТЬ
	|						ОбязательныеТочки.ТочкаРегистрации
	|					ИЗ
	|						ОбязательныеТочки КАК ОбязательныеТочки)) КАК ДвижениеЗаказовОбороты
	|ГДЕ
	|	ДвижениеЗаказовОбороты.КоличествоПриход > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбязательныеТочки.ТочкаРегистрации КАК ТочкаРегистрации
	|ИЗ
	|	ОбязательныеТочки КАК ОбязательныеТочки
	|ГДЕ
	|	НЕ ОбязательныеТочки.ТочкаРегистрации В
	|				(ВЫБРАТЬ
	|					ПройденныеТочки.ТочкаРегистрации
	|				ИЗ
	|					ПройденныеТочки КАК ПройденныеТочки)";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВсеТочкиПройдены = РезультатЗапроса.Пустой();

	Если ВсеТочкиПройдены Тогда
		Возврат ВсеТочкиПройдены;
	КонецЕсли;
	
	//Формируем подробный текст сообщения
	Выборка = РезультатЗапроса.Выбрать();
	Разделитель = ?(ПустаяСтрока(ТекстСообщенияДетализация), "", Символы.ПС) 
				  + НСтрMES("ru='Непройденные точки регистрации: ';en='Not passed registration points: '");
	Пока Выборка.Следующий() Цикл
		ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Выборка.ТочкаРегистрации + "'";
		Разделитель = ", ";		
	КонецЦикла; 
		
	Возврат ВсеТочкиПройдены;
	
КонецФункции

//Проверка на наличие открытых консёрнов в остатках
Функция КонтрольНаличияОткрытыхКонсернов(Заказ, ТекстСообщенияДетализация, ТочкаКонтроляКачества = Неопределено, ИнспектируемыйЭлемент = Неопределено, Дефект = Неопределено, МассивДефектов = Неопределено, ВыводитьРазделитель=Истина) Экспорт
	
	ЕстьОткрытыеКонсерны = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсерныОстатки.Заказ,
		|	КонсерныОстатки.Консерн,
		|	КонсерныОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Консерны.Остатки(, Заказ = &Заказ) КАК КонсерныОстатки
		|ГДЕ
		|	ИСТИНА";
		
	Если ЗначениеЗаполнено(ИнспектируемыйЭлемент) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонсерныОстатки.Консерн.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент";
		Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);	
	КонецЕсли;	
	Если ЗначениеЗаполнено(Дефект) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонсерныОстатки.Консерн.Дефект = &Дефект";
		Запрос.УстановитьПараметр("Дефект", Дефект);	
	КонецЕсли;
	Если ЗначениеЗаполнено(МассивДефектов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонсерныОстатки.Консерн.Дефект В (&МассивДефектов)";
		Запрос.УстановитьПараметр("МассивДефектов", МассивДефектов);	
	КонецЕсли;

	Запрос.УстановитьПараметр("Заказ", Заказ);	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Формируем подробный текст сообщения
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	Если ВыводитьРазделитель Тогда
		Разделитель = НСтрMES("ru='Открытые консерны: ';en='Opened concerns: '");
	Иначе
		Разделитель = "";
	КонецЕсли;
	Для Каждого Запись Из ТаблицаДетальныеЗаписи Цикл
		Если Запись.Консерн.ТочкаПроверкиКачества = ТочкаКонтроляКачества Тогда 
			Продолжить;
		Иначе 
			ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Запись.Консерн.ИнспектируемыйЭлемент + " ("+Запись.Консерн.Дефект+") "+ "'";
			Разделитель = ", ";
			ЕстьОткрытыеКонсерны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОткрытыеКонсерны
	
КонецФункции

//Проверка на наличие непроверенных отремонтированных элементов
Функция КонтрольНаличияНепроверенныхОтремонтированныхЭлементов(Заказ, ТекстСообщенияДетализация, ТочкаКонтроляКачества = Неопределено, ИнспектируемыйЭлемент = Неопределено, Дефект = Неопределено, МассивДефектов = Неопределено, ВыводитьРазделитель=Истина) Экспорт
	
	ЕстьНепроверенныйРемонт = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольКонсерновОстатки.Заказ КАК Заказ,
		|	КонтрольКонсерновОстатки.Консерн КАК Консерн,
		|	КонтрольКонсерновОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.КонтрольКонсернов.Остатки(, Заказ = &Заказ) КАК КонтрольКонсерновОстатки
		|ГДЕ
		|	ИСТИНА";
		
	Если ЗначениеЗаполнено(ИнспектируемыйЭлемент) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонтрольКонсерновОстатки.Консерн.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент";
		Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);	
	КонецЕсли;	
	Если ЗначениеЗаполнено(Дефект) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонтрольКонсерновОстатки.Консерн.Дефект = &Дефект";
		Запрос.УстановитьПараметр("Дефект", Дефект);	
	КонецЕсли;
	Если ЗначениеЗаполнено(МассивДефектов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И КонтрольКонсерновОстатки.Консерн.Дефект В (&МассивДефектов)";
		Запрос.УстановитьПараметр("МассивДефектов", МассивДефектов);	
	КонецЕсли;

	Запрос.УстановитьПараметр("Заказ", Заказ);	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Формируем подробный текст сообщения
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	Если ВыводитьРазделитель Тогда
		Разделитель = НСтрMES("ru='Непроверенный ремонт: ';en='Not checked repair: '");
	Иначе
		Разделитель = "";
	КонецЕсли;
	Для Каждого Запись Из ТаблицаДетальныеЗаписи Цикл
		Если Запись.Консерн.ТочкаПроверкиКачества = ТочкаКонтроляКачества Тогда 
			Продолжить;
		Иначе 
			ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Запись.Консерн.Дефект + " ("+Запись.Консерн.ИнспектируемыйЭлемент+") "+ "'";
			Разделитель = ", ";
			ЕстьНепроверенныйРемонт = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьНепроверенныйРемонт
	
КонецФункции

//Проверка на наличие активных кампаний
Функция КонтрольНаличияКампаний(Заказ, МассивТиповКампаний, МассивКампаний,ТекстСообщенияДетализация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кампании.Ссылка КАК Кампания
		|ПОМЕСТИТЬ Кампании
		|ИЗ
		|	Справочник.Кампании КАК Кампании
		|ГДЕ
		|	(Кампании.ТипКампании В (&ТипКампании)
		|			ИЛИ Кампании.Ссылка В (&Кампании))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КампанииОстатки.Заказ,
		|	КампанииОстатки.Кампания,
		|	КампанииОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Кампании.Остатки(
		|			,
		|			Заказ = &Заказ
		|				И Кампания В
		|					(ВЫБРАТЬ
		|						Кампании.Кампания
		|					ИЗ
		|						Кампании КАК Кампании)) КАК КампанииОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Кампании", МассивКампаний);
	Запрос.УстановитьПараметр("ТипКампании", МассивТиповКампаний);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ЕстьКампании = Не РезультатЗапроса.Пустой();
	
	//Формируем подробный текст сообщения
	Если ЕстьКампании Тогда
		ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		Разделитель = НСтрMES("ru='Заведенные кампании: ';en='Created campaigns: '");
		Для Каждого Запись Из ТаблицаДетальныеЗаписи Цикл
			ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Запись.Кампания + "'";
			Разделитель = ", ";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьКампании;
	
КонецФункции

//Проверка на полную укомплектованность
Функция КонтрольКомплектности(Заказ, ТекстСообщенияДетализация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НекомплектыОстатки.Заказ,
		|	НекомплектыОстатки.Номенклатура,
		|	НекомплектыОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Некомплекты.Остатки(, Заказ = &Заказ) КАК НекомплектыОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);	
	РезультатЗапроса = Запрос.Выполнить();	
	КомплектПолный = РезультатЗапроса.Пустой();
	
	//Формируем подробный текст сообщения
	Если Не КомплектПолный Тогда
		ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		Разделитель = НСтрMES("ru='Неустановленная номенклатура: ';en='Not installed nomenclature: '")+Символы.ПС;
		Для Каждого Запись Из ТаблицаДетальныеЗаписи Цикл
			ТекстСообщенияДетализация = ТекстСообщенияДетализация + Разделитель + "'" + Запись.Номенклатура + "'";
			Разделитель = ","+Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КомплектПолный;
	
КонецФункции

// функция регистрирует дефект
// возврает Истина, если успешно
// в случае неуспеха - описание ошибки возвращается в переменной ТекстОшибки
// возможна ситуация, когда ответственного за дефект не удастся определить. 
// Операция будет зарегистрирована, но в параметре ОписаниеПредупреждения будет соответствующее предупреждение
Функция РегистрацияКонсерна(Заказ,
	 						ТочкаПроверкиКачества,
							ВариантИспользованияИнспектируемогоЭлемента,
							Дефект,
							ТипДефекта,
							ПозицияА,
							ПозицияB,
							ПозицияC,
							ИзображениеДляВыбораИнспектируемогоЭлемента,
							Отремонтирован=Ложь,
							ОбменИсточникДокумента,
							Комментарий="",
							ОписаниеПредупреждения = "",
							ТекстОшибки = "",
							ИнспектируемыйЭлемент = Неопределено,
							СтоимостьКонсерна,
	 						ОтветственныйЗаДефект
	 						) экспорт
							
	Если ИнспектируемыйЭлемент = Неопределено Тогда							
		ИнспектируемыйЭлемент = ВариантИспользованияИнспектируемогоЭлемента.Владелец;
	КонецЕсли;
							
	ДокОперацияКачества = Документы.ОперацияПоКачеству.СоздатьДокумент();
	ДокОперацияКачества.Дата = ТекущаяДата();
	ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Проверка;
	ДокОперацияКачества.ПроверкаOK = Ложь;
	ДокОперацияКачества.Заказ = Заказ;
	ДокОперацияКачества.ИнспектируемыйЭлемент = ИнспектируемыйЭлемент;
	ДокОперацияКачества.ВариантИспользованияИнспектируемогоЭлемента = ВариантИспользованияИнспектируемогоЭлемента;
	ДокОперацияКачества.ТочкаПроверкиКачества = ТочкаПроверкиКачества;
	ДокОперацияКачества.Дефект = Дефект;
	ДокОперацияКачества.ТипДефекта = ТипДефекта;
	ДокОперацияКачества.ПозицияА = ПозицияА;
	ДокОперацияКачества.ПозицияB = ПозицияB;
	ДокОперацияКачества.ПозицияC = ПозицияC;
	ДокОперацияКачества.ОбменИсточникДокумента = ОбменИсточникДокумента;
	ДокОперацияКачества.Комментарий = Комментарий;
	ДокОперацияКачества.Отремонтирован = Отремонтирован;
	ДокОперацияКачества.ИзображениеДляВыбораИнспектируемогоЭлемента = ИзображениеДляВыбораИнспектируемогоЭлемента;
	
	Если НЕ ЗначениеЗаполнено(ОтветственныйЗаДефект) Тогда
		ОтветственныйЗаДефект = РегистрыСведений.ОтветственныеЗаДефекты.ПолучитьОтветственногоЗаДефект(ТочкаПроверкиКачества, ИнспектируемыйЭлемент, Дефект, ТипДефекта);
		
		Если ОтветственныйЗаДефект = Неопределено Тогда
			ОтветственныйЗаДефект = ИнспектируемыйЭлемент.Ответственный;
		КонецЕсли;  
		
	КонецЕсли;
    ДокОперацияКачества.ОтветственныйЗаДефект = ОтветственныйЗаДефект; 

	ДокОперацияКачества.СтоимостьКонсернаНовый = СтоимостьКонсерна;
	
	Возврат ПровестиОперациюПоКачеству(ДокОперацияКачества,ТекстОшибки);
 КонецФункции
 
// функция регистрирует факт успешной проверки на наличие дефекта
// возврает Истина, если успешно
// в случае неуспеха - описание ошибки возвращается в переменной ТекстОшибки
 Функция РегистрацияУспешнойПроверки(Заказ,
				 						ТочкаПроверкиКачества,
										ВариантИспользованияИнспектируемогоЭлемента,
										ОбменИсточникДокумента,
										Комментарий="",
										ТекстОшибки = "",
										ИнспектируемыйЭлемент = Неопределено
	 								)  экспорт
									
	Если ИнспектируемыйЭлемент = Неопределено Тогда							
		ИнспектируемыйЭлемент = ВариантИспользованияИнспектируемогоЭлемента.Владелец;
	КонецЕсли;
	
	ДокОперацияКачества = Документы.ОперацияПоКачеству.СоздатьДокумент();
	ДокОперацияКачества.Дата = ТекущаяДата();
	ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Проверка;
	ДокОперацияКачества.ПроверкаOK = Истина;
	ДокОперацияКачества.Заказ = Заказ;
	ДокОперацияКачества.ИнспектируемыйЭлемент = ИнспектируемыйЭлемент;
	ДокОперацияКачества.ВариантИспользованияИнспектируемогоЭлемента = ВариантИспользованияИнспектируемогоЭлемента;
	ДокОперацияКачества.ТочкаПроверкиКачества = ТочкаПроверкиКачества;
	ДокОперацияКачества.ОбменИсточникДокумента = ОбменИсточникДокумента;
	
	Попытка
		ДокОперацияКачества.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
 		
 КонецФункции
     
// функция регистрирует факт успешной проверки на наличие дефекта
// возврает Истина, если успешно
// в случае неуспеха - описание ошибки возвращается в переменной ТекстОшибки
Функция РегистрацияВыполненияКонтроля(ТочкаПроверкиКачества, ДокументКонсерна, ПроверкаOK, Комментарий="", ТекстОшибки = "")  Экспорт
	 
	СоздаватьНесколькоДокументов = Не ПроверкаOK;
	 
	//Используем транзацию только в случае, если надо создавать несколько документов
	Если СоздаватьНесколькоДокументов Тогда
		НачатьТранзакцию();
	КонецЕсли;

	ДокументКонтроля = Документы.ОперацияПоКачеству.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументКонтроля, ДокументКонсерна, ,"ТочкаПроверкиКачества, Номер, Дата");	
	ДокументКонтроля.Дата = ТекущаяДата();
	ДокументКонтроля.ПроверкаOK = ПроверкаOK;
	ДокументКонтроля.ОперацияКачества = Перечисления.ОперацииКачества.Контроль;
	ДокументКонтроля.ДокументКонсерна = ДокументКонсерна;
	ДокументКонтроля.ТочкаПроверкиКачества = ТочкаПроверкиКачества;
	ДокументКонтроля.Комментарий = Комментарий;

	Попытка
		ДокументКонтроля.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;

	//Если проверка показала, что дефект не был устранен, то мы создаём ещё один документ открытия консерна
	Если СоздаватьНесколькоДокументов Тогда
		
		ДокументПроверки = Документы.ОперацияПоКачеству.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументПроверки, ДокументКонсерна, ,"Номер, Дата");
		ДокументПроверки.Дата = ТекущаяДата();
		ДокументПроверки.ДокументКонсерна = ДокументКонтроля.Ссылка;
		ДокументПроверки.Комментарий = "Дефект не был исправлен. Выполнено повторное открытие консерна. "+Комментарий;
		
		Попытка
			ДокументПроверки.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;

	Возврат Истина;
	
 КонецФункции
 
Функция РегистрацияРемонта(ТочкаПроверкиКачества,
	ДокументКонсерна,
	Комментарий,
	Замена = Ложь,
	Демонтаж = Ложь,
	ОбменИсточникДокумента = "",
	ОписаниеОшибки = "",
	ВремяРемонта = 0) Экспорт
	
	ДокОперацияКачества = Документы.ОперацияПоКачеству.СоздатьДокумент();
	ДокОперацияКачества.Дата = ТекущаяДата();
	ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Ремонт;
	ДокОперацияКачества.ДокументКонсерна = ДокументКонсерна;
	ДокОперацияКачества.ОбменИсточникДокумента = ОбменИсточникДокумента;
	ДокОперацияКачества.Комментарий = Комментарий;
	ДокОперацияКачества.Замена = Замена;
	ДокОперацияКачества.Демонтаж = Демонтаж;   
	ДокОперацияКачества.ВремяРемонта = ВремяРемонта;   
	ДокОперацияКачества.СтоимостьКонсернаНовый =  ДокОперацияКачества.ДокументКонсерна.СтоимостьКонсернаНовый;
	ДокОперацияКачества.ТочкаПроверкиКачества = ТочкаПроверкиКачества;

	Результат = ПровестиОперациюПоКачеству(ДокОперацияКачества,ОписаниеОшибки);

	Если Результат Тогда 
		Если Константы.ИспользоватьКонтрольРемонта.Получить() Тогда    
			ДокОперацияПоКонтролю = Документы.ОперацияПоКонтролю.СоздатьДокумент(); 
			ДокОперацияПоКонтролю.Дата 					= ТекущаяДата();
			ДокОперацияПоКонтролю.Заказ 				= ДокОперацияКачества.Заказ;
			ДокОперацияПоКонтролю.Консерн  				= ДокОперацияКачества.Ссылка; 
			ДокОперацияПоКонтролю.ОперацияКачества  	= ДокОперацияКачества.ОперацияКачества; 
			ДокОперацияПоКонтролю.ПроверкаВыполнена 	= Истина; 
			ДокОперацияПоКонтролю.Комментарий 			= ДокОперацияКачества.Комментарий; 
			ДокОперацияПоКонтролю.ПовторныйРемонт		= Ложь;
			ДокОперацияПоКонтролю.Записать(РежимЗаписиДокумента.Проведение);		
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции
 
 Функция ПровестиОперациюПоКачеству(ДокОперацияКачества,ТекстОшибки)
	 
	 Если ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Ремонт Тогда
		 НадоВыполнитьДействияПоЗакрытиюДефекта = Истина;
		 ИнспектируемыйЭлемент = ДокОперацияКачества.ДокументКонсерна.ИнспектируемыйЭлемент;
		 
	 ИначеЕсли ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Проверка и ДокОперацияКачества.Отремонтирован Тогда
		 НадоВыполнитьДействияПоЗакрытиюДефекта = Истина;
		 ИнспектируемыйЭлемент = ДокОперацияКачества.ВариантИспользованияИнспектируемогоЭлемента.Владелец;
		 
	 Иначе
		 НадоВыполнитьДействияПоЗакрытиюДефекта = Ложь;
	 КонецЕсли; 
	 // теперь подыщем действия по закрытию дефекта
	 Если НадоВыполнитьДействияПоЗакрытиюДефекта Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка КАК ДействиеПриЗакрытииКонсерна,
			|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ВариантДействия
			|ПОМЕСТИТЬ ПодходящиеДействия
			|ИЗ
			|	Справочник.ДействияПриЗакрытииКонсерна.ИнспектируемыеЭлементы КАК ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы
			|ГДЕ
			|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ДействиеАктивно
			|	И ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент
			|
			|СГРУППИРОВАТЬ ПО
			|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка,
			|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ВариантДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна,
			|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна.ОписаниеОбслуживания КАК ОписаниеОбслуживания
			|ИЗ
			|	ПодходящиеДействия КАК ПодходящиеДействия
			|ГДЕ
			|	ПодходящиеДействия.ВариантДействия = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПриЗакрытииКонсерна.Обслуживание)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна,
			|	ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках.ТочкаПроверкиКачества
			|ИЗ
			|	ПодходящиеДействия КАК ПодходящиеДействия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПриЗакрытииКонсерна.СбросРегистрацииНаТочках КАК ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках
			|		ПО ПодходящиеДействия.ДействиеПриЗакрытииКонсерна = ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках.Ссылка
			|ГДЕ
			|	ПодходящиеДействия.ВариантДействия = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПриЗакрытииКонсерна.СбросРегистрации)";

		Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);

		Результат = Запрос.ВыполнитьПакет();

		
		// действия обслуживания
		ВыборкаДетальныеЗаписи = Результат[1].Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаОбслуживание = ДокОперацияКачества.Обслуживание.Добавить();
			СтрокаОбслуживание.ДействиеПриЗакрытииКонсерна = ВыборкаДетальныеЗаписи.ДействиеПриЗакрытииКонсерна;
			СтрокаОбслуживание.ОписаниеОбслуживания = ВыборкаДетальныеЗаписи.ОписаниеОбслуживания;
		КонецЦикла;

		// сброс регистрации на точках проверки качества
		ВыборкаДетальныеЗаписи = Результат[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаСбросРегистрации = ДокОперацияКачества.СбросРегистрацииНаТочкахПроверкиКачества.Добавить();
			СтрокаСбросРегистрации.ДействиеПриЗакрытииКонсерна = ВыборкаДетальныеЗаписи.ДействиеПриЗакрытииКонсерна;
			СтрокаСбросРегистрации.ТочкаПроверкиКачества = ВыборкаДетальныеЗаписи.ТочкаПроверкиКачества;
		КонецЦикла;
	КонецЕсли; 

	НачатьТранзакцию();
	Попытка
		ДокОперацияКачества.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	Исключение         
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(Инфо);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Если НадоВыполнитьДействияПоЗакрытиюДефекта Тогда
		// создадим задачи по обслуживанию
		Для каждого СтрокаОбслуживание Из ДокОперацияКачества.Обслуживание Цикл
			ТекЗадача = Задачи.ОбслуживаниеПриЗакрытииКонсерна.СоздатьЗадачу();
			ТекЗадача.Дата = ТекущаяДата();
			ТекЗадача.Заказ = ДокОперацияКачества.Заказ;
			ТекЗадача.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ТекЗадача.ДокументЗакрытияКонсерна = ДокОперацияКачества.Ссылка;
			ТекЗадача.СработавшееДействие = СтрокаОбслуживание.ДействиеПриЗакрытииКонсерна;
			ТекЗадача.Наименование = СтрокаОбслуживание.ОписаниеОбслуживания;
			Попытка
				ТекЗадача.Записать();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
 КонецФункции
 									
//Определение наличия редкой опции										
Функция КонтрольРедкихОпций(Заказ, Формула) Экспорт
											
	Результат = Неопределено;
	
	Попытка
		Выполнить("Результат = "+Формула);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	ЗаписьЖурналаРегистрации("HTTP06",,,,Результат);
	Возврат Результат;
	
КонецФункции

//Создание документа кампании
Функция ВыполнитьОперациюПоКампании(Заказ, Кампания, ОперацияКампании) Экспорт
	
	Попытка
		
		Кампании = Документы.ОперацияПоКампании.СоздатьДокумент();
		Кампании.Дата = ТекущаяДата();
		Кампании.Заказ = Заказ;
		Кампании.Кампания = Кампания;
		Кампании.ОперацияКампании = ОперацияКампании;
		Кампании.Записать(РежимЗаписиДокумента.Проведение);
		
		РезультатОперацииПоКампании = Истина;
		
	Исключение
		
		РезультатОперацииПоКампании = Ложь;
		
	КонецПопытки;
		
	Возврат РезультатОперацииПоКампании;
	
КонецФункции

//Создание документа некомплекта
Функция ВыполнитьОперациюПоНекомплекту(Заказ, Номенклатура, Количество, ОперацияНекомплекта) Экспорт
	
	Попытка
		
		Некомплект = Документы.ОперацияПоНекомплекту.СоздатьДокумент();
		Некомплект.Дата = ТекущаяДата();
		Некомплект.Заказ = Заказ;
		Некомплект.Номенклатура = Номенклатура;
		Некомплект.Количество = Количество;		
		Некомплект.ОперацияНекомплекта = ОперацияНекомплекта;
		Некомплект.Смена = Производство.ОпределитьСмену(ТекущаяДата());
		Некомплект.Записать(РежимЗаписиДокумента.Проведение);
		
		РезультатОперацииПоНекомплекту = Истина;
		
	Исключение
		
		РезультатОперацииПоНекомплекту = Ложь;
		
	КонецПопытки;
		
	Возврат РезультатОперацииПоНекомплекту;
	
КонецФункции

//Создание документа регистрации прохождения проверки качества
Функция РегистрацияПрохожденияТочкиПроверкиКачества(Заказ, ТочкаПроверкиКачества, Ответственный = Неопределено) Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Документ = Документы.РегистрацияПрохожденияТочкиПроверкиКачества.СоздатьДокумент();
		Документ.Дата = ТекущаяДата();
		Документ.Заказ = Заказ;
		Документ.Ответственный = Ответственный;
		Документ.Смена = Производство.ОпределитьСмену(ТекущаяДата());
		Документ.ТочкаПроверкиКачества = ТочкаПроверкиКачества;
		Документ.Записать(РежимЗаписиДокумента.Проведение);
		
		ДвижениеСоздано = Истина;
	Исключение
		ДвижениеСоздано = Ложь;
	КонецПопытки;
	
	Возврат ДвижениеСоздано;
	
КонецФункции

//Определение состояния инспектирования
Функция ОпределитьСостояниеИнспектирования(Заказ, ТочкаПроверкиКачества) Экспорт
	
	ИнспекцияВыполнена = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Выполнена
		|ИЗ
		|	РегистрСведений.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.СрезПоследних КАК ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних
		|ГДЕ
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ = &Заказ
		|	И ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества = &ТочкаПроверкиКачества";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИнспекцияВыполнена = ВыборкаДетальныеЗаписи.Выполнена; 
	КонецЦикла;
	
	Возврат ИнспекцияВыполнена;
	
КонецФункции
