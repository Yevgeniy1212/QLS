#Область СлужебныеПроцедурыИФункции

// Создает документ движения заказов
// 
// Параметры:
// 	ПараметрыЗагрузки - Структура
// 	ТекстСообщенияОбмена - Строка
Процедура ЗарегистрироватьДвиженияЗаказов(ПараметрыЗагрузки, ТекстСообщенияОбмена) Экспорт

	ИдентификаторСсылки = ПараметрыЗагрузки.ИдентификаторСсылки;
	Версия = ПараметрыЗагрузки.Версия;
	


	ОбъектОбмена = ДесериализоватьИзXML(ТекстСообщенияОбмена);
	// поищем заказ
	VIN = ОбъектОбмена.Заказ.VIN;
	Заказ = Справочники.Заказы.НайтиПоРеквизиту("VIN",VIN);
	Если Заказ = Справочники.Заказы.ПустаяСсылка() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден заказ с VIN ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), VIN);
	КонецЕсли;

	// создадим/обновим движения
	
	//шаг 1. заполним таблицу движений полученную из MES
	ТаблицаЗагруженныхДвижений = Новый ТаблицаЗначений;
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("ТочкаРегистрации",Новый ОписаниеТипов("СправочникСсылка.ТочкиРегистрации"));
	ТаблицаЗагруженныхДвижений.Колонки.Добавить("ПредшествующаяТочкаРегистрации",Новый ОписаниеТипов("СправочникСсылка.ТочкиРегистрации"));
	
	// обработка ситуации, когда предыдущая точка регистрации не указана, в этом случае возьмем точку регистрации из предыдущего движения
	ТочкаРегистрации_ИзПредыдущегоДвижения = Неопределено;
	Для каждого ДвижениеЗаказа из ОбъектОбмена.РегистрацииНаСтанциях.Строка цикл
		СтрокаТаблицы = ТаблицаЗагруженныхДвижений.Добавить();
		СтрокаТаблицы.Дата = ДвижениеЗаказа.Период;
		
		Если Не ДвижениеЗаказа.ТочкаРегистрации = Неопределено Тогда
			СтрокаТаблицы.ТочкаРегистрации = ДвижениеЗаказа.ТочкаРегистрации.Ссылка;
		КонецЕсли;
		
		Если ДвижениеЗаказа.ПредшествующаяТочкаРегистрации = Неопределено Тогда
			СтрокаТаблицы.ПредшествующаяТочкаРегистрации = ТочкаРегистрации_ИзПредыдущегоДвижения;
		Иначе
			СтрокаТаблицы.ПредшествующаяТочкаРегистрации = ДвижениеЗаказа.ПредшествующаяТочкаРегистрации.Ссылка;
		КонецЕсли;
		
		ТочкаРегистрации_ИзПредыдущегоДвижения = СтрокаТаблицы.ТочкаРегистрации;
	
	КонецЦикла;
	
	// шаг 2. Сравним ее с документами в QLS
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗагруженныеДвижения.Дата КАК Дата,
		|	ЗагруженныеДвижения.ТочкаРегистрации КАК ТочкаРегистрации,
		|	ЗагруженныеДвижения.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации
		|ПОМЕСТИТЬ втЗагруженныеДвижения
		|ИЗ
		|	&ЗагруженныеДвижения КАК ЗагруженныеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеПоКонвейеру.Дата КАК Дата,
		|	ДвижениеПоКонвейеру.Ссылка КАК Ссылка,
		|	ДвижениеПоКонвейеру.ТочкаРегистрации КАК ТочкаРегистрации,
		|	ДвижениеПоКонвейеру.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации
		|ПОМЕСТИТЬ ДвиженияВQLS
		|ИЗ
		|	Документ.ДвижениеПоКонвейеру КАК ДвижениеПоКонвейеру
		|ГДЕ
		|	ДвижениеПоКонвейеру.Проведен
		|	И ДвижениеПоКонвейеру.Заказ = &Заказ
		|	И НЕ ДвижениеПоКонвейеру.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗагруженныеДвижения.Дата КАК Дата,
		|	втЗагруженныеДвижения.ТочкаРегистрации КАК ТочкаРегистрации,
		|	втЗагруженныеДвижения.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации,
		|	ДвиженияВQLS.Ссылка КАК НайденныйДокумент,
		|	ВЫБОР
		|		КОГДА ДвиженияВQLS.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДвижениеВQLS,
		|	ВЫБОР
		|		КОГДА втЗагруженныеДвижения.Дата ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьДвижениеВMES
		|ПОМЕСТИТЬ Предварительная
		|ИЗ
		|	втЗагруженныеДвижения КАК втЗагруженныеДвижения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ДвиженияВQLS КАК ДвиженияВQLS
		|		ПО втЗагруженныеДвижения.ТочкаРегистрации = ДвиженияВQLS.ТочкаРегистрации
		|			И втЗагруженныеДвижения.ПредшествующаяТочкаРегистрации = ДвиженияВQLS.ПредшествующаяТочкаРегистрации
		|			И втЗагруженныеДвижения.Дата = ДвиженияВQLS.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Предварительная.Дата КАК Дата,
		|	Предварительная.ТочкаРегистрации КАК ТочкаРегистрации,
		|	Предварительная.ПредшествующаяТочкаРегистрации КАК ПредшествующаяТочкаРегистрации,
		|	Предварительная.ЕстьДвижениеВQLS КАК ЕстьДвижениеТолькоВQLS,
		|	Предварительная.ЕстьДвижениеВMES КАК ЕстьДвижениеТолькоВMES,
		|	Предварительная.НайденныйДокумент КАК НайденныйДокумент
		|ИЗ
		|	Предварительная КАК Предварительная
		|ГДЕ
		|	НЕ(Предварительная.ЕстьДвижениеВQLS
		|				И Предварительная.ЕстьДвижениеВMES)";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ЗагруженныеДвижения", ТаблицаЗагруженныхДвижений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЕстьДвижениеТолькоВMES Тогда
			// создаем новый документ движения
			НовоеДвижение = Документы.ДвижениеПоКонвейеру.СоздатьДокумент();
			НовоеДвижение.Дата = ВыборкаДетальныеЗаписи.Дата;
			НовоеДвижение.Заказ = Заказ;
			НовоеДвижение.ТочкаРегистрации = ВыборкаДетальныеЗаписи.ТочкаРегистрации;
			НовоеДвижение.ПредшествующаяТочкаРегистрации = ВыборкаДетальныеЗаписи.ПредшествующаяТочкаРегистрации;
			НовоеДвижение.Записать(РежимЗаписиДокумента.Проведение)
			
		Иначе
			// удаляем неактуальный документ
			НенужноеДвижение = ВыборкаДетальныеЗаписи.НайденныйДокумент.ПолучитьОбъект();
			НенужноеДвижение.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

// Десериализует из строки XML в объект XDTO  
// 
// Параметры:
// 	ТекстXML - Строка - Исходная строка XML
// Возвращаемое значение:
// 	ОбъектXDTO - полученный объект заданного типа
Функция ДесериализоватьИзXML(ТекстXML)
	
	СообщениеОбмена = Новый ЧтениеXML;
	СообщениеОбмена.УстановитьСтроку(ТекстXML);
	
	ОбъектОбмена = ФабрикаXDTO.ПрочитатьXML(СообщениеОбмена);
	СообщениеОбмена.Закрыть();
	
	Возврат ОбъектОбмена;
	
КонецФункции

#КонецОбласти