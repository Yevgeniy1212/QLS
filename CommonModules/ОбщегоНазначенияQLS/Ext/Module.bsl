#Область ПрограммныйИнтерфейс

// Вызывается при обновлении информационной базы для учета переименований подсистем и ролей в конфигурации.
// В противном случае, возникнет рассинхронизация между метаданными конфигурации и 
// элементами справочника ИдентификаторыОбъектовМетаданных, что приведет к различным ошибкам при работе конфигурации.
//
// В этой процедуре последовательно для каждой версии конфигурации задаются переименования только подсистем и ролей, 
// а переименования остальных объектов метаданных задавать не следует, т.к. они обрабатываются автоматически.
//
// Параметры:
//  Итог - ТаблицаЗначений - таблица переименований, которую требуется заполнить.
//                           См. ОбщегоНазначения.ДобавитьПереименование.
//
// Пример:
//	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
//		"Подсистема._ДемоПодсистемы",
//		"Подсистема._ДемоСервисныеПодсистемы");
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	
	
	
	
КонецПроцедуры

#Область Данные

// Преобразует массив структур в таблицу значений. 
// См. также ОбщегоНазначения.ТаблицаЗначенийВМассив  
// 
// Полученная таблица значений содержит колонки, которые повторяют ключи первой структуры массива.
// 
// Может преобразовывать идентификаторы в ссылки в заданных полях всех строк результирующей таблицы.  
// 
// Не рекомендуется использовать для преобразования массивов
// с большим количеством элементов.
// 
// Параметры:
// 	МассивСтруктур - Массив из Структура - исходный массив
// 	КолонкиСсылок - Структура - параметры преобразования идентификаторов в ссылки: 
// 		в ключе - имя поля, в значении - тип ссылки 
// Возвращаемое значение:
// 	ТаблицаЗначений - коллекция элементов массива в виде строк таблицы 
Функция МассивВТаблицуЗначений(МассивСтруктур, КолонкиСсылок = Неопределено) Экспорт
	
	Если МассивСтруктур.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
	ПреобразовыватьИдентификаторыВСсылки = ТипЗнч(КолонкиСсылок) = Тип("Структура");
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ПримерСтруктуры = МассивСтруктур.Получить(0);
	Для Каждого КлючИЗначение Из ПримерСтруктуры Цикл
		ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Если ПреобразовыватьИдентификаторыВСсылки Тогда
		Для Каждого Строка Из МассивСтруктур Цикл
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Для Каждого КлючИЗначение Из КолонкиСсылок Цикл
				ТипСсылки = КлючИЗначение.Значение;
				ИмяКолонкиСсылки = КлючИЗначение.Ключ;
				ИдентификаторСсылки = НоваяСтрока[ИмяКолонкиСсылки];
				НоваяСтрока[ИмяКолонкиСсылки] = XMLЗначение(ТипСсылки, ИдентификаторСсылки);
			КонецЦикла;
		КонецЦикла;
	
	Иначе
		Для Каждого Строка Из МассивСтруктур Цикл
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#Область Пауза

// Выполняет задержку выполнения кода на указанное время 
// 
// Параметры:
// 	Секунд - Число - количество секунд задержки
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначенияQLS.Пауза", Параметры);
	КонецЕсли;
		
	Попытка
		ФоновоеЗадание.ОжидатьЗавершения(Секунд);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Заполняет таблицу настроек регламентных заданий определяющими параметрами
// 
// Параметры:
// 	Настройки - ТаблицаЗначений - таблица настроек, которую требуется заполнить.
//                           См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура НастройкаРегламентныхЗаданий(Настройки) Экспорт
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПроверокВСистемуКачества;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется = Ложь;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ВыгрузкаСерийныхНомеров;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Возвращает путь к каталогу с символом слэша в конце
// 
// Параметры:
// 	ПутьККаталогу - Строка 
// 	СимволСлеш - Строка - символ, который будет подставлен в конец пути, если символ слэша уже не присутствует
// Возвращаемое значение:
// 	Строка
Функция ДополнитьИмяКаталогаСимволомСлэш(знач ПутьККаталогу,СимволСлеш="/") экспорт

	Если Найти("/\",Прав(ПутьККаталогу,1))=0 Тогда
		ПутьККаталогу = ПутьККаталогу+СимволСлеш;
	КонецЕсли; 
	
	Возврат ПутьККаталогу;

КонецФункции// ДополнитьИмяКаталогаСимволомСлэш()

// Возвращает имя информационной базы и имя сервера, на котором она расположена
// Если база файловая, возвращается пустая структура
// 
// Возвращаемое значение:
// 	Структура, Неопределено - при определении в строке соединения позиций имени сервера и базы, возвращается структура,
//                        содержащая эти значения, иначе Неопределено:
//     * ИБ - Строка - имя информационной базы на сервере
//     * Сервер - Строка - имя сервера
Функция ПолучитьИмяСервера_ИБ() Экспорт
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	Результат = Новый Структура;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияСБД) Тогда
		Возврат Результат;
	Иначе
		// надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(ВРег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(ВРег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		Результат.Вставить("Сервер",ВРЕГ(ИмяСервера));
		Результат.Вставить("ИБ",ВРЕГ(ИмяИБНаСервере));
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Возвращает сборную дату из переданной даты и времени
// 
// Параметры:
// 	Дата - Дата - параметр, из которого выбирается календарная дата
// 	Время - Дата - параметр, из которого выбирается время
// Возвращаемое значение:
// 	Дата - Дата
Функция СоединитьДатуИВремя(Дата, Время) Экспорт

  ДатаСтрока  = Формат(Дата, НСтр("ru='ДФ=""ггггММдд""'"));
  ВремяСтрока = Формат(Время, НСтр("ru='ДФ=""ЧЧммсс""'"));
  Результат  = Дата(ДатаСтрока + ВремяСтрока);

  Возврат Результат;

КонецФункции

// Описание
// 
// Параметры:
// 	РегламентноеЗаданиеОбъект - РегламентноеЗадание - 
// 	ПараметрЗадания - Произвольный - 
// 	НаименованиеРегламентногоЗадания - Строка - 
// 	Расписание - РасписаниеРегламентногоЗадания - 
// 	ИдентификаторПользователяРЗ - УникальныйИдентификатор - 
// 	Использование - Булево - 
Процедура УстановитьПараметрыРегламентногоЗадания(РегламентноеЗаданиеОбъект, Знач ПараметрЗадания, Знач НаименованиеРегламентногоЗадания, Знач Расписание, Знач ИдентификаторПользователяРЗ, Использование = Истина) Экспорт 

	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ПараметрЗадания);
	
	РегламентноеЗаданиеОбъект.Наименование = НаименованиеРегламентногоЗадания;
	РегламентноеЗаданиеОбъект.Параметры = ПараметрыРегламентногоЗадания;
	РегламентноеЗаданиеОбъект.КоличествоПовторовПриАварийномЗавершении = 0;
	РегламентноеЗаданиеОбъект.ИнтервалПовтораПриАварийномЗавершении = 0;
	РегламентноеЗаданиеОбъект.Использование = Использование;
	
	РегламентноеЗаданиеОбъект.Расписание = Расписание;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяРЗ) Тогда
		РегламентноеЗаданиеОбъект.ИмяПользователя = "";
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяРЗ);
		Если ПользовательИБ = Неопределено Тогда
			РегламентноеЗаданиеОбъект.ИмяПользователя = "";
		Иначе
			РегламентноеЗаданиеОбъект.ИмяПользователя = ПользовательИБ.Имя;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет указанное действие над объектом, перехватывая возникающие ошибки
// 
// Параметры:
// 	Объект - СправочникСсылка, ДокументСсылка - над данным объектом будет выполнено действие
// 	Действие - Строка - запись, пометка удаления или непосредственное удаление объекта
// 	РежимЗаписи - РежимЗаписиДокумента - 
// 	РежимПроведения - РежимПроведенияДокумента - 
Процедура ОбработатьОбъектСПерехватомСообщений(Знач Объект, Знач Действие, Знач РежимЗаписи, РежимПроведения = Неопределено) Экспорт
	
	// Текущие сообщения до исключения запоминаем.
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Истина);
	СообщатьПовторно    = ТекущийРежимЗапуска() <> Неопределено;

	Попытка
		
		Если Действие = "Запись" Тогда
			
			Если РежимЗаписи = Неопределено Тогда
				Объект.Записать();
			Иначе
				Если РежимПроведения = Неопределено Тогда
					Объект.Записать(РежимЗаписи);
				Иначе
					Объект.Записать(РежимЗаписи, РежимПроведения);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Действие = "ПометкаУдаления" Тогда
			
			МетаданныеОбъекта = Объект.Метаданные();
			
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
				Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта)
				Или ОбщегоНазначения.ЭтоПланСчетов(МетаданныеОбъекта) Тогда 
				
				Объект.УстановитьПометкуУдаления(Истина, Ложь);
				
			Иначе
				Объект.УстановитьПометкуУдаления(Истина);
				
			КонецЕсли;
			
		ИначеЕсли Действие = "НепосредственноеУдаление" Тогда
			
			Объект.Удалить();
			
		КонецЕсли;
		
	Исключение
		// Перехватываем все сообщенное при ошибке и добавляем их в одно исключение.
		ТекстИсключения = "";
		Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Ложь) Цикл
			ТекстИсключения = ТекстИсключения + Символы.ПС + Сообщение.Текст;
		КонецЦикла;
		
		// Сообщаем предыдущие
		Если СообщатьПовторно Тогда
			СообщитьОтложенныеСообщения(ПредыдущиеСообщения);
		КонецЕсли;
		
		Если ТекстИсключения = "" Тогда
			ВызватьИсключение;
		Иначе
			ВызватьИсключение СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + СокрЛП(ТекстИсключения));
		КонецЕсли;
	КонецПопытки;
	
	Если СообщатьПовторно Тогда
		СообщитьОтложенныеСообщения(ПредыдущиеСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания ОбновитьИсториюДанных
// 
Процедура ОбновитьИсториюДанных() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновитьИсториюДанных);
	ВыполнитьОбновлениеИсторииДанных();
   	
КонецПроцедуры

// Записывает изменения данных из временного хранения на постоянное
// 
Процедура ВыполнитьОбновлениеИсторииДанных() Экспорт
	
	ИсторияДанных.ОбновитьИсторию();
   	
КонецПроцедуры

// Возвращает ссылку на объект указанного типа по переданному УИД 
// 
// Параметры:
// 	Тип - Строка - имя метаданных объекта
// 	УИД - Строка - уникальный идентификатор объекта
// Возвращаемое значение:
// 	Неопределено, Ссылка - если объект найден, то возвращается его ссылка, иначе Неопределено
Функция ПолучитьСсылкуНаСправочникПоУИД(Тип, УИД) Экспорт

	СсылкаНаСправочник = Неопределено;
	
	ВыбратьЛюбой = УИД = "00000000-0000-0000-0000-000000000000";
	СсылкаНаСправочникПоУИД = XMLЗначение(Тип("СправочникСсылка." + Тип), УИД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникОбъект.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК СправочникОбъект
		|ГДЕ
		|	НЕ СправочникОбъект.ПометкаУдаления
		|	И (СправочникОбъект.Ссылка = &СсылкаНаСправочник
		|	ИЛИ &ВыбратьЛюбой)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пользователи", Тип);
	
	Запрос.УстановитьПараметр("ВыбратьЛюбой", ВыбратьЛюбой);
	Запрос.УстановитьПараметр("СсылкаНаСправочник", СсылкаНаСправочникПоУИД);
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СсылкаНаСправочник = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаНаСправочник;

КонецФункции // ()

// Возвращает ссылку на объект указанного типа по переданному реквизиту 
// 
// Параметры:
// 	Тип - Строка - имя метаданных объекта
// 	ИмяРеквизита - Строка - реквизит, по которому производить поиск
// 	Значение - Строка - значение, по которому производить поиск
// Возвращаемое значение:
// 	Неопределено, Ссылка - если объект найден, то возвращается его ссылка, иначе Неопределено
Функция ПолучитьСсылкуНаСправочникПоРеквизиту(Тип, ИмяРеквизита, Значение) Экспорт

	СсылкаНаСправочник = Неопределено;
	
	ВыбратьЛюбой = Значение = "00000000000000000";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникОбъект.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК СправочникОбъект
		|ГДЕ
		|	НЕ СправочникОбъект.ПометкаУдаления
		|	И (СправочникОбъект.Наименование = &ЗначениеРеквизита
		|	ИЛИ &ВыбратьЛюбой)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Пользователи", Тип);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Наименование", ИмяРеквизита);
	
	Запрос.УстановитьПараметр("ВыбратьЛюбой", ВыбратьЛюбой);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", Значение);
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СсылкаНаСправочник = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
				
	Возврат СсылкаНаСправочник;

КонецФункции // ()

// Производит запись параметров и тела запроса в журнал регистрации
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос
// 	Метаданные - Метаданные
// 	Данные - Строка
// 	СобытиеЖурнала - Строка
// 	Тело - Строка - тело запроса
Процедура ЗаписатьВЖурналРегистрацииПараметрыЗапроса(Запрос, Метаданные, Данные, СобытиеЖурнала, Тело = "") Экспорт
	Комментарий = "";
	
	ПараметрыURL = Запрос.ПараметрыURL;
	Если ЗначениеЗаполнено(ПараметрыURL) Тогда
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1ПараметрыURL = %2'"), Комментарий, ПростоеЗначениеВСтрокуJSON(ПараметрыURL) + Символы.ПС);
	КонецЕсли;
	
	ПараметрыЗапроса = Запрос.ПараметрыЗапроса;
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Комментарий = ?(ЗначениеЗаполнено(Комментарий), Комментарий + Символы.ПС, Комментарий);
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1ПараметрыЗапроса = %2'"), Комментарий, ПростоеЗначениеВСтрокуJSON(ПараметрыЗапроса) + Символы.ПС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тело) Тогда
		Комментарий = ?(ЗначениеЗаполнено(Комментарий), Комментарий + Символы.ПС, Комментарий);
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1Тело = %2'"), Комментарий, СокрЛП(Тело) + Символы.ПС);		
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Примечание, Метаданные, Данные, Комментарий);
	
КонецПроцедуры

// Преобразует (сериализует) структуру или соответствие в JSON-строку.
//
// Параметры:
//  Значение - Структура, Соответствие - значение, которое необходимо сериализовать в JSON-строку.
//
// Возвращаемое значение:
//  Строка - JSON-строка.
Функция ПростоеЗначениеВСтрокуJSON(Значение) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение);

	Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Процедура проверяет дубли строк в табличной части
// Параметры:
//	Объект - проверяемый ДокументОбъект
//	ИмяТЧ - имя проверяемой табличной части
//	КлючевыеРеквизиты - массив имен реквизитов, по которым определяется уникальность строки
//	Отказ - отказ продолжения операции
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект, ИмяТЧ, КлючевыеРеквизиты, Отказ, ПредставлениеТЧ = "") Экспорт
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ПустаяСтрока(ПредставлениеТЧ) Тогда
		ПредставлениеТЧ   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КонецЕсли;
	
	ТекстПоляВыборки = "";
	ТекстПоляСоединения = "";	
    ТекстПоляВыгрузки = "";
	ТекстДляСообщенияОДублях = "";
	Для Каждого СтрМас Из КлючевыеРеквизиты Цикл
		ТекстПоляВыборки = ТекстПоляВыборки + "
	|	ТаблицаПроверки." + СтрМас + ",";
		ТекстПоляСоединения = ТекстПоляСоединения + "
	|	И ТаблицаПроверки." + СтрМас + " = ДублирующиесяСтроки."+ СтрМас;
		ТекстПоляВыгрузки = ТекстПоляВыгрузки + СтрМас + ",";
		
		ПредставлениеРеквизита = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрМас].Синоним;
		
		ТекстДляСообщенияОДублях = ТекстДляСообщенияОДублях + """"  + ПредставлениеРеквизита  + """, "
	КонецЦикла;	
	
	ТекстДляСообщенияОДублях = Лев(ТекстДляСообщенияОДублях, СтрДлина(ТекстДляСообщенияОДублях) - 2);
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыборки,1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыгрузки,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки, " +
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,"+
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО " +
		ТекстПоляВыборки + "
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки " +
	     		ТекстПоляСоединения;
	Запрос.УстановитьПараметр("ТаблицаПроверки",Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КлючевыеРеквизиты.Количество() = 1 Тогда
		ШаблонСообщения = НСтр("ru='Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по значению поля %НазванияПолей%.';en='The data in the line %НомерСтроки% of the list ""%ПредставлениеТЧ%"" is identical to the data in the line  %ПерваяСтрока% by the value of the field %НазванияПолей%.'");//SCR 496 01/06/2017
	Иначе
		ШаблонСообщения = НСтр("ru='Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по сочетанию значений полей %НазванияПолей%.';en='The data in the line %НомерСтроки% of the list ""%ПредставлениеТЧ%"" is identical to the data in the line  %ПерваяСтрока% by the combination of values of the fields %НазванияПолей%.'");//SCR 496 01/06/2017
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "НомерСтроки");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		
	КонецЦикла;
КонецПроцедуры

// Возвращает ключ данных для подстановки в сообщение пользователю
// Ключ данных нужен при групповой обработке объектов - если он установлен, то при нажатии пользователем на сообщение
// будет открываться форма объекта
//
//	Параметры:
//		Объект - Произвольный - объект, для которого нужно получить ключ данных
//	
//	Возвращаемое значение
//		Ссылка - ссылка на объект информационной базы
//
Функция КлючДанныхДляСообщенияПользователю(Объект) Экспорт
	
	КлючДанных = Неопределено;
	XMLТипЗнч = XMLТипЗнч(Объект); 
	
	Если XMLТипЗнч <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч.ИмяТипа;
		Если Найти(ТипЗначенияСтрокой, "Object.") > 0 Тогда
			КлючДанных = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючДанных;
	
КонецФункции

Функция ЭтоСтроковыйИдентификатор(Идентификатор) Экспорт
	
	ЭтоИдентификатор = Истина;
	
	СтруктураПроверка = Новый Структура;
	Попытка
		СтруктураПроверка.Вставить(Идентификатор, Неопределено);	
	Исключение
		ЭтоИдентификатор = Ложь;	
	КонецПопытки;
	
	Возврат ЭтоИдентификатор;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОтложенныеСообщения(Знач Сообщения)
	
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьСтроку(Строка, СтрокаРазделитель) экспорт
    НоваяСтрока = СтрЗаменить(Строка,СтрокаРазделитель, Символы.ПС);
    МассивСтрок = новый Массив();
    Для i = 1 По СтрЧислоСтрок(НоваяСтрока) Цикл
		ТекСтрока = СтрПолучитьСтроку(НоваяСтрока, i);
		Если Не ПустаяСтрока(ТекСтрока) Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли; 
    КонецЦикла;
    возврат МассивСтрок;
конецФункции 

#КонецОбласти