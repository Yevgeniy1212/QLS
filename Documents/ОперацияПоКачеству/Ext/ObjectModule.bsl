#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)    
	
	Если ОбменДанными.Загрузка Тогда
     	Возврат;
	КонецЕсли;
	
	Если ОперацияКачества = Перечисления.ОперацииКачества.Ремонт Тогда
		// скопируем реквизиты документа- основания
		ИнспектируемыйЭлемент = ДокументКонсерна.ИнспектируемыйЭлемент;
		Заказ = ДокументКонсерна.Заказ;
		ИнспектируемыйЭлемент = ДокументКонсерна.ИнспектируемыйЭлемент;
		ВариантИспользованияИнспектируемогоЭлемента = ДокументКонсерна.ВариантИспользованияИнспектируемогоЭлемента;
		Дефект = ДокументКонсерна.Дефект;
		ТипДефекта = ДокументКонсерна.ТипДефекта;
		ПозицияА = ДокументКонсерна.ПозицияА;
		ПозицияB = ДокументКонсерна.ПозицияB;
		ПозицияC = ДокументКонсерна.ПозицияC;
		ИзображениеДляВыбораИнспектируемогоЭлемента = ДокументКонсерна.ИзображениеДляВыбораИнспектируемогоЭлемента;
		ОтветственныйЗаДефект = ДокументКонсерна.ОтветственныйЗаДефект;
		ИзображениеИнспектируемогоЭлемента = ДокументКонсерна.ИзображениеИнспектируемогоЭлемента;
		ОбластьНаИзображении = ДокументКонсерна.ОбластьНаИзображении;
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацияПоКачеству.ОперацияКачества КАК ОперацияКачества,
		|	ОперацияПоКачеству.Дата КАК период,
		|	ВЫБОР
		|		КОГДА ОперацияПоКачеству.ОперацияКачества = ЗНАЧЕНИЕ(Перечисление.ОперацииКачества.Проверка)
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА ОперацияПоКачеству.ОперацияКачества = ЗНАЧЕНИЕ(Перечисление.ОперацииКачества.Проверка)
		|			ТОГДА ОперацияПоКачеству.Ссылка
		|		ИНАЧЕ ОперацияПоКачеству.ДокументКонсерна
		|	КОНЕЦ КАК Консерн,
		|	1 КАК Количество,
		|	ОперацияПоКачеству.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
		|	ОперацияПоКачеству.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	ОперацияПоКачеству.Заказ КАК Заказ,
		|	ОперацияПоКачеству.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
		|	ОперацияПоКачеству.ПозицияА КАК ПозицияА,
		|	ОперацияПоКачеству.ПозицияB КАК ПозицияB,
		|	ОперацияПоКачеству.ПозицияC КАК ПозицияC,
		|	ОперацияПоКачеству.Дефект КАК Дефект,
		|	ОперацияПоКачеству.ТипДефекта КАК ТипДефекта,
		|	ОперацияПоКачеству.ИзображениеДляВыбораИнспектируемогоЭлемента КАК ИзображениеДляВыбораИнспектируемогоЭлемента,
		|	ОперацияПоКачеству.Смена КАК Смена,
		|	ОперацияПоКачеству.Отремонтирован КАК Отремонтирован,
		|	ОперацияПоКачеству.ПроверкаOK КАК ПроверкаOK,
		|	ОперацияПоКачеству.СтоимостьКонсернаНовый КАК СтоимостьКонсернаНовый
		|ИЗ
		|	Документ.ОперацияПоКачеству КАК ОперацияПоКачеству
		|ГДЕ
		|	ОперацияПоКачеству.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РеквизитыШапки = Запрос.Выполнить().Выгрузить()[0];
	ДатаСмены = Производство.ПолучитьДатуСмены(РеквизитыШапки.Период,РеквизитыШапки.Смена);
	//флТребуетсяПроверитьНаНеобходимостьВыполненияДействийПриУстраненииДефекта = Ложь;
	Если Не (РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Проверка И РеквизитыШапки.ПроверкаOK) И Не РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Контроль Тогда
		// движение по регистру качества делаем во всех случаях, кроме случая успешной проверки
		Движения.Консерны.Записывать = Истина;
		Движение = Движения.Консерны.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,РеквизитыШапки);
		Движение.ДатаСмены = ДатаСмены;
	КонецЕсли; 

	Если РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Проверка и РеквизитыШапки.Отремонтирован Тогда
		// отразим еще и устранение дефекта
		Движение = Движения.Консерны.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,РеквизитыШапки);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.ДатаСмены = ДатаСмены;
	КонецЕсли; 
	
	Если РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Ремонт Тогда
		// в случае ремонта сделаем проверку, может этот дефект уже отремонтировали
		Движения.Записать();

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонсерныОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.Консерны.Остатки(
			|			,
			|			Заказ = &Заказ
			|				И Консерн = &Консерн) КАК КонсерныОстатки
			|ГДЕ
			|	КонсерныОстатки.КоличествоОстаток < 0";

		Запрос.УстановитьПараметр("Заказ", РеквизитыШапки.Заказ);
		Запрос.УстановитьПараметр("Консерн", РеквизитыШапки.Консерн);

		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Отказ = Истина;
			ВызватьИсключение НСтр("ru='Невозможно зарегистрировать устранение консерна по документу ';en='Unable to register the removing of concern by the document '")+РеквизитыШапки.Консерн+НСтр("ru=' так как он уже устранен.';en=' as it was already removed.'");
		КонецЕсли; 
	КонецЕсли; 
	ЗарегистрироватьСбросРегистрацииНаТочкахПроверкиКачества(РеквизитыШапки);
	
	// регистрация обязательной проверки
	Если РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Проверка Тогда 
		Если ПроверкаOK Или РеквизитыШапки.Отремонтирован Тогда	
			Движения.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.Записывать = Истина;
			записьРегистра = Движения.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.Добавить();
			записьРегистра.Период = Дата;
			записьРегистра.Заказ = Заказ;
			записьРегистра.ТочкаПроверкиКачества = ТочкаПроверкиКачества;
			записьРегистра.ИнспектируемыйЭлемент = ИнспектируемыйЭлемент;
			записьРегистра.Выполнена = Истина;
			записьРегистра.Ремонт = РеквизитыШапки.Отремонтирован;
		КонецЕсли;
	КонецЕсли;
	
	//Если ремонт выполнен некачественно, то создаём ещё один документ отрытия консерна
	//Если РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Контроль И Не ПроверкаOK Тогда
	//	
	//	ПовторноОткрытыйКонсерн = Документы.ОперацияПоКачеству.СоздатьДокумент();
	//	ЗаполнитьЗначенияСвойств(ПовторноОткрытыйКонсерн,РеквизитыШапки.Консерн);
	//	ПовторноОткрытыйКонсерн.Дата = ТекущаяДата();
	//	//ПовторноОткрытыйКонсерн.Записать();
	//		
	//КонецЕсли;
	
	Если ОперацияКачества = Перечисления.ОперацииКачества.Проверка
		И Не ПроверкаOK
		И Константы.ЗапретитьПовторныеДефекты.Получить() = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонсерныОстатки.Консерн КАК Консерн
			|ИЗ
			|	РегистрНакопления.Консерны.Остатки(
			|			,
			|			Консерн <> &Ссылка
			|				И Заказ = &Заказ
			|				И Консерн.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент
			|				И Консерн.Дефект = &Дефект
			|				И Консерн.ПозицияА = &ПозицияА
			|				И Консерн.ПозицияB = &ПозицияB
			|				И Консерн.ПозицияC = &ПозицияC) КАК КонсерныОстатки
			|ГДЕ
			|	КонсерныОстатки.КоличествоОстаток > 0";
			
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
		Запрос.УстановитьПараметр("Дефект", Дефект);
		Запрос.УстановитьПараметр("ПозицияА", ПозицияА);
		Запрос.УстановитьПараметр("ПозицияB", ПозицияB);
		Запрос.УстановитьПараметр("ПозицияC", ПозицияC);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Отказ = Истина;
			ВызватьИсключение "Данный дефект уже заведен";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьСбросРегистрацииНаТочкахПроверкиКачества(РеквизитыШапки)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	    "ВЫБРАТЬ
	    |	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
	    |ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
	    |ИЗ
	    |	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
	    |ГДЕ
	    |	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества
	    |	И ТочкиПроверкиКачестваИнспектируемыеЭлементы.ПроверкаОбязательна = ИСТИНА
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	ОперацияПоКачествуСбросРегистрацииНаТочкахПроверкиКачества.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	    |ПОМЕСТИТЬ СписокТочек
	    |ИЗ
	    |	Документ.ОперацияПоКачеству.СбросРегистрацииНаТочкахПроверкиКачества КАК ОперацияПоКачествуСбросРегистрацииНаТочкахПроверкиКачества
	    |ГДЕ
	    |	ОперацияПоКачествуСбросРегистрацииНаТочкахПроверкиКачества.Ссылка = &Ссылка
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	ОперацияПоКачествуСбросРегистрацииНаТочкахПроверкиКачества.ТочкаПроверкиКачества
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	СписокТочек.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества
	    |ИЗ
	    |	СписокТочек КАК СписокТочек
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ
	    |	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ КАК Заказ,
	    |	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
	    |	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
	    |ИЗ
	    |	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних(
	    |			,
	    |			Заказ = &Заказ
	    |				И ТочкаПроверкиКачества В
	    |					(ВЫБРАТЬ
	    |						СписокТочек.ТочкаПроверкиКачества
	    |					ИЗ
	    |						СписокТочек КАК СписокТочек)
	    |				И ИнспектируемыйЭлемент В
	    |					(ВЫБРАТЬ
	    |						ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
	    |					ИЗ
	    |						ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов)) КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
	    |ГДЕ
	    |	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Выполнена";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);

	Результат = Запрос.ВыполнитьПакет();

	// сброс точек
	ВыборкаДетальныеЗаписи = Результат[2].Выбрать();

	Если Не Результат[2].Пустой() Тогда
		Движения.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			записьРегистра = Движения.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.Добавить();
			записьРегистра.Период = Дата;
			записьРегистра.Заказ = Заказ;
			записьРегистра.ТочкаПроверкиКачества = ВыборкаДетальныеЗаписи.ТочкаПроверкиКачества;
			записьРегистра.Выполнена = Ложь;						
		КонецЦикла;
	КонецЕсли; 

	// сброс обязательных проверок
	ВыборкаДетальныеЗаписи = Результат[3].Выбрать();

	Если Не Результат[3].Пустой() И РеквизитыШапки.ОперацияКачества = Перечисления.ОперацииКачества.Ремонт Тогда
		Движения.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			записьРегистра = Движения.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.Добавить();
			записьРегистра.Период = Дата;
			записьРегистра.Заказ = ВыборкаДетальныеЗаписи.Заказ;
			записьРегистра.ТочкаПроверкиКачества = ВыборкаДетальныеЗаписи.ТочкаПроверкиКачества;
			записьРегистра.ИнспектируемыйЭлемент = ВыборкаДетальныеЗаписи.ИнспектируемыйЭлемент;
			записьРегистра.Выполнена = Ложь;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти


