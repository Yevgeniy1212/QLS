
#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьСтатусЗаказа(Запрос, Ответ) Экспорт
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	ДанныеЗапроса = Запрос.Тело;
	Если Запрос.Тело = Неопределено Тогда
		ТекстОтвета = "Не удалось получить данные для регистрации статуса заказа.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета);
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));
		
		Отказ = Ложь;
		
		ДанныеОперации = ДанныеЭлемента(ДанныеЗапроса, РабочееМесто);
		
		// Проверка на заполненность реквизита ОтветственныйЗаДефект в теле запроса при открытии консерна (status = "открыт").
		// Ранее выполнялось автоопределение ответственного за дефект, если он не передан в запросе.
		// С 09.02.2023 г. пустое значение реквизита ОтветственныйЗаДефект при статусе в теле запроса "открыт" - считается ошибкой.
		Если НРег(ДанныеЗапроса.status) = "открыт" И НЕ ЗначениеЗаполнено(ДанныеОперации.ОтветственныйЗаДефект) Тогда
			Результат.errorMessage = "Поле ""Ответственный за дефект"" не заполнено.";
			Результат.isError = Истина;
			
			Отказ = Истина;
		КонецЕсли;
		
		// Проверка инспектируемого элемента на применимость к заказу по формуле применимости.
		// Если формула не выполняется, документ не создаем и возвращаем ошибку.
		ФормулаПрименимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОперации.ИнспектируемыйЭлемент, "ФормулаПрименимости");
		
		Если ЗначениеЗаполнено(ФормулаПрименимости)
				И НЕ Справочники.ИнспектируемыеЭлементы.ВычислитьФормулуПрименимости(ФормулаПрименимости, Запрос.ДополнительныеСвойства.Заказ) Тогда
			
			Результат.errorMessage = "Инспектируемый элемент неприменим к заказу по формуле применимости.";
			Результат.isError = Истина;
			
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ТекстОтвета = "";
			ДокументСоздан = РегистрацияКонсерна(ДанныеОперации, Заказ, ТекстОтвета);
			
			РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(РабочееМесто,Заказ,Ложь);
			
			Если ДокументСоздан = Истина Тогда
				Результат.errorMessage = "Документ создан";
				Результат.isError = Ложь;
			Иначе
				Результат.errorMessage = ТекстОтвета;
				Результат.isError = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Ответ.Данные = Результат;
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗавершитьИнспекциюЗаказа(Запрос, Ответ) Экспорт 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);
	
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	Попытка
		
		ДанныеОперации = ДанныеДляЗавершенияИнспекции(РабочееМесто, Заказ);
		Если ДанныеОперации = Неопределено Тогда
			ТекстОтвета = "Не удалось собрать все данные для завершения инспекции.";
			РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 500);
			Возврат;	
		КонецЕсли;	

		ТекстСообщения = "";
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));

		ЭтоОшибка = Не СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(ДанныеОперации, ТекстСообщения);	

		Если Не ЭтоОшибка Тогда
			РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(РабочееМесто,Заказ,Истина);
        КонецЕсли;
				
		Результат.errorMessage = ТекстСообщения;
		Результат.isError = ЭтоОшибка;
		
		Ответ.Данные = Результат;
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьРемонт(Запрос, Ответ) Экспорт 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);  
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);
	
	ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ТочкаПроверкиКачества");
	
	П = Новый Структура("documentDefectGUID,documentDefectComment,documentDefectReplace,documentDefectRemove,documentDefectRepairTime");
	ЗаполнитьЗначенияСвойств(П,Запрос.Тело);

	Попытка
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));
		
		//Должен быть Заказ
		//Должен быть Консерн
	
		//Создание 	       
		СообщениеОбОшибке = "";
		ДокументСоздан = QNS.РегистрацияРемонта(ТочкаПроверкиКачества,
			П.documentDefectGUID,
			П.documentDefectComment, 
			П.documentDefectReplace, 
			П.documentDefectRemove, 
			"", 
			СообщениеОбОшибке,
			П.documentDefectRepairTime);		
		Если ДокументСоздан = Истина Тогда
			Результат.errorMessage = "";
			Результат.isError = Ложь;     

			РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(РабочееМесто,Заказ,Ложь);

		Иначе
			Результат.errorMessage = СообщениеОбОшибке;
			Результат.isError = Истина;
		КонецЕсли;    
		
		Ответ.Данные = Результат;       

	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьКонтроль(Запрос, Ответ) Экспорт 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("РабочееМесто", РабочееМесто);  
	Заказ = Неопределено;
	Запрос.ДополнительныеСвойства.Свойство("Заказ", Заказ);  
	
	П = Новый Структура("documentDefectGUID,documentDefectComment,documentStatus,documentDefectRepairTime");
	ЗаполнитьЗначенияСвойств(П,Запрос.Тело);

	Попытка
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));   
		
		ОперацияКачества = Перечисления.ОперацииКачества.Ремонт; 
		ПовторныйРемонт = Истина;
		Если РабочееМесто.ТочкаПроверкиКачества.ТипИнтерфейса = Перечисления.ИнтерфейсыОператоров.Инспектор Тогда
			ОперацияКачества = Перечисления.ОперацииКачества.Контроль;  
			ПовторныйРемонт = Ложь;
		КонецЕсли;
		
		ДокОперацияПоКонтролю = Документы.ОперацияПоКонтролю.СоздатьДокумент();
		ДокОперацияПоКонтролю.Дата					= ТекущаяДата();
		ДокОперацияПоКонтролю.Заказ 					= Заказ;
		ДокОперацияПоКонтролю.Консерн  				= П.documentDefectGUID; 
		ДокОперацияПоКонтролю.ОперацияКачества  	= ОперацияКачества; 
		ДокОперацияПоКонтролю.ПроверкаВыполнена 	= П.documentStatus; 
		ДокОперацияПоКонтролю.Комментарий 			= П.documentDefectComment;
		ДокОперацияПоКонтролю.ПовторныйРемонт	= ПовторныйРемонт;
		ДокОперацияПоКонтролю.ВремяРемонта		= П.documentDefectRepairTime;
		ДокОперацияПоКонтролю.Записать(РежимЗаписиДокумента.Проведение);		

		Результат.errorMessage = "";
		Результат.isError = Ложь;     
		
		Ответ.Данные = Результат;       
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗарегистрироватьВыполнениеЗадачи(Запрос, Ответ) Экспорт 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	П = Новый Структура("taskId");
	ЗаполнитьЗначенияСвойств(П,Запрос.Тело);

	Попытка
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));
		
		//Должен быть Заказ
		//Должен быть Задача
		
		Попытка
			Задача = П.taskId.ПолучитьОбъект();
			Задача.ВыполнитьЗадачу();
			ЗадачаВыполнена = Истина;
		Исключение
			ЗадачаВыполнена = Ложь;		
		КонецПопытки;
		
		Если ЗадачаВыполнена = Истина Тогда
			Результат.errorMessage = 	ОбработатьТекстСообщения("Задача выполнена. ", "Task completed.");
			Результат.isError = Ложь;
		Иначе
			Результат.errorMessage = ОбработатьТекстСообщения("Не удалось выполнить задачу. ", "Task failed.");
			Результат.isError = Истина;
		КонецЕсли;            
		
		Ответ.Данные = Результат;       
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗавершитьИнспекциюРемонтника(Запрос, Ответ) Экспорт 
	
	Если Ответ.Готов() Тогда
		Возврат;
	КонецЕсли;
	
	П = Новый Структура("Заказ,РабочееМесто,ТочкаПроверкиКачества"); 
	ЗаполнитьЗначенияСвойств(П,Запрос.ДополнительныеСвойства);    
	
	Если ТипЗнч(П.РабочееМесто) = Тип("СправочникСсылка.РабочиеМестаОператоров") Тогда   
		П.ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(П.РабочееМесто, "ТочкаПроверкиКачества");
	Иначе
		ТекстОтвета = "Не удалось определить ТочкаПроверкиКачества.";
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ТекстОтвета, 500);
		Возврат;	
	КонецЕсли;
	
	Попытка
	
		ТекстСообщения = "";
		
		ЭтоОшибка = Не СоздатьДокументРегистрацияПрохожденияТочекРемонтника(П, ТекстСообщения);	  
		
		Если Не ЭтоОшибка Тогда
			РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(П.РабочееМесто,П.Заказ,Истина);
		КонецЕсли;
		
		Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Worstation_2_0_ОбщиеФункции.ПространствоURI(), "RegisterResponse"));
		Результат.errorMessage = ТекстСообщения;
		Результат.isError = ЭтоОшибка;
		
		Ответ.Данные = Результат;
	
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(".", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		РаботаСHTTPСервисами.ОтправитьСообщениеОбОшибкеВСервис(Ответ, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ВыполняетсяКонтрольВыполненногоРемонта(Заказ,ТочкаПроверкиКачества,СообщениеОДефектах) Экспорт
	
	МассивСтрокДефектов = Новый Массив;
	
	Для Каждого Стр Из КонтролируемыеКонсерныЗаказа(Заказ, ТочкаПроверкиКачества) Цикл   
		СтрокаДефекта = "'" + СокрЛП(Стр.ИнспектируемыйЭлемент) + " ("+СокрЛП(Стр.Дефект)+") "+ "'";
		МассивСтрокДефектов.Добавить(СтрокаДефекта);	
	КонецЦикла;   
	
	СообщениеОДефектах = СтрСоединить(МассивСтрокДефектов,"," + Символы.ПС); 
	
	Возврат (МассивСтрокДефектов.Количество()=0);
	
КонецФункции    

Функция КонтролируемыеКонсерныЗаказа(Заказ, ТочкаПроверкиКачества) Экспорт   
	
	//Функция не работает, если не используется Функциональная опция "КонтрольРемонта"
	ИспользоватьКонтрольРемонта  = Константы.ИспользоватьКонтрольРемонта.Получить();
	Если Не ИспользоватьКонтрольРемонта Тогда
		Т = Новый ТаблицаЗначений;
		Возврат Т;
	КонецЕсли;
	
	ТребуетсяПроверка  = Ложь; // Это ремонтник
	Если  ТочкаПроверкиКачества.ТипИнтерфейса = Перечисления.ИнтерфейсыОператоров.Инспектор Тогда
		ТребуетсяПроверка = Истина;
	КонецЕсли;       
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля КАК ПулИнспектируемыхЭлементовДляКонтроля,
	               |	ТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля.ВсеИнспектируемыеЭлементы КАК ВсеИнспектируемыеЭлементы,
	               |	ТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля.ВсеДефекты КАК ВсеДефекты,
	               |	ТочкиПроверкиКачества.АктивироватьВкладкуКонтроль КАК АктивироватьВкладкуКонтроль
	               |ПОМЕСТИТЬ ДанныеТочкиПроверкиКачества
	               |ИЗ
	               |	Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
	               |ГДЕ
	               |	ТочкиПроверкиКачества.Ссылка = &ТочкаПроверкиКачества
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтрольКонсерновОстатки.Консерн.Дата КАК Дата,
	               |	КонтрольКонсерновОстатки.Консерн КАК Консерн,
	               |	КонтрольКонсерновОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	               |	КонтрольКонсерновОстатки.Консерн.Дефект КАК Дефект,
	               |	КонтрольКонсерновОстатки.Консерн.ТипДефекта КАК ТипДефекта,
	               |	КонтрольКонсерновОстатки.Консерн.ПозицияА КАК ПозицияА,
	               |	КонтрольКонсерновОстатки.Консерн.ПозицияB КАК ПозицияB,
	               |	КонтрольКонсерновОстатки.Консерн.ПозицияC КАК ПозицияC,
	               |	КонтрольКонсерновОстатки.Консерн.Комментарий КАК Комментарий,
				   |	КонтрольКонсерновОстатки.Консерн.ИзображениеИнспектируемогоЭлемента КАК ИзображениеИнспектируемогоЭлемента,
				   |	КонтрольКонсерновОстатки.Консерн.ОбластьНаИзображении КАК ОбластьНаИзображении
	               |ИЗ
	               |	РегистрНакопления.КонтрольКонсернов.Остатки(
	               |			,
	               |			Заказ = &Заказ
	               |				И ТребуетсяПроверка = &ТребуетсяПроверка) КАК КонтрольКонсерновОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТочкиПроверкиКачества КАК ДанныеТочкиПроверкиКачества
	               |		ПО (ДанныеТочкиПроверкиКачества.АктивироватьВкладкуКонтроль)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПулыИнспектируемыхЭлементов.ИнспектируемыеЭлементы КАК ИнспектируемыеЭлементы
	               |		ПО (ИнспектируемыеЭлементы.Ссылка = ДанныеТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля)
	               |			И КонтрольКонсерновОстатки.Консерн.ИнспектируемыйЭлемент = ИнспектируемыеЭлементы.ИнспектируемыйЭлемент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПулыИнспектируемыхЭлементов.Дефекты КАК Дефекты
	               |		ПО (Дефекты.Ссылка = ДанныеТочкиПроверкиКачества.ПулИнспектируемыхЭлементовДляКонтроля)
	               |			И КонтрольКонсерновОстатки.Консерн.Дефект = Дефекты.Дефект
	               |ГДЕ
	               |	(ДанныеТочкиПроверкиКачества.ВсеИнспектируемыеЭлементы
	               |			ИЛИ НЕ ИнспектируемыеЭлементы.ИнспектируемыйЭлемент ЕСТЬ NULL)
	               |	И (ДанныеТочкиПроверкиКачества.ВсеДефекты
	               |			ИЛИ НЕ Дефекты.Дефект ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("Заказ", Заказ); 
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);  
	Запрос.УстановитьПараметр("ТребуетсяПроверка", ТребуетсяПроверка);

	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразоватьДанныеОперации(ДанныеОперации, Данные)
	
	Данные.Вставить("ИнспектируемыйЭлемент", ДанныеОперации.inspectionItemId);
	Данные.Вставить("Дефект",                				Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.defectId, Справочники.Дефекты));
	Данные.Вставить("ПозицияА",   					Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.positionAId, Справочники.ВариантыПозицииA));
	Данные.Вставить("ПозицияB",	  				Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.positionBId, Справочники.ВариантыПозицииB));
	Данные.Вставить("ПозицияC",					Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.positionCId, Справочники.ВариантыПозицииC));
	Данные.Вставить("ТипДефекта", 					Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.defectTypeId, Справочники.ТипыДефектов));

	//Если Не ЗначениеЗаполнено(ДанныеОперации.concernCostId) Тогда
	//	Данные.Вставить("СтоимостьКонсерна", 0);
	//Иначе
	//	Данные.Вставить("СтоимостьКонсерна", 	 РегистрыСведений.СтоимостиКонсерна.ПолучитьСтоимостьПоУИД(
	//			Новый УникальныйИдентификатор(ДанныеОперации.concernCostId)
	//		)
	//	);  
	//КонецЕсли;
	Данные.Вставить("СтоимостьКонсернаНовый", 	Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.concernCostId, Справочники.СтоимостьКонсернов));
	Данные.Вставить("ОтветственныйЗаДефект", 	Worstation_2_0_ОбщиеФункции.ПолучитьСсылкуПоУИ(ДанныеОперации.responsibleId, Справочники.ОтветственныйЗаДефект));

	Данные.Вставить("Отремонтирован", 		 	ДанныеОперации.isRepairedOnLine);
	Данные.Вставить("Комментарий", 			 	ДанныеОперации.commentary);
	Данные.Вставить("ПроверкаOK", 			 		ДанныеОперации.status = "проверен"); 
	
	СпособОбнаруженияДефектов = Перечисления.СпособОбнаруженияДефектов.static;
	Если ДанныеОперации.Установлено("concernDiscoveryTypeId") Тогда
		Если  ЗначениеЗаполнено(ДанныеОперации.concernDiscoveryTypeId) Тогда
			СпособОбнаруженияДефектов = Перечисления.СпособОбнаруженияДефектов[ДанныеОперации.concernDiscoveryTypeId];
		КонецЕсли;
	КонецЕсли;
	Данные.Вставить("СпособОбнаруженияДефектов", СпособОбнаруженияДефектов);
	
	Данные.Вставить("ИзображениеИнспектируемогоЭлемента", ДанныеОперации.imageId);
	Данные.Вставить("ОбластьНаИзображении", ДанныеОперации.points);
	
	// Валидация строки JSON - области на изображении (список списков чисел).
	// Код в попытке, поэтому текст исключения вернется в ответе.
	Если ЗначениеЗаполнено(ДанныеОперации.points) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеОперации.points);
		points = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ТипЗнч(points) <> Тип("Массив") Тогда
			ВызватьИсключение "Неверный формат области на изображении.";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЭлемента(ДанныеОперации, РабочееМесто)
	
	ИнспектируемыйЭлемент  = ДанныеОперации.inspectionItemId;
	
	ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ТочкаПроверкиКачества");
	
	ВариантИспользования = ВариантИспользованияИнспектируемогоЭлемента(ТочкаПроверкиКачества, ИнспектируемыйЭлемент);
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИнспектируемыйЭлемент, "Ответственный");
	//Ответственный - нужен для того, чтобы подменить ОтветственныйЗаДефект, если он не заполнен
	
	Данные.Вставить("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	Данные.Вставить("ВариантИспользованияИнспектируемогоЭлемента", ВариантИспользования);
	
	ПреобразоватьДанныеОперации(ДанныеОперации, Данные);
	
	Возврат Данные;
	
КонецФункции

Функция ВариантИспользованияИнспектируемогоЭлемента(ТочкаПроверкиКачества, ИнспектируемыйЭлемент)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользования
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
	|ГДЕ
	|	НЕ ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка.ЭтоГруппа
	|	И НЕ ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка.ПометкаУдаления
	|	И ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент
	|	И ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества");
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ВариантИспользования = Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ВариантИспользования = Выборка.ВариантИспользования;
	КонецЕсли;
	
	Возврат ВариантИспользования;
	
КонецФункции

Функция РегистрацияКонсерна(ДанныеОперации, Заказ, ТекстОшибки = "") 
							
	ДокОперацияКачества = Документы.ОперацияПоКачеству.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокОперацияКачества, ДанныеОперации);
	
	ДокОперацияКачества.Дата 				= ТекущаяДатаСеанса();
	ДокОперацияКачества.ОперацияКачества 	= Перечисления.ОперацииКачества.Проверка;
	ДокОперацияКачества.Заказ 				= Заказ;
	
	Ответ = ПровестиОперациюПоКачеству(ДокОперацияКачества, ТекстОшибки);
	
	Возврат Ответ;
	
 КонецФункции
 
Функция ПровестиОперациюПоКачеству(ДокОперацияКачества, ТекстОшибки) 
	 
	 Если  ЗначениеЗаполнено(ДокОперацияКачества.ОтветственныйЗаДефект) И ДокОперацияКачества.ОтветственныйЗаДефект.ЭтоГруппа = Истина Тогда
		 ТекстОшибки = "Документ операция по качеству не создан. ОтветственныйЗаДефект не должен быть группой";
		 Возврат Ложь;
	 КонецЕсли;
	 
	 
	Если ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Ремонт Тогда
		НадоВыполнитьДействияПоЗакрытиюДефекта = Истина;
		ИнспектируемыйЭлемент = ДокОперацияКачества.ДокументКонсерна.ИнспектируемыйЭлемент;
		
	ИначеЕсли ДокОперацияКачества.ОперацияКачества = Перечисления.ОперацииКачества.Проверка и ДокОперацияКачества.Отремонтирован Тогда
		НадоВыполнитьДействияПоЗакрытиюДефекта = Истина;
		ИнспектируемыйЭлемент = ДокОперацияКачества.ВариантИспользованияИнспектируемогоЭлемента.Владелец;
		
	Иначе
		НадоВыполнитьДействияПоЗакрытиюДефекта = Ложь;
	КонецЕсли;     
	
	// теперь подыщем действия по закрытию дефекта
	Если НадоВыполнитьДействияПоЗакрытиюДефекта Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка КАК ДействиеПриЗакрытииКонсерна,
		|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ВариантДействия
		|ПОМЕСТИТЬ ПодходящиеДействия
		|ИЗ
		|	Справочник.ДействияПриЗакрытииКонсерна.ИнспектируемыеЭлементы КАК ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы
		|ГДЕ
		|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ДействиеАктивно
		|	И ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.ИнспектируемыйЭлемент = &ИнспектируемыйЭлемент
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка,
		|	ДействияПриЗакрытииКонсернаИнспектируемыеЭлементы.Ссылка.ВариантДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна,
		|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна.ОписаниеОбслуживания КАК ОписаниеОбслуживания
		|ИЗ
		|	ПодходящиеДействия КАК ПодходящиеДействия
		|ГДЕ
		|	ПодходящиеДействия.ВариантДействия = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПриЗакрытииКонсерна.Обслуживание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодходящиеДействия.ДействиеПриЗакрытииКонсерна,
		|	ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках.ТочкаПроверкиКачества
		|ИЗ
		|	ПодходящиеДействия КАК ПодходящиеДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПриЗакрытииКонсерна.СбросРегистрацииНаТочках КАК ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках
		|		ПО ПодходящиеДействия.ДействиеПриЗакрытииКонсерна = ДействияПриЗакрытииКонсернаСбросРегистрацииНаТочках.Ссылка
		|ГДЕ
		|	ПодходящиеДействия.ВариантДействия = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПриЗакрытииКонсерна.СбросРегистрации)";
		
		Запрос.УстановитьПараметр("ИнспектируемыйЭлемент", ИнспектируемыйЭлемент);
		
		Результат = Запрос.ВыполнитьПакет();
		
		// действия обслуживания
		ВыборкаДетальныеЗаписи = Результат[1].Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаОбслуживание = ДокОперацияКачества.Обслуживание.Добавить();
			СтрокаОбслуживание.ДействиеПриЗакрытииКонсерна = ВыборкаДетальныеЗаписи.ДействиеПриЗакрытииКонсерна;
			СтрокаОбслуживание.ОписаниеОбслуживания = ВыборкаДетальныеЗаписи.ОписаниеОбслуживания;
		КонецЦикла;
		
		// сброс регистрации на точках проверки качества
		ВыборкаДетальныеЗаписи = Результат[2].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаСбросРегистрации = ДокОперацияКачества.СбросРегистрацииНаТочкахПроверкиКачества.Добавить();
			СтрокаСбросРегистрации.ДействиеПриЗакрытииКонсерна = ВыборкаДетальныеЗаписи.ДействиеПриЗакрытииКонсерна;
			СтрокаСбросРегистрации.ТочкаПроверкиКачества = ВыборкаДетальныеЗаписи.ТочкаПроверкиКачества;
		КонецЦикла;
	КонецЕсли; 
	
	НачатьТранзакцию();
	Попытка
		ДокОперацияКачества.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
	Исключение          
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = КраткоеПредставлениеОшибки(Инфо);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Если НадоВыполнитьДействияПоЗакрытиюДефекта Тогда
		// создадим задачи по обслуживанию
		Для каждого СтрокаОбслуживание Из ДокОперацияКачества.Обслуживание Цикл
			ТекЗадача = Задачи.ОбслуживаниеПриЗакрытииКонсерна.СоздатьЗадачу();
			ТекЗадача.Дата = ТекущаяДата();
			ТекЗадача.Заказ = ДокОперацияКачества.Заказ;
			ТекЗадача.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ТекЗадача.ДокументЗакрытияКонсерна = ДокОперацияКачества.Ссылка;
			ТекЗадача.СработавшееДействие = СтрокаОбслуживание.ДействиеПриЗакрытииКонсерна;
			ТекЗадача.Наименование = СтрокаОбслуживание.ОписаниеОбслуживания;
			Попытка
				ТекЗадача.Записать();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;              
	
	//Попытка 
	//	РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(???,Заказ,Ложь);
	//Исключение
	//			ТекстОшибки = ОписаниеОшибки();
	//			ОтменитьТранзакцию();
	//			Возврат Ложь;
	//КонецПопытки;
	
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	 
КонецФункции

Функция ДанныеТочкиПроверкиКачества(ТочкаПроверкиКачества)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТочкиПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек КАК КонтролироватьПрохождениеОбязательныхТочек,
	|	ТочкиПроверкиКачества.КонтролироватьКомплектность КАК КонтролироватьКомплектность,
	|	ТочкиПроверкиКачества.КонтролироватьНаличиеОткрытыхКонсернов КАК КонтролироватьНаличиеОткрытыхКонсернов,
	|	ТочкиПроверкиКачества.КонтролироватьСледующиеДефекты КАК КонтролироватьСледующиеДефекты,
	|	ТочкиПроверкиКачества.КонтролироватьВыполненныйРемонт КАК КонтролироватьВыполненныйРемонт,
	|	ТочкиПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы КАК ПоказыватьВсеИнспектируемыеЭлементы,
	|	ТочкиПроверкиКачества.КонтролируемыеТипыКампании.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ТипКампании КАК ТипКампании
	|	) КАК КонтролируемыеТипыКампании,
	|	ТочкиПроверкиКачества.КонтролироватьНаличиеКампаний КАК КонтролироватьНаличиеКампаний
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
	|ГДЕ
	|	ТочкиПроверкиКачества.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТочкаПроверкиКачества);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Результат.Выгрузить();
	
	СтруктураДанных = Новый Структура;
	ТекДанные = Данные[0];
	Для Каждого Колонка Из Данные.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя, ТекДанные[Колонка.Имя]);	
	КонецЦикла; 
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеДляЗавершенияИнспекции(РабочееМесто, Заказ)
	
	ТочкаПроверкиКачества = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочееМесто, "ТочкаПроверкиКачества");

	ПоказыватьВсеИнспектируемыеЭлементы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТочкаПроверкиКачества, "ПоказыватьВсеИнспектируемыеЭлементы");
	
	ДанныеОперации = ДанныеТочкиПроверкиКачества(ТочкаПроверкиКачества);
	Если ДанныеОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнспектируемыеЭлементы = Worstation_2_0_ОбщиеФункции.ОпределитьИнспектируемыеЭлементы(ПоказыватьВсеИнспектируемыеЭлементы, ТочкаПроверкиКачества, Заказ);
	
	ДанныеОперации.Вставить("ТочкаПроверкиКачества",  ТочкаПроверкиКачества);
	ДанныеОперации.Вставить("ИнспектируемыеЭлементы", ИнспектируемыеЭлементы);
	ДанныеОперации.Вставить("Заказ", Заказ);
	
	Возврат ДанныеОперации;
	
КонецФункции
 
Функция СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(Структура, ИтоговыйТекстСообщения)
	
	//Так как это итоговый документ, который завершает цикл проверки автомобиля, надо выполнить некоторые контроли
	КонтрольПройден = Истина;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.Заказ) Тогда		
		ИтоговыйТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work.");
		Возврат Ложь;
	КонецЕсли;
	
	//Контроль: Обязательные инспекционные элементы проверены полностью
	Если Не Структура.ПоказыватьВсеИнспектируемыеЭлементы Тогда
		Разделитель = ОбработатьТекстСообщения("Требуется проинспектировать следующие элементы: " + Символы.ПС, "You need to check these inspection items: " + Символы.ПС);
		ТекстСообщения = "";
		
		Отбор = Новый Структура("ПроверкаОбязательна, Статус", Истина, 0);
		СтрокиОбязательнойИнспекции = Структура.ИнспектируемыеЭлементы.НайтиСТроки(Отбор);
		Для Каждого Элемент Из СтрокиОбязательнойИнспекции Цикл
			ТекстСообщения = ТекстСообщения + Разделитель + Элемент.ИнспектируемыйЭлемент;
			Разделитель = "," + Символы.ПС;
			КонтрольПройден = Ложь;	
		КонецЦикла; 
		
		Если Не КонтрольПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
		
	//Контроль: все точки контроля качества
	Разделитель = ОбработатьТекстСообщения("Требуется прохождение следующих точек: ", "You need to pass these stations: ");
	ТекстСообщения = "";
	Если Структура.КонтролироватьПрохождениеОбязательныхТочек Тогда
		КонтрольПрохожденияОбязательныхТочекПройден = QNS.ОбязательныеТочкиПройдены(Структура.Заказ, Структура.ТочкаПроверкиКачества, ТекстСообщения);
		Если Не КонтрольПрохожденияОбязательныхТочекПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Контроль: выполненного ремонта 
	СообщениеОДефектах = "";     
	Если Структура.ТочкаПроверкиКачества.КонтролироватьВыполненныйРемонт Тогда
		Если Не ВыполняетсяКонтрольВыполненногоРемонта(Структура.Заказ,Структура.ТочкаПроверкиКачества,СообщениеОДефектах) Тогда
			ИтоговыйТекстСообщения= "Необходимо выполнить контроль: "+Символы.ПС+СообщениеОДефектах;
			Возврат Ложь;
		КонецЕсли;      
	КонецЕсли;
                   
	
	//Контроль: Требуется устранить некомплекты
	Разделитель = ОбработатьТекстСообщения("Требуется устранить следующие некомплекты: ", "You need to set these shortages: ");
	ТекстСообщения = "";
	Если Структура.КонтролироватьКомплектность Тогда
		КонтрольНекомплектовПройден = QNS.КонтрольКомплектности(Структура.Заказ, ТекстСообщения);
		Если Не КонтрольНекомплектовПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДвижениеЗарегистрировано = Ложь;
	ИтоговыйТекстСообщения = СокрЛП(ИтоговыйТекстСообщения);
	Если КонтрольПройден Тогда
		ДвижениеЗарегистрировано = QNS.РегистрацияПрохожденияТочкиПроверкиКачества(Структура.Заказ, Структура.ТочкаПроверкиКачества);	
		Если ДвижениеЗарегистрировано Тогда
		 	ИтоговыйТекстСообщения = ОбработатьТекстСообщения("Инспекция автомобиля " + Структура.Заказ + " выполнена.", "Vehicle inspection completed. ");
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат ДвижениеЗарегистрировано;
	
КонецФункции

Функция СоздатьДокументРегистрацияПрохожденияТочекРемонтника(Структура, ИтоговыйТекстСообщения)
	
	//Так как это итоговый документ, который завершает цикл проверки автомобиля, надо выполнить некоторые контроли
	ИтоговыйТекстСообщения = "";	
	КонтрольПройден = Истина;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.Заказ) Тогда		
		ИтоговыйТекстСообщения= ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Возврат Ложь;
	КонецЕсли;
	
	////Контроль выполненного ремонта 
	//СообщениеОДефектах = "";
	//Если Не ВыполняетсяКонтрольВыполненногоРемонта(Структура.Заказ,Структура.ТочкаПроверкиКачества,СообщениеОДефектах) Тогда
	//	ИтоговыйТекстСообщения= "Требуется выполнить контроль ремонта: "+СообщениеОДефектах;
	//	Возврат Ложь;
	//КонецЕсли;
	
	//Создание документа регистрации движения 
	ДвижениеЗарегистрировано = Ложь;
	Если КонтрольПройден Тогда
		ДвижениеЗарегистрировано = QNS.РегистрацияПрохожденияТочкиПроверкиКачества(Структура.Заказ, Структура.ТочкаПроверкиКачества);	
		Если ДвижениеЗарегистрировано Тогда
		 	ИтоговыйТекстСообщения = ОбработатьТекстСообщения("Ремонт автомобиля "+Структура.Заказ+" выполнен.", "Vehicle repair completed. ");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДвижениеЗарегистрировано;
	
КонецФункции

#КонецОбласти 
