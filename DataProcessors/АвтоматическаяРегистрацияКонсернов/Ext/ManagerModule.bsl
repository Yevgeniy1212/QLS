Функция ПолучитьОписаниеОбработкиОбмена() Экспорт
	
	// полный состав параметров описания смотри в этой функции
	СтруктураНастроек = Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	СтруктураНастроек.ВидОбмена = Перечисления.ВидыОбмена.Двунаправленный;
	СтруктураНастроек.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host;
	
	СтруктураНастроек.ТекстовоеОписаниеОбмена = НСтр("ru='Передача динамически вычисляемого сообщения по запросу от промышленной системы на веб-сервис QLS';en='Transfer of dynamically calculating message by request from industrial system to QLS web-service'");
	СтруктураНастроек.ДляМножественныхОбменов = Истина;
	СтруктураНастроек.XML_НастройкаОбязательна = Истина;

	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ГруппаАвтоматическоеОткрытиеКонсернов");
	СтруктураНастроек.РеквизитыОбязательныеДляЗаполнения.Добавить("ВариантыОтветовНаВызовОбмена");
	СтруктураНастроек.РеквизитыОбязательныеДляЗаполнения.Добавить("ФормулаДляВыделенияVINИзВходящегоЗначения");
	СтруктураНастроек.РеквизитыОбязательныеДляЗаполнения.Добавить("ТочкаПроверкиКачества");
	
	Возврат СтруктураНастроек;
КонецФункции // ()


Функция КодироватьСтрокуЕслиЭтоНеобходимо(ВходящаяСтрока,НастройкаОбмена)
	Если НастройкаОбмена.КодироватьОтвет Тогда
		Возврат СлужебныеПроцедурыФункции.ПолучитьASCIIКодыСтроки(ВходящаяСтрока);
	Иначе
		Возврат ВходящаяСтрока;
	КонецЕсли; 
КонецФункции


//Формат Входящей Строки
//VIN; Result InspectionItem_1 Defect_1 TypeOfDefect_1 Position_A Position_B Position_C; Result InspectionItem_2 Defect_2 TypeOfDefect_2 Position_A Position_B Position_C; 
//Все Обязательные
//ВходящаяСтрока = "Z6T10005HKD13OOF1; PASS 111 112 NULL 001 002 003;"
//ВходящаяСтрока = "Z6T10005HKD13OOF2; PASS 114 112 NULL 001 NULL NULL;"
//ВходящаяСтрока = "Z6T10005HKD13OOF3; FAIL 100 300 NULL 001 004 NULL; PASS 101 301 NULL 001 NULL NULL;"
Функция ВыполнитьОбмен(Событие, НастройкаОбмена, ВходящаяСтрока) Экспорт
	
	перем ТекстОшибки,ИсходныйVIN;
	ТекстОшибки = "";
	ТекстПредупреждения = "";
	ВариантОтвета = "";
	ВходящаяСтрока = СОКРЛП(ВходящаяСтрока);
	
	// проверка правильности настройки точки регистрации
	Если Не ЗначениеЗаполнено(НастройкаОбмена.ТочкаПроверкиКачества) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru='В настройках обмена не указана точка проверки качества';en='In setting of exchange should not be specified a point of check of quality'");
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ВариантОтвета;  //возможно для таких ситуаций предусмотреть еще один вариант ответов
	КонецЕсли; 
	
	ТочкаПроверкиКачества = НастройкаОбмена.ТочкаПроверкиКачества;
	Если ТочкаПроверкиКачества.СпособИдентификацииЗаказа <> Перечисления.СпособыИдентификацииЗаказа.АвтоматическаяПроверка Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС) + НСтр("ru='В настройках обмена должна быть задана точка проверки качества со способом автоматической регистрации дефектов';en='In settings of exchange should be assigned point of check of quality with the way of automatic registration of defects'");
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ВариантОтвета;
	КонецЕсли; 
	
	//Варианты ответов ACK, NAK, VINНеНайден, WrongData
	ВариантыОтветов = Справочники.ВариантыФормулОтветовНаВызовОбмена.ОпределитьЗначенияОтветов(,НастройкаОбмена.ВариантыОтветовНаВызовОбмена,ТекстОшибки);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВариантОтвета = ВариантыОтветов.ОтветВСлучаеОшибкиВычисленияВФормуле; 
		Возврат ВариантОтвета; 
	КонецЕсли; 

	Заказ = ПолучитьVIN(ВходящаяСтрока, Событие, НастройкаОбмена, ТекстОшибки, ВариантОтвета, ВариантыОтветов);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ВариантОтвета;
	КонецЕсли; 
	
	//Сформировать таблицу из входящих данных
	ТабИзВходящихДанных = СформироватьТаблицуИзВходящихДанных(ВходящаяСтрока, Заказ, ТекстОшибки, ВариантОтвета, ВариантыОтветов);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ВариантОтвета;
	КонецЕсли;
	
	//Таблица из запроса
	ТабДляСозданияКонсернов = ПолучитьТаблицуДляСозданияКонсернов(ТабИзВходящихДанных, ТочкаПроверкиКачества, ТекстОшибки, ВариантОтвета, ВариантыОтветов); 
	
	Если ТабДляСозданияКонсернов = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не удалось сформировать данные для строки'; en='Failed to generate data for string'") + Символы.ПС 
							+ ВходящаяСтрока + Символы.ПС + НСтр("ru='по причине'; en='because of'") + Символы.ПС +ТекстОшибки;
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ВариантОтвета;
	КонецЕсли;
	
	//Дополним таблицу консернами
	ТабДляСозданияКонсернов = НайтиКонсерныДляВходящихДанных(Заказ, ТабДляСозданияКонсернов, ТочкаПроверкиКачества, НастройкаОбмена, ТекстОшибки, ВариантОтвета, ВариантыОтветов);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВариантОтвета = "NAK";
		Возврат ВариантОтвета;	
	КонецЕсли;
	
	СформироватьДвижения(Заказ, ТабДляСозданияКонсернов, ТочкаПроверкиКачества, НастройкаОбмена, ТекстОшибки, ТекстПредупреждения, ВариантОтвета, ВариантыОтветов, ВходящаяСтрока);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		ВариантОтвета = "NAK";                   
		Возврат ВариантОтвета;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Предупреждение,ТекстПредупреждения);	
	КонецЕсли; 

	QNS.РегистрацияПрохожденияТочкиПроверкиКачества(Заказ, ТочкаПроверкиКачества);

	// если добрались сюда, значит можно ответить наружу, что все хорошо
	Возврат КодироватьСтрокуЕслиЭтоНеобходимо(ВариантыОтветов.ACK,НастройкаОбмена);
	
КонецФункции

Процедура СформироватьДвижения(Заказ, ТабДляСозданияКонсернов, ТочкаПроверкиКачества, НастройкаОбмена, ТекстОшибки, ТекстПредупреждения, ВариантОтвета, ВариантыОтветов, ВходящаяСтрока)
	
	Для каждого стр из ТабДляСозданияКонсернов Цикл
		
		//переменные для проверки в формуле
		ОтветОборудования = стр.Результат; //присланное значение проверки оборудованием
		ИнспектируемыйЭлемент_Код = стр.ИнспектируемыйЭлемент_Код;
		Дефект_Код = стр.Дефект_Код;
		Позиция_А_Код = стр.Позиция_А_Код;
		Позиция_В_Код = стр.Позиция_В_Код;
		Позиция_С_Код = стр.Позиция_С_Код;
		ТипДефекта_Код = стр.ТипДефекта_Код;
		
		Проверка = "";
		Попытка
			выполнить("Проверка = "+стр.ФормулаДляОпределенияРезультатаПроверки);
		Исключение
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС)+НСтр("ru='Невозможно выполнить формулу для определения результата проверки. ';en='Unable to execute the formula for defining of result of check. '")+Символы.ПС+НСтр("ru='Текст формулы: ';en='Text of the formula: '")+стр.ФормулаДляОпределенияРезультатаПроверки+Символы.ПС+НСтр("ru='Входящая строка: ';en='Incoming line: '")+Символы.ПС+НСтр("ru='Текст ошибки: ';en='Text of error: '")+ОписаниеОшибки();
			Возврат;
		КонецПопытки;
		
		Если стр.ОперацияПоКачеству = ПредопределенноеЗначение("Документ.ОперацияПоКачеству.ПустаяСсылка") Тогда
			
			РегистрироватьКонсерн = (Проверка = ОтветОборудования или Проверка = Истина);
			
			Если РегистрироватьКонсерн Тогда
				QNS.РегистрацияКонсерна(Заказ,
				ТочкаПроверкиКачества,
				стр.ВариантИспользованияИнспектируемогоЭлемента,
				стр.Дефект,
				стр.ТипыДефекта,
				стр.ВариантыПозицииA,
				стр.ВариантыПозицииB,
				стр.ВариантыПозицииC,
				,
				,
				НастройкаОбмена.Ссылка,
				,
				ТекстПредупреждения,
				ТекстОшибки,
				стр.ИнспектируемыйЭлемент);
			Иначе
				QNS.РегистрацияУспешнойПроверки(Заказ,
				ТочкаПроверкиКачества,
				,
				НастройкаОбмена.Ссылка,
				,
				ТекстОшибки,
				стр.ИнспектируемыйЭлемент);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ВариантОтвета = "NAK";
				Возврат;	
			КонецЕсли; 
			
		Иначе
			//у нас уже есть консерн (значит уже ранее приходил FAIL или что-то еще), поэтому если приходит снова, то ничего не делаем.
			//Если возникает ЛОЖЬ, то тоже ничего не делаем
			РегистрироватьРемонт = (Проверка <> ОтветОборудования или Проверка = ЛОЖЬ); 
			
			Если РегистрироватьРемонт Тогда
				ТекстСообщения = "";
				ДокументСоздан = Ложь;
				
				Комментарий = НСтр("ru='Автоматически закрыт консерн при обмене с оборудованием'; en='The concern was closed automatically'");
				ПроизведенаЗамена = Ложь;
				ПроизведенДемонтаж = Ложь;
				
				//Создание 	
				ДокументСоздан = QNS.РегистрацияРемонта(ТочкаПроверкиКачества,
					стр.ОперацияПоКачеству,
					Комментарий,
					ПроизведенаЗамена,
					ПроизведенДемонтаж,
					НастройкаОбмена,
					ТекстОшибки);
				
				Если ДокументСоздан = Истина Тогда
					//Сообщение никуда не записывается
					ТекстСообщения = НСтр("ru='устранение дефекта'; en='defect was removed'");
				Иначе
					ТекстОшибки = НСтр("ru='При регистрации документа качества произошла ошибка'; en='An error occurred while creating the quality document'");
					ВариантОтвета = "NAK";
					Возврат;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВариантОтвета = "NAK";
		КонецЕсли; 
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры


Функция ПолучитьVIN(ВходящаяСтрока, Событие, НастройкаОбмена, ТекстОшибки, ВариантОтвета = "NAK", ВариантыОтветов)
	
	ФормулаДляВыделенияVINИзВходящегоЗначения = НастройкаОбмена.ФормулаДляВыделенияVINИзВходящегоЗначения;
	ТекстСообщения = НСтр("ru='Получен запрос по VIN ""';en='Request by VIN was received ::'")+ВходящаяСтрока+"""";
	РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Информация,ТекстСообщения);	
	
	// Выделим VIN из входящего значения
	VIN = "";
	Если ПустаяСтрока(ФормулаДляВыделенияVINИзВходящегоЗначения) Тогда
		//VIN = ВходящаяСтрока;
	Иначе	
		Попытка
			выполнить("VIN = "+ФормулаДляВыделенияVINИзВходящегоЗначения);
		Исключение
			ТекстОшибки = НСтр("ru='Невозможно выполнить формулу определения VIN из входящей строки:';en='Unable to execute the formula of defining of VIN from incoming line:'")+Символы.ПС +ОписаниеОшибки();
		КонецПопытки;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ВариантОтвета = ВариантыОтветов.ОтветВСлучаеОшибкиВычисленияВФормуле;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(VIN) Тогда
		ТекстОшибки = НСтр("ru='Передано пустое значение VIN.';en='Empty value of VIN was transferred.'");
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		ВариантОтвета = КодироватьСтрокуЕслиЭтоНеобходимо(ВариантыОтветов.VINНеНайден,НастройкаОбмена);
		Возврат Неопределено;
	КонецЕсли; 
	
	Заказ = Производство.ОпределитьЗаказ("VIN",СокрЛП(VIN));
	
	Если Заказ = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Заказ с VIN ""';en='The order with the VIN ""'")+VIN+НСтр("ru='"" не найден.';en='"" was not found.'");
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		ВариантОтвета = КодироватьСтрокуЕслиЭтоНеобходимо(ВариантыОтветов.VINНеНайден,НастройкаОбмена);
		Возврат Неопределено;
	КонецЕсли; 

	Возврат Заказ;
	
КонецФункции


Функция СформироватьТаблицуИзВходящихДанных(ВходящаяСтрока, Заказ, ТекстОшибки, ВариантОтвета, ВариантыОтветов)
	
	МассивДанных = СтрРазделить(ВходящаяСтрока, ";", ЛОЖЬ); //Строка вида VIN;PASS 123 456 678 789 543 131; NotPASS 978 654 477 532 763 121
	
	ТабИзВходящихДанные = Новый ТаблицаЗначений();
	ТабИзВходящихДанные.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ТабИзВходящихДанные.Колонки.Добавить("ИнспектируемыйЭлемент_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	ТабИзВходящихДанные.Колонки.Добавить("Дефект_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	ТабИзВходящихДанные.Колонки.Добавить("ТипДефекта_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	ТабИзВходящихДанные.Колонки.Добавить("Позиция_А_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	ТабИзВходящихДанные.Колонки.Добавить("Позиция_В_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	ТабИзВходящихДанные.Колонки.Добавить("Позиция_С_Код", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	
	ПерваяСтрока = Истина;
	Для каждого стр из МассивДанных Цикл
		
		Если ПерваяСтрока Тогда //Пропустим VIN
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДанныеДляКонсерна = СтрРазделить(стр, " ", ЛОЖЬ); //разобьем данные в массив PASS 123 456 678 789 543 131;
		
		Если ДанныеДляКонсерна.Количество() <> 7 Тогда
			ТекстОшибки = НСтр("ru='Неправильное количество передаваемых данных ""';en='Incorrect count of elements ""'");
			Прервать;
		КонецЕсли; 

		НоваяСтр = ТабИзВходящихДанные.Добавить();
		
		НоваяСтр.Результат = ДанныеДляКонсерна[0];
		НоваяСтр.ИнспектируемыйЭлемент_Код = ДанныеДляКонсерна[1];
		НоваяСтр.Дефект_Код = ДанныеДляКонсерна[2];
		НоваяСтр.ТипДефекта_Код = ДанныеДляКонсерна[3];
		НоваяСтр.Позиция_А_Код = ДанныеДляКонсерна[4];
		НоваяСтр.Позиция_В_Код = ДанныеДляКонсерна[5];
		НоваяСтр.Позиция_С_Код = ДанныеДляКонсерна[6];
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат ВариантОтвета = ВариантыОтветов.WrongData;
	КонецЕсли; 
	
	Возврат ТабИзВходящихДанные;
	
КонецФункции


//Возвращает выборку из запроса с данными
Функция ПолучитьТаблицуДляСозданияКонсернов(ТабИзВходящихДанных, ТочкаПроверкиКачества, ТекстОшибки, ВариантОтвета, ВариантыОтветов); 
	
	//произвольное слово, которое дальше ищем, если оно есть в нашей выборке или тз, то прекращаем
	//выполнение автоматического занесения дефектов, т.к нам прислали коды, которых нет в системе или точке проверки качества
	ОбозначениеНекорректныхДанных = "WrongData";
	
	//1 пакет - формируем временную таблицу из входящих данных
	//2 выбираем варианты (А В С) согласно присланным данным
	//3 выбираем ИЭ из точки проверки качества
	//4 формируем финальную таблицу с ИЭ и вариантами
	//5 выбираем дефекты  из нашей точки проверки качества
	//6 выбираем типы дефектов из нашей точки проверки качества
	//7 формируем конечную таблицу, в которой смотрим
		//1. если нам прислали коды на элементы, которых нет в точке, то это ошибка, необходимо вернуть ошибку и прервать обмен
		//2. если нам прислали код, который говорит, что элемент на текущем оборудовании не используется то ок, 
		//будет подставлять пустую ссылку в документ, продолжаем создание документов
		//3. если нам прислали код, мы нашли его в точке - все ок, продолжаем создание документов
	//ОбщийКод - чаще всего принимается за NULL	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабИзВходящихДанных.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ТабИзВходящихДанных.Результат КАК Результат,
	|	ТабИзВходящихДанных.Дефект_Код КАК Дефект_Код,
	|	ТабИзВходящихДанных.Позиция_А_Код КАК Позиция_А_Код,
	|	ТабИзВходящихДанных.Позиция_В_Код КАК Позиция_В_Код,
	|	ТабИзВходящихДанных.Позиция_С_Код КАК Позиция_С_Код,
	|	ТабИзВходящихДанных.ТипДефекта_Код КАК ТипДефекта_Код
	|ПОМЕСТИТЬ ТабВходящиеДанные
	|ИЗ
	|	&ТабИзВходящихДанных КАК ТабИзВходящихДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВходящиеДанные.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ВЫБОР
	|		КОГДА ТабВходящиеДанные.Позиция_А_Код = &ОбщийКод
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВариантыПозицииA.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВариантыПозицииA.Ссылка, &НекорректныеДанные)
	|	КОНЕЦ КАК ПозицияА,
	|	ВЫБОР
	|		КОГДА ТабВходящиеДанные.Позиция_В_Код = &ОбщийКод
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВариантыПозицииB.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВариантыПозицииB.Ссылка, &НекорректныеДанные)
	|	КОНЕЦ КАК ПозицияВ,
	|	ВЫБОР
	|		КОГДА ТабВходящиеДанные.Позиция_С_Код = &ОбщийКод
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВариантыПозицииC.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВариантыПозицииC.Ссылка, &НекорректныеДанные)
	|	КОНЕЦ КАК ПозицияС,
	|	ТабВходящиеДанные.Позиция_А_Код КАК Позиция_А_Код,
	|	ТабВходящиеДанные.Позиция_В_Код КАК Позиция_В_Код,
	|	ТабВходящиеДанные.Позиция_С_Код КАК Позиция_С_Код
	|ПОМЕСТИТЬ ВТ_ПозицииПоИЭ
	|ИЗ
	|	ТабВходящиеДанные КАК ТабВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыПозицииA КАК ВариантыПозицииA
	|		ПО ТабВходящиеДанные.Позиция_А_Код = ВариантыПозицииA.КодДляАвтоматическойПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыПозицииB КАК ВариантыПозицииB
	|		ПО ТабВходящиеДанные.Позиция_В_Код = ВариантыПозицииB.КодДляАвтоматическойПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыПозицииC КАК ВариантыПозицииC
	|		ПО ТабВходящиеДанные.Позиция_С_Код = ВариантыПозицииC.КодДляАвтоматическойПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ФормулаДляОпределенияРезультатаПроверки КАК ФормулаДляОпределенияРезультатаПроверки,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ИнспектируемыйЭлемент.КодДляАвтоматическойПроверки КАК ИнспектируемыйЭлементКодДляАвтоматическойПроверки,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA КАК ЗадаватьПозициюA,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB КАК ЗадаватьПозициюB,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC КАК ЗадаватьПозициюC,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента
	|ПОМЕСТИТЬ ВТ_ИЭ_ИзТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов КАК ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов
	|ГДЕ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыДляАвтоматическогоЗанесенияКонсернов.Ссылка = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ИЭ_ИзТочки.ИнспектируемыйЭлемент, &НекорректныеДанные) КАК ИнспектируемыйЭлемент,
	|	ВЫБОР
	|		КОГДА ВТ_ИЭ_ИзТочки.ЗадаватьПозициюA
	|				И (ВТ_ПозицииПоИЭ.ПозицияА = ЗНАЧЕНИЕ(Справочник.ВариантыПозицииA.ПустаяСсылка)
	|					ИЛИ ВТ_ПозицииПоИЭ.ПозицияА = &НекорректныеДанные)
	|			ТОГДА &НекорректныеДанные
	|		ИНАЧЕ ВТ_ПозицииПоИЭ.ПозицияА
	|	КОНЕЦ КАК ПозицияА_Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ИЭ_ИзТочки.ЗадаватьПозициюB
	|				И (ВТ_ПозицииПоИЭ.ПозицияВ = ЗНАЧЕНИЕ(Справочник.ВариантыПозицииB.ПустаяСсылка)
	|					ИЛИ ВТ_ПозицииПоИЭ.ПозицияВ = &НекорректныеДанные)
	|			ТОГДА &НекорректныеДанные
	|		ИНАЧЕ ВТ_ПозицииПоИЭ.ПозицияВ
	|	КОНЕЦ КАК ПозицияВ_Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ИЭ_ИзТочки.ЗадаватьПозициюC
	|				И (ВТ_ПозицииПоИЭ.ПозицияС = ЗНАЧЕНИЕ(Справочник.ВариантыПозицииC.ПустаяСсылка)
	|					ИЛИ ВТ_ПозицииПоИЭ.ПозицияС = &НекорректныеДанные)
	|			ТОГДА &НекорректныеДанные
	|		ИНАЧЕ ВТ_ПозицииПоИЭ.ПозицияС
	|	КОНЕЦ КАК ПозицияС_Ссылка,
	|	ВТ_ПозицииПоИЭ.Позиция_А_Код КАК Позиция_А_Код,
	|	ВТ_ПозицииПоИЭ.Позиция_В_Код КАК Позиция_В_Код,
	|	ВТ_ПозицииПоИЭ.Позиция_С_Код КАК Позиция_С_Код,
	|	ВТ_ПозицииПоИЭ.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ВТ_ИЭ_ИзТочки.ФормулаДляОпределенияРезультатаПроверки КАК ФормулаДляОпределенияРезультатаПроверки,
	|	ВТ_ИЭ_ИзТочки.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента
	|ПОМЕСТИТЬ ВТ_ИЭ_ДляФинальнойТаб
	|ИЗ
	|	ВТ_ПозицииПоИЭ КАК ВТ_ПозицииПоИЭ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИЭ_ИзТочки КАК ВТ_ИЭ_ИзТочки
	|		ПО ВТ_ПозицииПоИЭ.ИнспектируемыйЭлемент_Код = ВТ_ИЭ_ИзТочки.ИнспектируемыйЭлементКодДляАвтоматическойПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТочкиПроверкиКачестваДефектыДляАвтоматическогоЗанесенияКонсернов.Дефект КАК Дефект,
	|	ТочкиПроверкиКачестваДефектыДляАвтоматическогоЗанесенияКонсернов.Дефект.КодДляАвтоматическойПроверки КАК ДефектКодДляАвтоматическойПроверки
	|ПОМЕСТИТЬ ВТ_Дефекты_ИзТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ДефектыДляАвтоматическогоЗанесенияКонсернов КАК ТочкиПроверкиКачестваДефектыДляАвтоматическогоЗанесенияКонсернов
	|ГДЕ
	|	ТочкиПроверкиКачестваДефектыДляАвтоматическогоЗанесенияКонсернов.Ссылка = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТочкиПроверкиКачестваТипыДефектовДляАвтоматическогоЗанесенияКонсернов.ТипДефектаДляАвтоматическогоОткрытияКонсерна КАК ТипДефекта,
	|	ТочкиПроверкиКачестваТипыДефектовДляАвтоматическогоЗанесенияКонсернов.ТипДефектаДляАвтоматическогоОткрытияКонсерна.КодДляАвтоматическойПроверки КАК ТипДефектаКодДляАвтоматическойПроверки
	|ПОМЕСТИТЬ ВТ_ТипыДефектов_ИзТочки
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ТипыДефектовДляАвтоматическогоЗанесенияКонсернов КАК ТочкиПроверкиКачестваТипыДефектовДляАвтоматическогоЗанесенияКонсернов
	|ГДЕ
	|	ТочкиПроверкиКачестваТипыДефектовДляАвтоматическогоЗанесенияКонсернов.Ссылка = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабВходящиеДанные.Дефект_Код = &ОбщийКод
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Дефекты.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Дефекты_ИзТочки.Дефект, &НекорректныеДанные)
	|	КОНЕЦ КАК Дефект,
	|	ВЫБОР
	|		КОГДА ТабВходящиеДанные.ТипДефекта_Код = &ОбщийКод
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТипыДефектов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ТипыДефектов_ИзТочки.ТипДефекта, &НекорректныеДанные)
	|	КОНЕЦ КАК ТипыДефекта,
	|	ТабВходящиеДанные.Результат КАК Результат,
	|	ТабВходящиеДанные.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ТабВходящиеДанные.Дефект_Код КАК Дефект_Код,
	|	ТабВходящиеДанные.Позиция_А_Код КАК Позиция_А_Код,
	|	ТабВходящиеДанные.Позиция_В_Код КАК Позиция_В_Код,
	|	ТабВходящиеДанные.Позиция_С_Код КАК Позиция_С_Код,
	|	ТабВходящиеДанные.ТипДефекта_Код КАК ТипДефекта_Код,
	|	ВТ_ИЭ_ДляФинальнойТаб.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ВТ_ИЭ_ДляФинальнойТаб.ФормулаДляОпределенияРезультатаПроверки КАК ФормулаДляОпределенияРезультатаПроверки,
	|	ВТ_ИЭ_ДляФинальнойТаб.ПозицияА_Ссылка КАК ВариантыПозицииA,
	|	ВТ_ИЭ_ДляФинальнойТаб.ПозицияВ_Ссылка КАК ВариантыПозицииB,
	|	ВТ_ИЭ_ДляФинальнойТаб.ПозицияС_Ссылка КАК ВариантыПозицииC,
	|	ВТ_ИЭ_ДляФинальнойТаб.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента
	|ИЗ
	|	ТабВходящиеДанные КАК ТабВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Дефекты_ИзТочки КАК ВТ_Дефекты_ИзТочки
	|		ПО ТабВходящиеДанные.Дефект_Код = ВТ_Дефекты_ИзТочки.ДефектКодДляАвтоматическойПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыДефектов_ИзТочки КАК ВТ_ТипыДефектов_ИзТочки
	|		ПО ТабВходящиеДанные.ТипДефекта_Код = ВТ_ТипыДефектов_ИзТочки.ТипДефектаКодДляАвтоматическойПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИЭ_ДляФинальнойТаб КАК ВТ_ИЭ_ДляФинальнойТаб
	|		ПО ТабВходящиеДанные.ИнспектируемыйЭлемент_Код = ВТ_ИЭ_ДляФинальнойТаб.ИнспектируемыйЭлемент_Код
	|			И ТабВходящиеДанные.Позиция_А_Код = ВТ_ИЭ_ДляФинальнойТаб.Позиция_А_Код
	|			И ТабВходящиеДанные.Позиция_В_Код = ВТ_ИЭ_ДляФинальнойТаб.Позиция_В_Код
	|			И ТабВходящиеДанные.Позиция_С_Код = ВТ_ИЭ_ДляФинальнойТаб.Позиция_С_Код";
	
	Запрос.УстановитьПараметр("ТабИзВходящихДанных",  ТабИзВходящихДанных);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества",  ТочкаПроверкиКачества);
	Запрос.УстановитьПараметр("ОбщийКод",  Константы.ОбщийКодДанныхНеИспользуемыхВОбменеСОборудованием.Получить());
	Запрос.УстановитьПараметр("НекорректныеДанные",  ОбозначениеНекорректныхДанных); 
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТекстОшибки = ПроверитьДанныеНаКорректность(Результат, ОбозначениеНекорректныхДанных, ТочкаПроверкиКачества);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ВариантОтвета = ВариантыОтветов.WrongData;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


//Данные, в которых ищем ОбозначениеНекорректныхДанных
Функция ПроверитьДанныеНаКорректность(ДанныеДляПроверки, ОбозначениеНекорректныхДанных, ТочкаПроверкиКачества);
	
	ТекстОшибки = "";
	Заголовок =  НСтр("ru='В точке проверки качества или базе данных'; en='Not found inspection item in a quality point or in data base'") + " " + ТочкаПроверкиКачества.Наименование;
	Для каждого стр из ДанныеДляПроверки Цикл
	
		Если стр.ИнспектируемыйЭлемент = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден ИЭ с кодом '; en='Not found inspection item with code '") + стр.ИнспектируемыйЭлемент_Код + Символы.ПС
		КонецЕсли;
		
		Если стр.Дефект = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден дефект с кодом '; en='Not found defect with code '") + стр.Дефект_Код + Символы.ПС
		КонецЕсли;

		Если стр.ТипыДефекта = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден тип дефекта с кодом '; en='Not found type of defect with code '") + стр.ТипДефекта_Код + Символы.ПС
		КонецЕсли;

		Если стр.ВариантыПозицииA = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден вариант позиции А с кодом '; en='Not found variant of position A with code '") + стр.Позиция_А_Код + Символы.ПС
		КонецЕсли;

		Если стр.ВариантыПозицииB = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден вариант позиции В с кодом '; en='Not found variant of position B with code '") + стр.Позиция_В_Код + Символы.ПС
		КонецЕсли;

		Если стр.ВариантыПозицииC = ОбозначениеНекорректныхДанных Тогда
			ТекстОшибки = ТекстОшибки + НСтр("ru='Не найден вариант позиции С с кодом '; en='Not found variant of position C with code '") + стр.Позиция_С_Код + Символы.ПС
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Заголовок + символы.ПС + ТекстОшибки; 
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции


//Функция ЗарегистрироватьЗакрытиеКонсерна(Заказ, ТабИзВходящихДанных, ТочкаПроверкиКачества, НастройкаОбмена, ТекстОшибки, ВариантОтвета, ВариантыОтветов) 
Функция НайтиКонсерныДляВходящихДанных(Заказ, ТабИзВходящихДанных, ТочкаПроверкиКачества, НастройкаОбмена, ТекстОшибки, ВариантОтвета, ВариантыОтветов) 
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ТабИзВходящихДанных.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТабИзВходящихДанных.Дефект КАК Дефект,
	|	ТабИзВходящихДанных.ВариантыПозицииA КАК ВариантыПозицииA,
	|	ТабИзВходящихДанных.ВариантыПозицииB КАК ВариантыПозицииB,
	|	ТабИзВходящихДанных.ВариантыПозицииC КАК ВариантыПозицииC,
	|	ТабИзВходящихДанных.ТипыДефекта КАК ТипыДефекта,
	|	ТабИзВходящихДанных.Результат КАК Результат,
	|	ТабИзВходящихДанных.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ТабИзВходящихДанных.Дефект_Код КАК Дефект_Код,
	|	ТабИзВходящихДанных.ТипДефекта_Код КАК ТипДефекта_Код,
	|	ТабИзВходящихДанных.Позиция_А_Код КАК Позиция_А_Код,
	|	ТабИзВходящихДанных.Позиция_В_Код КАК Позиция_В_Код,
	|	ТабИзВходящихДанных.Позиция_С_Код КАК Позиция_С_Код,
	|	ТабИзВходящихДанных.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
	|	ТабИзВходящихДанных.ФормулаДляОпределенияРезультатаПроверки КАК ФормулаДляОпределенияРезультатаПроверки
	|ПОМЕСТИТЬ ТабВходящиеДанные
	|ИЗ
	|	&ТабИзВходящихДанных КАК ТабИзВходящихДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацияПоКачеству.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_Консерн
	|ИЗ
	|	Документ.ОперацияПоКачеству КАК ОперацияПоКачеству
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабВходящиеДанные КАК ТабВходящиеДанные
	|		ПО ОперацияПоКачеству.ИнспектируемыйЭлемент = ТабВходящиеДанные.ИнспектируемыйЭлемент
	|			И ОперацияПоКачеству.Дефект = ТабВходящиеДанные.Дефект
	|			И ОперацияПоКачеству.ТипДефекта = ТабВходящиеДанные.ТипыДефекта
	|			И ОперацияПоКачеству.ПозицияА = ТабВходящиеДанные.ВариантыПозицииA
	|			И ОперацияПоКачеству.ПозицияB = ТабВходящиеДанные.ВариантыПозицииB
	|			И ОперацияПоКачеству.ПозицияC = ТабВходящиеДанные.ВариантыПозицииC
	|ГДЕ
	|	ОперацияПоКачеству.Заказ = &Заказ
	|	И ОперацияПоКачеству.ТочкаПроверкиКачества = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонсерныОстатки.Консерн КАК ОперацияПоКачеству,
	|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК КонсернИнспектируемыйЭлемент,
	|	КонсерныОстатки.Консерн.Дефект КАК КонсернДефект,
	|	КонсерныОстатки.Консерн.ТипДефекта КАК КонсернТипДефекта,
	|	КонсерныОстатки.Консерн.ПозицияА КАК КонсернПозицияА,
	|	КонсерныОстатки.Консерн.ПозицияB КАК КонсернПозицияB,
	|	КонсерныОстатки.Консерн.ПозицияC КАК КонсернПозицияC
	|ПОМЕСТИТЬ КонсерныПоПрисланнымДанным
	|ИЗ
	|	РегистрНакопления.Консерны.Остатки(
	|			,
	|			Консерн В
	|					(ВЫБРАТЬ
	|						вт_Консерн.Ссылка КАК Ссылка
	|					ИЗ
	|						вт_Консерн КАК вт_Консерн)
	|				И Заказ = &Заказ) КАК КонсерныОстатки
	|ГДЕ
	|	КонсерныОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВходящиеДанные.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТабВходящиеДанные.Дефект КАК Дефект,
	|	ТабВходящиеДанные.ВариантыПозицииA КАК ВариантыПозицииA,
	|	ТабВходящиеДанные.ВариантыПозицииB КАК ВариантыПозицииB,
	|	ТабВходящиеДанные.ВариантыПозицииC КАК ВариантыПозицииC,
	|	ТабВходящиеДанные.ТипыДефекта КАК ТипыДефекта,
	|	ТабВходящиеДанные.Результат КАК Результат,
	|	ТабВходящиеДанные.ИнспектируемыйЭлемент_Код КАК ИнспектируемыйЭлемент_Код,
	|	ТабВходящиеДанные.Дефект_Код КАК Дефект_Код,
	|	ТабВходящиеДанные.ТипДефекта_Код КАК ТипДефекта_Код,
	|	ТабВходящиеДанные.Позиция_А_Код КАК Позиция_А_Код,
	|	ТабВходящиеДанные.Позиция_В_Код КАК Позиция_В_Код,
	|	ТабВходящиеДанные.Позиция_С_Код КАК Позиция_С_Код,
	|	ТабВходящиеДанные.ФормулаДляОпределенияРезультатаПроверки КАК ФормулаДляОпределенияРезультатаПроверки,
	|	ЕСТЬNULL(КонсерныПоПрисланнымДанным.ОперацияПоКачеству, ЗНАЧЕНИЕ(Документ.ОперацияПоКачеству.ПустаяСсылка)) КАК ОперацияПоКачеству,
	|	ТабВходящиеДанные.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента
	|ИЗ
	|	ТабВходящиеДанные КАК ТабВходящиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонсерныПоПрисланнымДанным КАК КонсерныПоПрисланнымДанным
	|		ПО ТабВходящиеДанные.ИнспектируемыйЭлемент = КонсерныПоПрисланнымДанным.КонсернИнспектируемыйЭлемент
	|			И ТабВходящиеДанные.Дефект = КонсерныПоПрисланнымДанным.КонсернДефект
	|			И ТабВходящиеДанные.ТипыДефекта = КонсерныПоПрисланнымДанным.КонсернТипДефекта
	|			И ТабВходящиеДанные.ВариантыПозицииA = КонсерныПоПрисланнымДанным.КонсернПозицияА
	|			И ТабВходящиеДанные.ВариантыПозицииB = КонсерныПоПрисланнымДанным.КонсернПозицияB
	|			И ТабВходящиеДанные.ВариантыПозицииC = КонсерныПоПрисланнымДанным.КонсернПозицияC";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	Запрос.УстановитьПараметр("ТабИзВходящихДанных", ТабИзВходящихДанных);
	
	Результат = Запрос.Выполнить();
	ТаблицаСДанными = Результат.Выгрузить();
	
	Если ТаблицаСДанными.Количество() = 0 Тогда
		ТекстОшибки = "SomethingWrong";
	КонецЕсли;
	
	Возврат ТаблицаСДанными   
	
КонецФункции