
Функция ПолучитьОписаниеОбработкиОбмена() Экспорт
	
	// полный состав параметров описания смотри в этой функции
	СтруктураНастроек = Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	СтруктураНастроек.ТекстовоеОписаниеОбмена = ОбработатьТекстСообщения("Рабочее место Repairer. Закрытие консёрнов и кампаний, анализ ремонта, учёт некомплекта.", "Repairer workstation. Closing concerns, campaigns and shortages, viewing defects. ");
	СтруктураНастроек.ВидОбмена = Перечисления.ВидыОбмена.Двунаправленный;
	СтруктураНастроек.XML_НастройкаОбязательна = Истина;
	СтруктураНастроек.ДляМножественныхОбменов = Истина;
	СтруктураНастроек.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host;
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ФильтрПоРабочимМестам");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ГруппаНастройкиАвторизацииНаВебИнтерфейсе");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ЯзыкИнтерфейса");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ПутьКФайламПриложения");
	
	Возврат СтруктураНастроек;
КонецФункции 

Функция ВыполнитьОбмен(Событие, НастройкаОбмена, ВходящиеПараметры) Экспорт
	
	Отказ = Ложь;
	
	//Определение переменных
	HTMLPage = "";
	ПользовательскиеСкрипты = "";
	РабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	ТаблицаДоступныхРабочихМестОператора = Новый ТаблицаЗначений;
	
	//Определение языка интерфейса
	Если ЗначениеЗаполнено(НастройкаОбмена.ЯзыкИнтерфейса) Тогда
		ПараметрыСеанса.КодТекущегоЯзыка = НастройкаОбмена.ЯзыкИнтерфейса;
	КонецЕсли;
	
	//Определение пользователя и хранение его в параметрах сеанса
	HTMLPage = WebWorkstationОбщиеФункции.ВыполнитьАутентификациюПользователя(НастройкаОбмена, ВходящиеПараметры, Отказ, ПользовательскиеСкрипты);
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//Получить рабочее место оператора
	Если Не Отказ Тогда
		ТаблицаДоступныхРабочихМестОператора = WebWorkstationОбщиеФункции.ПолучитьТаблицуДоступныхРабочихМестОператора(Пользователь, НастройкаОбмена.Ссылка);
		HTMLPage = WebWorkstationОбщиеФункции.ВыбратьРабочееМестоОператора(ТаблицаДоступныхРабочихМестОператора, РабочееМестоОператора, ВходящиеПараметры, Отказ);
	КонецЕсли;
	
	//Вывод интерфейса
	Если Не Отказ Тогда
		HTMLPage = ИнтерфейсRepairer(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры);
	КонецЕсли;
	
	//Эти переменные должны храниться на странице, даже если мы не вывели страницу самого интерфейса
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionGuid-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionGuid"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionBeginningDate-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionBeginningDate"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeCurrentWorkstationGuid-->", РабочееМестоОператора.УникальныйИдентификатор());	
	
	//Стили и скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", "/*СтилиСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("Styles_Repairer").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", "/*СкриптыСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("Scripts_Repairer").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);
	
	//Добавляем иконку в заголовок страницы	
	HTMLPage = СтрЗаменить(HTMLPage, "#allPictureHeaderIcon", "/images/icon-repairer.png");
	
	//Добавить наименования элементов управления
	HTMLPage = HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage);
	
	//Изменим путь к файлам js, css и тд, чтобы их веб-сайт подтягивал не по hs из 1с, а брал из каталога
	HTMLPage = HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ);

	//Сохраняем последнее состояние станции сканирования
	РегистрыСведений.ПоследнееСостояниеСтанцииСканирования.ЗаписатьТекстСостояния(РабочееМестоОператора, HTMLPage);
	
	Возврат HTMLPage;	
	
КонецФункции

Функция ПолучитьСтруктуруИнтерфейса()
	
	//В этом модуле мы будем оперировать структурой
	Структура = Новый Структура;
	
	//Тип запроса
	Структура.Вставить("ТипЗапросаКСтранице", "");
	
	//Наше текущее рабочее место
	Структура.Вставить("РабочееМестоОператора", Справочники.РабочиеМестаОператоров.ПустаяСсылка());
	
	//Всё вертится вокруг заказа
	Структура.Вставить("ТолькоЧтение", Неопределено);
	Структура.Вставить("ЗаказСсылка", Справочники.Заказы.ПустаяСсылка());
	Структура.Вставить("ЗаказУникальныйИдентификатор", Неопределено);
	Структура.Вставить("ЗаказСтатус", "");
	
	//Контроли
	Структура.Вставить("КонтрольПрохожденияОбязательныхТочек", Истина);
	
	//Способ получения заказа на станции
	СпособыВыбораЗаказаНаСтанции = Новый Структура;
	СпособыВыбораЗаказаНаСтанции.Вставить("ИспользоватьСканирование", "ИспользоватьСканирование");
	//СпособыВыбораЗаказаНаСтанции.Вставить("ИспользоватьRFID", "ИспользоватьRFID");
	Структура.Вставить("СпособыВыбораЗаказаНаСтанции", СпособыВыбораЗаказаНаСтанции);
	Структура.Вставить("ТекущийСпособВыбораЗаказаНаСтанции", СпособыВыбораЗаказаНаСтанции.ИспользоватьСканирование);
	
	//Новый способ получения заказа
	//Структура.Вставить("GUIDСканированиеRFID", "");	
	//Структура.Вставить("ПривязанныйСканерRFID", Справочники.СканерыRFID.ПустаяСсылка());	
	//Структура.Вставить("СканированиеRFIDВыполнено", Ложь);		
	
	//Значение, отсканированное в поле ввода
	Структура.Вставить("ОтсканированноеЗначение", "");
	Структура.Вставить("ПредыдущийЗаказОтсканированНеПолностью", Ложь);
		
	//Текст сообщения, который будет выводиться пользователю
	Структура.Вставить("ТекстСообщения", "");
	Структура.Вставить("ЦветТекстаСообщения", "");
	
	//Дефекты
	Структура.Вставить("ДефектыСтатус", Ложь);
	Структура.Вставить("Дефекты", Новый ТаблицаЗначений);

	//Действия
	Структура.Вставить("ДействияСтатус", Ложь);
	Структура.Вставить("Действия", Новый ТаблицаЗначений);

	//Кампании
	Структура.Вставить("КампанииСтатус", Ложь);
	Структура.Вставить("Кампании", Новый ТаблицаЗначений);
	
	//Некомплект
	Структура.Вставить("НекомплектСтатус", Ложь);
	Структура.Вставить("Некомплект", Новый ТаблицаЗначений);
	
	//Точки проверки качества
	Структура.Вставить("ТочкаПроверкиКачества", Справочники.ТочкиПроверкиКачества.ПустаяСсылка());	
		
	//Отсканированное значение	
	СтруктураРаспознанияЗначения = Новый Структура;
	СтруктураРаспознанияЗначения.Вставить("Заказ", Справочники.Заказы.ПустаяСсылка());
	СтруктураРаспознанияЗначения.Вставить("ЗначениеРаспознано", Ложь);	
	Структура.Вставить("СтруктураРаспознанияЗначения", СтруктураРаспознанияЗначения);
	Структура.Вставить("ОтсканированноеЗначение", "");
	
	//Значения с формы, необходимые для создания документа
	СтруктураПараметровСозданияДокументов = Новый Структура;
	СтруктураПараметровСозданияДокументов.Вставить("ОперацияПоКачеству",	Документы.ОперацияПоКачеству.ПустаяСсылка());	
	СтруктураПараметровСозданияДокументов.Вставить("Комментарий",			"");
	СтруктураПараметровСозданияДокументов.Вставить("ПроизведенаЗамена",		Ложь);
	СтруктураПараметровСозданияДокументов.Вставить("ПроизведенДемонтаж",	Ложь);
	СтруктураПараметровСозданияДокументов.Вставить("Комментарий",			"");
	СтруктураПараметровСозданияДокументов.Вставить("Задача",				Задачи.ОбслуживаниеПриЗакрытииКонсерна.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("Кампания",				Справочники.Кампании.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("Номенклатура",			Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("КоличествоНоменклатуры",0);
	Структура.Вставить("СтруктураПараметровСозданияДокументов", СтруктураПараметровСозданияДокументов);
	
	//Стили подсветки элементов интерфейса
	ЦветаИнтерфейса = Новый Структура;	
	ЦветаИнтерфейса.Вставить("СтатусОтключен", "styleNone");
	ЦветаИнтерфейса.Вставить("СтатусПусто", "styleDefault");
	ЦветаИнтерфейса.Вставить("СтатусУспех", "styleSuccess");
	ЦветаИнтерфейса.Вставить("СтатусОшибка", "styleDanger");
	ЦветаИнтерфейса.Вставить("СтатусПредупреждение", "styleWarning");
	ЦветаИнтерфейса.Вставить("СтатусОбновлен", "styleUpdate");
	ЦветаИнтерфейса.Вставить("СтатусСкрыт", "styleHidden");
	Структура.Вставить("ЦветаИнтерфейса", ЦветаИнтерфейса);	
	
	Возврат Структура;
КонецФункции

//Основная функция этого интерфейса
Функция ИнтерфейсRepairer(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры)
	
	//Получаем заполненную структру
	Структура = ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры);
	
	//Получаем готовую HTML страницу по данным структуры
	HTMLPage = ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора);
	
	//Выкидываем её наружу
	Возврат HTMLPage;
	
КонецФункции

//Тут происходит основная работа алгоритма установки оборудования. Все данные пишем в структуру
Функция ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры)
	
	//Получаем основную структуру, в которой будут храниться все обработанные значения
	Отказ = Ложь;
	Структура = ПолучитьСтруктуруИнтерфейса();
	Структура.РабочееМестоОператора = РабочееМестоОператора;
	Структура.ОтсканированноеЗначение = ВходящиеПараметры.Получить("JSONСоответствие").Получить("newScanningValue");
	Структура.ТипЗапросаКСтранице = ВРег(ВходящиеПараметры.Получить("requestType"));
	Структура.ТочкаПроверкиКачества = РабочееМестоОператора.ТочкаПроверкиКачества;
	
	//Тип вывода: скрипт или целиком сформированная страница
	ДинамическийСкрипт = Новый Структура;
	ДинамическийСкрипт.Вставить("ВыполнитьСкрипт", Ложь);
	ДинамическийСкрипт.Вставить("ВывестиСообщение", Ложь);
	ДинамическийСкрипт.Вставить("НичегоНеДелать", Ложь);
	Структура.Вставить("ДинамическийСкрипт", ДинамическийСкрипт);

	////Можем получить заказ от сканера RFID
	//Если Структура.РабочееМестоОператора.ИспользоватьСканерRFID Тогда
	//	Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьRFID;
	//	Структура.ПривязанныйСканерRFID = Структура.РабочееМестоОператора.ПривязанныйСканерRFID;
	//	Структура.GUIDСканированиеRFID = Новый УникальныйИдентификатор;
	//КонецЕсли;
	
	//Продолжаем сканирование с текущего места
	//Если Структура.РабочееМестоОператора.ПродолжатьСканированиеПослеПерезагрузкиИнтерфейса Тогда		
	Заказ = РегистрыСведений.ТекущийЗаказНаСтанции.ПолучитьТекущийЗаказ(Структура.РабочееМестоОператора, Ложь);
	Если ЗначениеЗаполнено(Заказ) Тогда			
		Структура.ЗаказСсылка = Заказ;
		Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
		Структура.ПредыдущийЗаказОтсканированНеПолностью = Истина;
	КонецЕсли;
	//КонецЕсли;
	
	//Получаем текущий заказ, если он есть
	ТекущийВинУникальныйИдентификаторСтрока = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidCurrentVIN");
	Если ЗначениеЗаполнено(ТекущийВинУникальныйИдентификаторСтрока) Тогда
		Заказ = ОпеределитьЗаказ(ТекущийВинУникальныйИдентификаторСтрока, "", Структура.РабочееМестоОператора);
		Если ЗначениеЗаполнено(Заказ) Тогда
			Структура.ЗаказСсылка = Заказ;
			Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	//Распознаём отсканированное значение, если оно было
	Если Структура.ТипЗапросаКСтранице = ВРег("newScanningEvent") Тогда		
		
		Если ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
			Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected. ");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Иначе
				Структура.СтруктураРаспознанияЗначения = РаспознатьОтсканированноеЗначение(Событие, Структура);
			КонецЕсли;
		КонецЕсли;
	////Сохранить идентификатор вызова сканера RFID
	//ИначеЕсли Структура.ТипЗапросаКСтранице = ВРег("saveCurrentRFIDGuid") Тогда		
	//	
	//	СохранитьИдентификаторСканированияRFIDМетки(Структура.РабочееМестоОператора, ВходящиеПараметры);
	//	Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
	//	Структура.ДинамическийСкрипт.НичегоНеДелать = Истина;
	//	Возврат Структура;
	//ИначеЕсли Структура.ТипЗапросаКСтранице = ВРег("getNextVINFromRFID") Тогда
	//	
	//	//Получаем последнее состояние сканера RFID
	//	Структура.ОтсканированноеЗначение = РегистрыСведений.СтатусыСканеровRFID.ПолучитьПоследнююЗаписьСоСканераRFID(Структура.ПривязанныйСканерRFID);
	//	
	//	//Данных пока нет? Тогда выходим отсюда
	//	Если Не ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
	//		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
	//		Структура.ДинамическийСкрипт.НичегоНеДелать = Истина;
	//		Возврат Структура;
	//	КонецЕсли;
	//	
	//	//Если значение распознано, то работаем с ним, как с обычным отсканированным значением
	//	Если ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
	//		Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
	//			Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected. ");
	//			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	//			Структура.СканированиеRFIDВыполнено = Истина;
	//		Иначе
	//			Структура.СтруктураРаспознанияЗначения = РаспознатьОтсканированноеЗначение(Событие, Структура, Истина);
	//		КонецЕсли;
	//	КонецЕсли;

	КонецЕсли;
	
	//Контроль. Проверка прохождения обязательных точек качества
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) И Структура.ТочкаПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек Тогда		
		ТекстСообщения = "";
		Структура.КонтрольПрохожденияОбязательныхТочек = QNS.ОбязательныеТочкиПройдены(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества, ТекстСообщения);
		Если Не Структура.КонтрольПрохожденияОбязательныхТочек Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("У заказа "+Структура.ЗаказСсылка+ " остались непройденные точки: " + Символы.ПС + ТекстСообщения, "This vehicle "+Структура.ЗаказСсылка+ " didn't pass these stations: : " + Символы.ПС + ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			
			Структура.ЗаказСсылка = Справочники.Заказы.ПустаяСсылка();
			Структура.ЗаказУникальныйИдентификатор = Неопределено;
			
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	//Закрытие дефекта
	Если Не Отказ И Структура.ТипЗапросаКСтранице = ВРег("createDocumentDefects") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		ДокументСоздан = ЗарегистрироватьРемонт(Структура);
	//Выполнение действия
	ИначеЕсли Не Отказ И Структура.ТипЗапросаКСтранице = ВРег("createDocumentActions") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		ЗадачаВыполнена = ВыполнитьЗадачу(Структура);
	//Установка номенклатуры
	ИначеЕсли Не Отказ И Структура.ТипЗапросаКСтранице = ВРег("createDocumentShortage") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		НекомплектУстановлен = УстановитьНекомплект(Структура);
	//Закрытие кампании
	ИначеЕсли Не Отказ И Структура.ТипЗапросаКСтранице = ВРег("createDocumentCampaign") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		КампанияЗакрыта = ЗакрытьКампанию(Структура);
	КонецЕсли;	
			
	//Если заказ пуст, просим отсканировать его
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) И Не ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Отсканируйте VIN. ", "Scan VIN. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;		
	КонецЕсли;

	//Определение дефектов
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Дефекты = ОпределитьДефекты(Структура.ЗаказСсылка, Структура.ДефектыСтатус, Структура.ТочкаПроверкиКачества.ИнспектируемыеЭлементы.Выгрузить().ВыгрузитьКолонку("ИнспектируемыйЭлемент"), Структура.ТочкаПроверкиКачества.Дефекты.Выгрузить().ВыгрузитьКолонку("Дефект"));				
	КонецЕсли;
	
	//Определение действий
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Действия = ОпределитьДействия(Структура.ЗаказСсылка, Структура.ДействияСтатус);				
	КонецЕсли;
	
	//Определение кампаний
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда
		МассивКампанийДоступныхДляЗакрытия = Неопределено;
		Если Структура.ТочкаПроверкиКачества.ЗакрыватьКампанииИзСписка Тогда
			МассивКампанийДоступныхДляЗакрытия = Структура.ТочкаПроверкиКачества.КампанииДоступныеДляЗакрытия.Выгрузить().ВыгрузитьКолонку("Кампания");
		КонецЕсли;
		Структура.Кампании = ОпределитьКампании(Структура.ЗаказСсылка, Структура.КампанииСтатус, МассивКампанийДоступныхДляЗакрытия);
	КонецЕсли;
	
	//Определение некомплектов
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Некомплект = ОпределитьНекомплекты(Структура.ЗаказСсылка, Структура.НекомплектСтатус);				
	КонецЕсли;
	
	//Создание итогового документа
	Если Не Отказ И Структура.ТипЗапросаКСтранице = ВРег("completeInspection") Тогда
		ИнспекцияЗавершена = СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(Структура);
	КонецЕсли;	
	
	//Пишем статус сканирования текущего заказа
	Если ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда
		РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(Структура.РабочееМестоОператора, Структура.ЗаказСсылка, Не Структура.ДействияСтатус);
	КонецЕсли;	
	
	//Пишем в журнал сканирования
	Если ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда
		УровеньСобытия = Перечисления.СОЛЛЕРС_УровниСобытия.Информация;
		Если Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка Тогда
			УровеньСобытия = Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка;
		КонецЕсли;		
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, УровеньСобытия, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата());
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

//По данным структуры мы формируем HTML-страницу и возвращаем её наружу
Функция ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора)
	
	ПользовательскиеСкрипты = "";
	АктивнаяВкладкаЗадана = Ложь;
	НомерВкладки = 0;
	
	//Если нам требуется выполнить скрипт, то дальше по алгоритму не идём
	Если Структура.ДинамическийСкрипт.ВыполнитьСкрипт Тогда 
		
		ТекстСкрипта = "";
		
		Если Структура.ДинамическийСкрипт.ВывестиСообщение Тогда
			ТекстСкрипта = ТекстСкрипта + "
			|	$('#repairerDivMessageToUserBlock').removeClass();
			|	$('#repairerSpanMessageToUserCaption').removeClass();
			|	$('#repairerSpanMessageToUserCaption').addClass('"+Структура.ЦветТекстаСообщения+"');
			|	$('#repairerSpanMessageToUserCaption').text('"+СтрЗаменить(СтрЗаменить(Структура.ТекстСообщения, Символы.ПС, "<br>"), "'", "\'")+"');
			|	";
			
		КонецЕсли;
		
		Если Структура.ДинамическийСкрипт.НичегоНеДелать Тогда
			ТекстСкрипта = ТекстСкрипта + "var none = null;";
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ТекстСкрипта) Тогда
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, Символы.ПС, "");			
			Возврат ТекстСкрипта;
		КонецЕсли;
		
	КонецЕсли;

	//Тело страницы
	HTMLPage = WebWorkstationОбщиеФункции.ПолучитьСтраницу(Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_MainBlock"), Структура.РабочееМестоОператора);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "HTML_Repairer_Service", Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_Service").ПолучитьТекст());
	
	////Надо ли скрывать поле сканирования вина и отображать кнопки выбора вина с линии
	//Если Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьRFID Тогда
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СпособИдентификацииЗаказа", Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_КнопкаПолученияЗаказаОтRFID").ПолучитьТекст());
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDSessionGUID", 	Структура.GUIDСканированиеRFID);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDAction",		Структура.ПривязанныйСканерRFID.Action);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDURL", 			Структура.ПривязанныйСканерRFID.URL);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDSOAPAction",	Структура.ПривязанныйСканерRFID.SOAPAction);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDNamespace", 	Структура.ПривязанныйСканерRFID.Namespace);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDDebugMode", 	?(Структура.ПривязанныйСканерRFID.DebugMode, "True", "False"));
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDIdentity", 	Структура.ПривязанныйСканерRFID.ИдентификаторНетиповогоОбмена);		
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerAttributeRFIDEnabled", Структура.РабочееМестоОператора.ИспользоватьСканерRFID);				
	//	ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "clearTimeout(timerIdCurrentVINFromRFID); timerIdCurrentVINFromRFID = 0;";
	//Иначе 
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СпособИдентификацииЗаказа", Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_ПолеСканирования").ПолучитьТекст());
	//КонецЕсли;
	
	//Кнопка "Сменить рабочее место оператора"	
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НазваниеСтанции", Структура.РабочееМестоОператора);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеРеквизитаДоступныеСтанции", WebWorkstationОбщиеФункции.ПолучитьHTMLТаблицуДоступныхРабочихМестОператора(ТаблицаДоступныхРабочихМестОператора));
	
	//Заполняем страницу данными о заказе
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказСсылка", Структура.ЗаказСсылка);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказУникальныйИдентификатор", Структура.ЗаказУникальныйИдентификатор);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказСтатус", Структура.ЗаказСтатус);
	
	////Если это сканирование RFID и значение уже получено, то отключаем автоматическое получение винов
	//Если Структура.СканированиеRFIDВыполнено Тогда
	//	ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "clearTimeout(timerIdCurrentVINFromRFID); timerIdCurrentVINFromRFID = 0;";		
	//КонецЕсли;
		
	//Заглушка на тот случай, если вин не отсканирован
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivMainBodyBlock", "repairerDivWhiteBlock");
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerButtonMainScanningFieldContent').text('Нажмите для получения VIN');";
	КонецЕсли;
	
	//Если ремонт завершен, то запрещаем любые интерактивные действия 
	Если Структура.ТолькоЧтение = Истина Тогда
		//ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivCheckMainBlock').remove();";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('.repairerDivCreateDocumentBlock').remove();";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerButtonComplete').removeClass('btn-primary');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerButtonComplete').addClass('btn-default disabled');";
	КонецЕсли;

	//Текст сообщения
	Если ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда 
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюЦвет", Структура.ЦветТекстаСообщения);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюТекст", СтрЗаменить(Структура.ТекстСообщения, Символы.ПС, "<br>"));
	Иначе
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivMessageToUserBlock').remove();";
	КонецЕсли;		
	
	//Дополнительные характеристики заказа. Дефекты
	Если Истина Тогда		
		НомерВкладки = НомерВкладки + 1;		
		Заголовок = ОбработатьТекстСообщения("Дефекты", "Defects");
		
		HTMLТекст = HTMLЗаполнитьВкладкуДефекты(Заголовок, Структура.Дефекты);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиСоздатьДокумент", ОбработатьТекстСообщения("Закрыть", "Close"));		
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиДефекты", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиДефекты", Формат(НомерВкладки, "ЧГ=0"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.ДефектыСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockDefects", "btn-danger styleOpacity");
			Если Не АктивнаяВкладкаЗадана Тогда
				АктивнаяВкладкаЗадана = Истина;
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivTabDefects').removeClass('styleHidden');";
			КонецЕсли;
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockDefects", "btn-success styleOpacity");
		КонецЕсли;
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Действия
	Если Истина Тогда		
		НомерВкладки = НомерВкладки + 1;		
		Заголовок = ОбработатьТекстСообщения("Действия", "Actions");
		
		HTMLТекст = HTMLЗаполнитьВкладкуДействия(Заголовок, Структура.Действия);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиСоздатьДокумент", ОбработатьТекстСообщения("Выполнено", "Done"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиДействия", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиДействия", Формат(НомерВкладки, "ЧГ=0"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.ДействияСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockActions", "btn-danger styleOpacity");
			Если Не АктивнаяВкладкаЗадана Тогда
				АктивнаяВкладкаЗадана = Истина;
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivTabActions').removeClass('styleHidden');";
			КонецЕсли;
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockActions", "btn-success styleOpacity");
		КонецЕсли;
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Некомплект
	Если Истина Тогда		
		НомерВкладки = НомерВкладки + 1;		
		Заголовок = ОбработатьТекстСообщения("Некомплект", "Shortage");
		
		HTMLТекст = HTMLЗаполнитьВкладкуНекомплект(Заголовок, Структура.Некомплект);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиСоздатьДокумент", ОбработатьТекстСообщения("Установить", "Install"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиНекомплект", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиНекомплект", Формат(НомерВкладки, "ЧГ=0"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.НекомплектСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockShortage", "btn-danger styleOpacity");
			Если Не АктивнаяВкладкаЗадана Тогда
				АктивнаяВкладкаЗадана = Истина;
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivTabShortage').removeClass('styleHidden');";
			КонецЕсли;
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockShortage", "btn-success styleOpacity");
		КонецЕсли;
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Кампании
	Если Истина Тогда		
		НомерВкладки = НомерВкладки + 1;
		Заголовок = ОбработатьТекстСообщения("Кампании", "Campaigns");
		
		HTMLТекст = HTMLЗаполнитьВкладкуКампании(Заголовок, Структура.Кампании);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиСоздатьДокумент", ОбработатьТекстСообщения("Закрыть", "Close"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиКампании", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиКампании", Формат(НомерВкладки, "ЧГ=0"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.КампанииСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockCampaign", "btn-danger styleOpacity");
			Если Не АктивнаяВкладкаЗадана Тогда
				АктивнаяВкладкаЗадана = Истина;
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#repairerDivTabCampaign').removeClass('styleHidden');";
			КонецЕсли;
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "repairerDivCheckSubBlockCampaign", "btn-success styleOpacity");
		КонецЕсли;
	КонецЕсли;
	
	
	//Добавляем пользовательские скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);

	Возврат HTMLPage;
	
КонецФункции


							//** Функции заполнения структуры этого интерфейса **//

//Определяем данные с формы
Функция РаспознатьПереданныеДанныеСФормы(Структура, JSONСоответствие)
	
	СтруктураПараметровСозданияДокументов = Структура.СтруктураПараметровСозданияДокументов;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentDefectGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("documentDefectGUID"));
		СтруктураПараметровСозданияДокументов.ОперацияПоКачеству = Документы.ОперацияПоКачеству.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentDefectComment")) Тогда
		СтруктураПараметровСозданияДокументов.Комментарий = JSONСоответствие.Получить("documentDefectComment");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentDefectReplace")) Тогда
		СтруктураПараметровСозданияДокументов.ПроизведенаЗамена = JSONСоответствие.Получить("documentDefectReplace");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentDefectRemove")) Тогда
		СтруктураПараметровСозданияДокументов.ПроизведенДемонтаж = JSONСоответствие.Получить("documentDefectRemove");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentActionsGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("documentActionsGUID"));
		СтруктураПараметровСозданияДокументов.Задача = Задачи.ОбслуживаниеПриЗакрытииКонсерна.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("referenceCampaignGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("referenceCampaignGUID"));
		СтруктураПараметровСозданияДокументов.Кампания = Справочники.Кампании.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentShortageGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("documentShortageGUID"));
		СтруктураПараметровСозданияДокументов.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("documentShortageNomenclatureCount")) Тогда
		СтруктураПараметровСозданияДокументов.КоличествоНоменклатуры = JSONСоответствие.Получить("documentShortageNomenclatureCount");
	КонецЕсли;	
	
	Возврат СтруктураПараметровСозданияДокументов;
	
КонецФункции

//Пытаемся понять, что отсканировали в поле ввода
Функция РаспознатьОтсканированноеЗначение(Событие, Структура, ЗначениеПолученоСоСканераRFID = Ложь)
	
	//Точно есть что распознавать?
	ПродолжитьРаспознавание = Истина;
	Если Не ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда				
		ПродолжитьРаспознавание = Ложь;
	КонецЕсли;
	
	////Сюда может быть передано последнее значение со сканера RFID
	//Если ПродолжитьРаспознавание И ЗначениеПолученоСоСканераRFID Тогда
	//	Структура.ОтсканированноеЗначение = Обработки.ЗагрузкаMES_FROM_RFID_READERS.РаспознатьЗначениеПолученноеСоСканераRFID_ПоискVIN(Структура.ОтсканированноеЗначение);
	//КонецЕсли;
	
	//Проверяем, не заказ ли это
	Если ПродолжитьРаспознавание Тогда
		
		Заказ = ОпеределитьЗаказ("", СокрЛП(Структура.ОтсканированноеЗначение), Структура.РабочееМестоОператора);
		Если ЗначениеЗаполнено(Заказ) Тогда			
			ПродолжитьРаспознавание = Ложь;
			Структура.ЗаказСсылка = Заказ;
			Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
			Структура.СтруктураРаспознанияЗначения.Заказ = Заказ;			
		КонецЕсли;
		
	КонецЕсли;
	
	//Мы так и не поняли, что это было отсканировано
	Если ПродолжитьРаспознавание Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Значение '"+Структура.ОтсканированноеЗначение+"' не распознано. ", "Value '"+Структура.ОтсканированноеЗначение+"' was not recognized. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	//Сохраняем статус этого сканирования
	Структура.СтруктураРаспознанияЗначения.ЗначениеРаспознано = Не ПродолжитьРаспознавание;
	
	Если ПродолжитьРаспознавание Тогда //Поняли, что сканировали
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата());
	Иначе //Не поняли, что сканировали
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Информация, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата());
	КонецЕсли;

	Возврат Структура.СтруктураРаспознанияЗначения;
	
КонецФункции

//Если в отсканированном значении был передан VIN длиной 7, 8, 17 символов, мы его находим и возвращаем обратно заказ
Функция ОпеределитьЗаказ(УникальныйИдентификаторСтрока, ОтсканированноеЗначение, РабочееМестоОператора)
	
	Заказ = Справочники.Заказы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(УникальныйИдентификаторСтрока) Тогда

		УникальныйИдентификатор = Новый УникальныйИдентификатор(СокрЛП(УникальныйИдентификаторСтрока));
		
		//Заказ должен был найтись по этому уникальному идентификатору
		Заказ = Справочники.Заказы.ПолучитьСсылку(УникальныйИдентификатор);
		Если Заказ.ПолучитьОбъект() = Неопределено Тогда
			Заказ = Справочники.Заказы.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ОтсканированноеЗначение) Тогда
		
		//Определение возможных вариантов реквизитов для сканирования
		СообщениеОшибки = "";
		СписокРеквизитовКонтрольныхМеток = Производство.ОпределитьСканируемыеРеквизиты(РабочееМестоОператора);
	 	ФорматПодходит = Производство.ПроверитьФорматЗначенияКонтрольнойМеткиПоСпискуКонтрольныхМеток(СписокРеквизитовКонтрольныхМеток, ВРег(ОтсканированноеЗначение), СообщениеОшибки);					
		Если ФорматПодходит Тогда
			Заказ = Производство.ОпределитьЗаказПоСпискуКонтрольныхМеток(СписокРеквизитовКонтрольныхМеток, ОтсканированноеЗначение, Ложь);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Заказ;
	
КонецФункции

//Определение дефектов
Функция ОпределитьДефекты(Заказ, ЕстьОткрытыйДефект, МассивИнспектируемыхЭлементов, МассивДефектов)
		
	Дефекты = Новый ТаблицаЗначений;
	//Дефекты.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("Строка"),									"Дата", 					1);
	Дефекты.Колонки.Добавить("Колонка2", 					Новый ОписаниеТипов("СправочникСсылка.ИнспектируемыеЭлементы"),	ОбработатьТекстСообщения("Деталь", "Detail"),			1);	
	Дефекты.Колонки.Добавить("Колонка3", 					Новый ОписаниеТипов("СправочникСсылка.Дефекты"),				ОбработатьТекстСообщения("Дефект", "Defect"), 			1);
	Дефекты.Колонки.Добавить("Колонка4", 					Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииA"),		ОбработатьТекстСообщения("Позиция A", "Position A"), 	1);
	Дефекты.Колонки.Добавить("Колонка5", 					Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииB"),		ОбработатьТекстСообщения("Позиция B", "Position B"),	1);
	Дефекты.Колонки.Добавить("Колонка6", 					Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииC"),		ОбработатьТекстСообщения("Позиция C", "Position C"),	1);
	Дефекты.Колонки.Добавить("Колонка7", 					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)),ОбработатьТекстСообщения("Комментарий", "Comments"),	1);
	Дефекты.Колонки.Добавить("УникальныйИдентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"),					"УникальныйИдентификатор",								0);
	                                                                                                                
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсерныОстатки.Консерн.Дата КАК Дата,
		|	КонсерныОстатки.Консерн,
		|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	КонсерныОстатки.Консерн.Дефект КАК Дефект,
		|	КонсерныОстатки.Консерн.ТипДефекта КАК ТипДефекта,
		|	КонсерныОстатки.Консерн.ПозицияА КАК ПозицияА,
		|	КонсерныОстатки.Консерн.ПозицияB КАК ПозицияB,
		|	КонсерныОстатки.Консерн.ПозицияC КАК ПозицияC,
		|	КонсерныОстатки.Консерн.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрНакопления.Консерны.Остатки КАК КонсерныОстатки
		|ГДЕ
		|	КонсерныОстатки.Заказ = &Заказ
		|	И КонсерныОстатки.Консерн.ИнспектируемыйЭлемент В(&МассивИнспектируемыхЭлементов)
		|	И КонсерныОстатки.Консерн.Дефект В(&МассивДефектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";

	Запрос.УстановитьПараметр("МассивИнспектируемыхЭлементов", МассивИнспектируемыхЭлементов);
	Запрос.УстановитьПараметр("МассивДефектов", МассивДефектов);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Если Не ЗначениеЗаполнено(МассивИнспектируемыхЭлементов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КонсерныОстатки.Консерн.ИнспектируемыйЭлемент В(&МассивИнспектируемыхЭлементов)", "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивДефектов) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КонсерныОстатки.Консерн.Дефект В(&МассивДефектов)", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытыеКонсёрны Из ТаблицаДетальныеЗаписи Цикл

		ЕстьОткрытыйДефект = Истина;
		
		НоваяСтрока = Дефекты.Добавить();
		//НоваяСтрока.Колонка1 = Формат(ОткрытыеКонсёрны.Дата, "ДФ='dd.MM.yy hh:mm'");
		НоваяСтрока.Колонка2 = ОткрытыеКонсёрны.ИнспектируемыйЭлемент;
		НоваяСтрока.Колонка3 = ОткрытыеКонсёрны.Дефект;
		НоваяСтрока.Колонка4 = ОткрытыеКонсёрны.ПозицияА;
		НоваяСтрока.Колонка5 = ОткрытыеКонсёрны.ПозицияB;
		НоваяСтрока.Колонка6 = ОткрытыеКонсёрны.ПозицияC;
		НоваяСтрока.Колонка7 = ОткрытыеКонсёрны.Комментарий;
		НоваяСтрока.УникальныйИдентификатор = ОткрытыеКонсёрны.Консерн.УникальныйИдентификатор();
		
	КонецЦикла;
	
	Возврат Дефекты;
	
КонецФункции

//Определение действий
Функция ОпределитьДействия(Заказ, ЕстьДействия)
	
	Действия = Новый ТаблицаЗначений;

	Действия.Колонки.Добавить("Колонка1", 					Новый ОписаниеТипов("СправочникСсылка.ИнспектируемыеЭлементы"),			ОбработатьТекстСообщения("Деталь", "Detail"),			1);		
	Действия.Колонки.Добавить("Колонка2", 					Новый ОписаниеТипов("СправочникСсылка.ДействияПриЗакрытииКонсерна"),	ОбработатьТекстСообщения("Действие", "Action"), 		1);
	Действия.Колонки.Добавить("Колонка3", 					Новый ОписаниеТипов("Строка"),											ОбработатьТекстСообщения("Описание", "Description"),	1);	
	Действия.Колонки.Добавить("УникальныйИдентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"),							"УникальныйИдентификатор", 								0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбслуживаниеПриЗакрытииКонсерна.Ссылка КАК Задача,
		|	ОбслуживаниеПриЗакрытииКонсерна.ДокументЗакрытияКонсерна.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	ОбслуживаниеПриЗакрытииКонсерна.СработавшееДействие КАК Действие,
		|	ОбслуживаниеПриЗакрытииКонсерна.СработавшееДействие.ОписаниеОбслуживания КАК Описание
		|ИЗ
		|	Задача.ОбслуживаниеПриЗакрытииКонсерна КАК ОбслуживаниеПриЗакрытииКонсерна
		|ГДЕ
		|	ОбслуживаниеПриЗакрытииКонсерна.Заказ = &Заказ
		|	И НЕ ОбслуживаниеПриЗакрытииКонсерна.Выполнена
		|	И НЕ ОбслуживаниеПриЗакрытииКонсерна.ПометкаУдаления";

	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ДоступныеДействия Из ТаблицаДетальныеЗаписи Цикл
		
		НоваяСтрока = Действия.Добавить();
		НоваяСтрока.Колонка1 = ДоступныеДействия.ИнспектируемыйЭлемент;
		НоваяСтрока.Колонка2 = ДоступныеДействия.Действие;
		НоваяСтрока.Колонка3 = ДоступныеДействия.Описание;
		НоваяСтрока.УникальныйИдентификатор = ДоступныеДействия.Задача.УникальныйИдентификатор();
		ЕстьДействия = Истина;
		
	КонецЦикла;
		
	Возврат Действия;
	
КонецФункции

//Определение кампаний
Функция ОпределитьКампании(Заказ, ЕстьКампания, МассивКампанийДоступныхДляЗакрытия)
		          
	Кампании = Новый ТаблицаЗначений;
	Кампании.Колонки.Добавить("Колонка1", 					Новый ОписаниеТипов("СправочникСсылка.Кампании"),	ОбработатьТекстСообщения("Кампания", "Campaign"),	1);	
	Кампании.Колонки.Добавить("Колонка2", 					Новый ОписаниеТипов("Строка"), 						ОбработатьТекстСообщения("Статус", "Status"),	1);
	Кампании.Колонки.Добавить("УникальныйИдентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"),		"УникальныйИдентификатор", 	0);
	
	Запрос = Новый Запрос;
	Если МассивКампанийДоступныхДляЗакрытия = Неопределено Тогда		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КампанииОстатки.Заказ,
			|	КампанииОстатки.Кампания,
			|	КампанииОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.Кампании.Остатки(, Заказ = &Заказ) КАК КампанииОстатки";		
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КампанииОстатки.Заказ,
			|	КампанииОстатки.Кампания,
			|	КампанииОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.Кампании.Остатки(, Заказ = &Заказ) КАК КампанииОстатки
			|ГДЕ
			|	КампанииОстатки.Кампания В(&МассивКампанийДоступныхДляЗакрытия)";			
	КонецЕсли;

	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("МассивКампанийДоступныхДляЗакрытия", МассивКампанийДоступныхДляЗакрытия);
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытаяКампания Из ТаблицаДетальныеЗаписи Цикл
		НоваяСтрока = Кампании.Добавить();
		НоваяСтрока.Колонка1 = ОткрытаяКампания.Кампания;
		НоваяСтрока.Колонка2 = ОбработатьТекстСообщения("Открыта", "Opened");
		НоваяСтрока.УникальныйИдентификатор = ОткрытаяКампания.Кампания.УникальныйИдентификатор();
		ЕстьКампания = Истина;
	КонецЦикла;
	
	Возврат Кампании;
	
КонецФункции

//Определение некомплектов
Функция ОпределитьНекомплекты(Заказ, ЕстьНекомплект)
	
	Некомплекты = Новый ТаблицаЗначений;
	Некомплекты.Колонки.Добавить("Колонка1", 				Новый ОписаниеТипов("Строка"),					ОбработатьТекстСообщения("Номенклатура", "Nomenclature"),	1);
	Некомплекты.Колонки.Добавить("Колонка2", 				Новый ОписаниеТипов("Строка"),					ОбработатьТекстСообщения("Партномер", "Partnumber"),		1);
	Некомплекты.Колонки.Добавить("Количество", 				Новый ОписаниеТипов("Число"),					ОбработатьТекстСообщения("Количество", "Count"),			1);
	Некомплекты.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"),	"УникальныйИдентификатор", 									0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НекомплектыОстатки.Заказ,
		|	НекомплектыОстатки.Номенклатура,
		|	НекомплектыОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Некомплекты.Остатки(, Заказ = &Заказ) КАК НекомплектыОстатки";

	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытыеНекомплекты Из ТаблицаДетальныеЗаписи Цикл
		
		НоваяСтрока = Некомплекты.Добавить();
		НоваяСтрока.Колонка1 = ОткрытыеНекомплекты.Номенклатура.Наименование;
		НоваяСтрока.Колонка2 = ОткрытыеНекомплекты.Номенклатура.КодЗавода;
		НоваяСтрока.Количество = ОткрытыеНекомплекты.КоличествоОстаток;
		НоваяСтрока.УникальныйИдентификатор = ОткрытыеНекомплекты.Номенклатура.УникальныйИдентификатор();
		ЕстьНекомплект = Истина;
		
	КонецЦикла;
	
	Возврат Некомплекты;
	
КонецФункции

//Сохранить идентификатор вызова сканера RFID
Функция СохранитьИдентификаторСканированияRFIDМетки(РабочееМестоОператора, ВходящиеПараметры)
		
	ЗаписьДобавлена = Ложь;
		
	//Записываем уникальный идентификатор вызова сканера в регистр
	Если РабочееМестоОператора.ИспользоватьСканерRFID Тогда
		
		УникальныйИдентификаторВызоваСканераRFID = ВходящиеПараметры.Получить("JSONСоответствие").Получить("repairerAttributeRFIDSessionGUID");	
		Если ЗначениеЗаполнено(УникальныйИдентификаторВызоваСканераRFID) Тогда
			ЗаписьДобавлена = РегистрыСведений.СтатусыСканеровRFID.ЗаписатьТекущуюСессиюРаботыСоСканером(РабочееМестоОператора.ПривязанныйСканерRFID, УникальныйИдентификаторВызоваСканераRFID);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаписьДобавлена;	
	
КонецФункции

						//** Интерактивные действия, ради которых и создан этот интерфейс **//

//Закрыть дефект
Функция ЗарегистрироватьРемонт(Структура)
	
	ДокументСоздан = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//А что насчёт консерна?
	Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству) Или Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.ПолучитьОбъект() = Неопределено Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не удалось найти документ открытия дефекта. ", "Can't recognize defect. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//Создание 	
	ДокументСоздан = QNS.РегистрацияРемонта(Структура.ТочкаПроверкиКачества,
		Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству,
		Структура.СтруктураПараметровСозданияДокументов.Комментарий,
		Структура.СтруктураПараметровСозданияДокументов.ПроизведенаЗамена,
		Структура.СтруктураПараметровСозданияДокументов.ПроизведенДемонтаж,
		"",
		Структура.ТекстСообщения);
	Если ДокументСоздан = Истина Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Дефект """+Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.Дефект+""" оборудования """+Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.ИнспектируемыйЭлемент+""" устранён. ", "Defect """+Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.Дефект+""" of equipment """+Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.ИнспектируемыйЭлемент+""" was removed. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
	Иначе
		Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа качества произошла ошибка: "+Структура.ТекстСообщения, "An error occurred while creating the quality document: "+Структура.ТекстСообщения);
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	Возврат ДокументСоздан;
	
КонецФункции

//Выполнить задачу
Функция ВыполнитьЗадачу(Структура)
	
	ЗадачаВыполнена = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ЗадачаВыполнена;
	КонецЕсли;
	
	//А что насчёт задачи?
	Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.Задача) Или Структура.СтруктураПараметровСозданияДокументов.Задача.ПолучитьОбъект() = Неопределено Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не удалось определить задачу. ", "Can't recognize task. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ЗадачаВыполнена;
	КонецЕсли;
	
	//Создание
	Попытка
		Задача = Структура.СтруктураПараметровСозданияДокументов.Задача.ПолучитьОбъект();
		Задача.ВыполнитьЗадачу();
		ЗадачаВыполнена = Истина;
	Исключение
		ЗадачаВыполнена = Ложь;		
	КонецПопытки;
	
	//Текст сообщения
	Если ЗадачаВыполнена = Истина Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Задача """+Структура.СтруктураПараметровСозданияДокументов.Задача.СработавшееДействие+""" выполнена. ", "Task """+Структура.СтруктураПараметровСозданияДокументов.Задача.СработавшееДействие+""" was completed. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
	Иначе
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Зарегистрировать выполнение задачи """+Структура.СтруктураПараметровСозданияДокументов.Задача+""" не удалось. ", "Failed to register task """+Структура.СтруктураПараметровСозданияДокументов.Задача+""" execution. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	Возврат ЗадачаВыполнена;
	
КонецФункции

//Закрыть кампанию
Функция ЗакрытьКампанию(Структура)
	
	КампанияЗакрыта = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат КампанияЗакрыта;
	КонецЕсли;
	
	//А что насчёт кампании?
	Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.Кампания) Или Структура.СтруктураПараметровСозданияДокументов.Кампания.ПолучитьОбъект() = Неопределено Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не удалось определить кампанию. ", "Can't recognize campaign. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат КампанияЗакрыта;
	КонецЕсли;
	
	//Создание
	КампанияЗакрыта = QNS.ВыполнитьОперациюПоКампании(Структура.ЗаказСсылка, Структура.СтруктураПараметровСозданияДокументов.Кампания, Перечисления.ОперацииКампании.Снятие);  
	
	//Текст сообщения
	Если КампанияЗакрыта = Истина Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Кампания """+Структура.СтруктураПараметровСозданияДокументов.Кампания+""" снята. ", "Campaign """+Структура.СтруктураПараметровСозданияДокументов.Кампания+""" was removed. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
	Иначе
		Структура.ТекстСообщения = ОбработатьТекстСообщения("При снятии кампании """+Структура.СтруктураПараметровСозданияДокументов.Кампания+""" возникла ошибка """, "An error occurred while removing the campaign """+Структура.СтруктураПараметровСозданияДокументов.Кампания+""". ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	Возврат КампанияЗакрыта;
	
КонецФункции

//Установить некомплект
Функция УстановитьНекомплект(Структура)
	
	НекомплектУстановлен = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат НекомплектУстановлен;
	КонецЕсли;
	
	//А что насчёт задачи?
	Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.Номенклатура) Или Структура.СтруктураПараметровСозданияДокументов.Номенклатура.ПолучитьОбъект() = Неопределено Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не удалось определить номенклатуру. ", "Can't recognize nomenclature. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат НекомплектУстановлен;
	КонецЕсли;
	
	//Создание
	НекомплектУстановлен = QNS.ВыполнитьОперациюПоНекомплекту(Структура.ЗаказСсылка, Структура.СтруктураПараметровСозданияДокументов.Номенклатура, Структура.СтруктураПараметровСозданияДокументов.КоличествоНоменклатуры, Перечисления.ОперацииНекомплектов.Устранение);
	
	//Текст сообщения
	Если НекомплектУстановлен = Истина Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Некомплект """+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+""" устранён. ", "Shortage """+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+""" was closed. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
	Иначе
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Устранить некомплект """+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+""" не удалось. ", "Can't close shortage """+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+""". ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	Возврат НекомплектУстановлен;
	
КонецФункции

//Создание документа "Регистрация прохождения точек проверки качества"
Функция СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(Структура)
	
	//Так как это итоговый документ, который завершает цикл проверки автомобиля, надо выполнить некоторые контроли
	ИтоговыйТекстСообщения = "";	
	КонтрольПройден = Истина;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат Ложь;
	КонецЕсли;
	
	//Контроль 1. Требуется выполнить все действия
	Разделитель = ОбработатьТекстСообщения("Требуется выполнить следующие действия: ", "You need to complete these actions: ");
	ТекстСообщения = "";
	Если Истина Тогда
		Для Каждого Действие Из Структура.Действия Цикл
			ТекстСообщения = ТекстСообщения + Разделитель + Строка(""""+Действие.Колонка2+"""") + ОбработатьТекстСообщения(" для ", " for ") + Строка(""""+Действие.Колонка1+"""");	
			Разделитель = ", ";
			КонтрольПройден = Ложь;
		КонецЦикла;
	КонецЕсли;	
	Если Не КонтрольПройден Тогда
		ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + ТекстСообщения;
	КонецЕсли;

	
	//Контроль 2. Требуется пройти все точки контроля качества
	Разделитель = ОбработатьТекстСообщения("Требуется прохождение следующих точек: ", "You need to pass these stations: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек Тогда
		КонтрольПрохожденияОбязательныхТочекПройден = QNS.ОбязательныеТочкиПройдены(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества, ТекстСообщения);
		Если Не КонтрольПрохожденияОбязательныхТочекПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Контроль 3. Требуется устранить дефекты
	Разделитель = ОбработатьТекстСообщения("Требуется устранить следующие дефекты: ", "You need to fix these defects: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьНаличиеОткрытыхКонсернов Тогда
		Если Структура.ТочкаПроверкиКачества.КонтролироватьСледующиеДефекты Тогда
			МассивДефектов = Структура.ТочкаПроверкиКачества.КонтролируемыеДефекты.Выгрузить().ВыгрузитьКолонку("Дефект");		
			КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , МассивДефектов, Ложь);
			Если Не КонтрольОткрытыхКонсерновПройден Тогда
				ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
				КонтрольПройден = Ложь;
			КонецЕсли;			
		Иначе			
			КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , , Ложь);
			Если Не КонтрольОткрытыхКонсерновПройден Тогда
				ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
				КонтрольПройден = Ложь;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	////Контроль 4. Требуется проверить устраненные дефекты
	//Разделитель = ОбработатьТекстСообщения("Требуется выполнить проверку устраненных дефектов: ", "You need to check of fix these defects: ");
	//ТекстСообщения = "";
	//Если Структура.ТочкаПроверкиКачества.КонтролироватьВыполненныйРемонт Тогда
	//	Если Структура.ТочкаПроверкиКачества.КонтролироватьСледующийРемонт Тогда
	//		МассивДефектов = Структура.ТочкаПроверкиКачества.КонтролируемыйРемонт.Выгрузить().ВыгрузитьКолонку("Дефект");		
	//		КонтрольНаличияНепроверенногоРемонтаПройден = Не QNS.КонтрольНаличияНепроверенныхОтремонтированныхЭлементов(Структура.ЗаказСсылка, ТекстСообщения, , , , МассивДефектов, Ложь);
	//		Если Не КонтрольНаличияНепроверенногоРемонтаПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	Иначе			
	//		КонтрольНаличияНепроверенногоРемонтаПройден = Не QNS.КонтрольНаличияНепроверенныхОтремонтированныхЭлементов(Структура.ЗаказСсылка, ТекстСообщения, , , , , Ложь);
	//		Если Не КонтрольНаличияНепроверенногоРемонтаПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	КонецЕсли;
	//КонецЕсли;
	
	//Контроль 5. Требуется закрыть кампании
	Разделитель = ОбработатьТекстСообщения("Требуется закрыть следующие кампании: ", "You need to close these compaigns: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьНаличиеКампаний Тогда
		ТипыКампаний = Структура.ТочкаПроверкиКачества.КонтролируемыеКампании.Выгрузить();
		КонтрольОткрытыхКампанийПройден = Не QNS.КонтрольНаличияКампаний(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества.КонтролируемыеТипыКампании.Выгрузить().ВыгрузитьКолонку("ТипКампании"),Структура.ТочкаПроверкиКачества.КонтролируемыеКампании.Выгрузить().ВыгрузитьКолонку("Кампания"), ТекстСообщения);
		Если Не КонтрольОткрытыхКампанийПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Контроль 6. Требуется устранить некомплекты
	Разделитель = ОбработатьТекстСообщения("Требуется устранить следующие некомплекты: ", "You need to set these shortages: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьКомплектность Тогда
		КонтрольНекомплектовПройден = QNS.КонтрольКомплектности(Структура.ЗаказСсылка, ТекстСообщения);
		Если Не КонтрольНекомплектовПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	//Создание документа регистрации движения
	Если КонтрольПройден Тогда
		ДвижениеЗарегистрировано = QNS.РегистрацияПрохожденияТочкиПроверкиКачества(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества);	
		Если ДвижениеЗарегистрировано Тогда
		 	Структура.ТекстСообщения = ОбработатьТекстСообщения("Ремонт автомобиля "+Структура.ЗаказСсылка+" выполнен.", "Vehicle repair completed. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;
			Структура.ТолькоЧтение = Истина;
		КонецЕсли;
	Иначе
		ДвижениеЗарегистрировано = Истина;
		Структура.ТекстСообщения = СокрЛП(ИтоговыйТекстСообщения);
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
		
	Возврат ДвижениеЗарегистрировано;
	
КонецФункции

//Определение состояния ремонта
Функция ОпределитьСостояниеРемонта(Заказ, ТочкаПроверкиКачества) Экспорт
	
	РемонтВыполнен = Неопределено;
	
	//Получаем последнее движение по точке проверки качества
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Период КАК Период,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Выполнена
		|ИЗ
		|	РегистрСведений.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.СрезПоследних КАК ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних
		|ГДЕ
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ = &Заказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТочкаПроверкиКачества = ТочкаПроверкиКачества Тогда
			РемонтВыполнен = Истина;
		Иначе
			РемонтВыполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РемонтВыполнен;
	
КонецФункции


								//**	Функции работы с HTML	**//
										
//Заменить названия элементов на форме
Функция HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage)
	
	СтруктураНазванияЭлементов = Новый Структура();
	
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаЗаголовокСтанция",			НСтрMES("ru = 'Выберите рабочее место оператора'; en = 'Choose a working place of operator'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаВыход",					НСтрMES("ru = 'Выход'; en = 'Exit'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаЗакрыть",				НСтрMES("ru = 'Закрыть'; en = 'Close'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаЗавершитьИнспекцию",			НСтрMES("ru = 'Завершить ремонт'; en = 'Complete a repair'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаДобавитьНоменклатуру",	НСтрMES("ru = 'Добавить'; en = 'Add'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаНоменклатура",				НСтрMES("ru = 'Номенклатура'; en = 'Nomenclature'"));	
	СтруктураНазванияЭлементов.Вставить("НаименованиеБлокаКомментарий",						НСтрMES("ru = 'Комментарий: '; en = 'Commentary: '"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеБлокаРемонт",							НСтрMES("ru = 'Замена: '; en = 'Replace: '"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеБлокаДемонтаж",						НСтрMES("ru = 'Демонтаж: '; en = 'Disassembling: '"));	
	
	Для Каждого НазваниеЭлемента Из СтруктураНазванияЭлементов Цикл
		HTMLPage = СтрЗаменить(HTMLPage, "<!--"+НазваниеЭлемента.Ключ+"-->", НазваниеЭлемента.Значение);
	КонецЦикла;
	
	Возврат HTMLPage;
	
КонецФункции

//Замена шаблонного значения в HTML строке
Функция HTMLЗаполнитьЗначение(HTMLPage, Шаблон, Значение, СохранитьШаблон = Ложь)
	
	Шаблон = "<!--"+Шаблон+"-->";
	
	Если Не СохранитьШаблон Тогда
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение));
	Иначе
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение)+Символы.ПС+Шаблон);
	КонецЕсли;
	
	Возврат HTMLPage;
	
КонецФункции
							
//Заполнить вкладку "Дефекты"
Функция HTMLЗаполнитьВкладкуДефекты(Наименование, ТаблицаЗначений = Неопределено) 
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_ДополнительныеХарактеристики_ВкладкаДефекты").ПолучитьТекст();
		
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent repairerDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
			КонецЕсли;
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело 
		HTMLБлокСоставДополнительныхХарактеристик = "<div id='repairerDivCheckSubBlockContentLines'>";
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContent' guid='"+Запись.УникальныйИдентификатор+"'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
				КонецЕсли;
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Интерактив
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиПроверкаВыполнена", ОбработатьТекстСообщения("Создать документ", "Create"));	
		
	Иначе
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='repairerDivEmptyBlock'>"+ТекстНетДанныхДляВывода+"</div>";
		HTMLНетДанныхДляВывода = HTMLНетДанныхДляВывода + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#repairerDivDefectsContent').remove(); $('#repairerDivDefectsContentCreateDocuments').remove();	});	</script>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить вкладку "Действия"
Функция HTMLЗаполнитьВкладкуДействия(Наименование, ТаблицаЗначений = Неопределено) 
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_ДополнительныеХарактеристики_ВкладкаДействия").ПолучитьТекст();
		
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent repairerDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
			КонецЕсли;
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent' guid='"+Запись.УникальныйИдентификатор+"'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
				КонецЕсли;
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;
		
		//Интерактив
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиПроверкаВыполнена", ОбработатьТекстСообщения("Создать документ", "Create"));	
		
	Иначе
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='repairerDivEmptyBlock'>"+ТекстНетДанныхДляВывода+"</div>";
		HTMLНетДанныхДляВывода = HTMLНетДанныхДляВывода + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#repairerDivActionsContent').remove(); $('#repairerDivActionsContentCreateDocuments').remove();	});	</script>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить вкладку "Некомплект"
Функция HTMLЗаполнитьВкладкуНекомплект(Наименование, ТаблицаЗначений = Неопределено) 
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_ДополнительныеХарактеристики_ВкладкаНекомплект").ПолучитьТекст();
		
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent repairerDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
			КонецЕсли;
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent' guid='"+Запись.УникальныйИдентификатор+"'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
					Если Колонка.Имя = "Количество" Тогда
						HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'><input type='number' class='repairerInputInspectionItemNomenclatureSetCount' value='"+Запись[Колонка.Имя]+"'></input></div>";
					Иначе
						HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;
		
		//Интерактив
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиПроверкаВыполнена", ОбработатьТекстСообщения("Создать документ", "Create"));	
		
	Иначе
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='repairerDivEmptyBlock'>"+ТекстНетДанныхДляВывода+"</div>";
		HTMLНетДанныхДляВывода = HTMLНетДанныхДляВывода + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#repairerDivShortageContent').remove(); $('#repairerDivShortageContentCreateDocuments').remove();	});	</script>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить вкладку "Кампании"
Функция HTMLЗаполнитьВкладкуКампании(Наименование, ТаблицаЗначений = Неопределено) 
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_REPAIRER.ПолучитьМакет("HTML_Repairer_ДополнительныеХарактеристики_ВкладкаКампании").ПолучитьТекст();
		
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent repairerDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
			КонецЕсли;
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='repairerDivCheckSubBlockContent' guid='"+Запись.УникальныйИдентификатор+"'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если ЗначениеЗаполнено(Колонка.Ширина) Тогда
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='repairerDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
				КонецЕсли;
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;
		
		//Интерактив
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиПроверкаВыполнена", ОбработатьТекстСообщения("Создать документ", "Create"));	
		
	Иначе
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='repairerDivEmptyBlock'>"+ТекстНетДанныхДляВывода+"</div>";
		HTMLНетДанныхДляВывода = HTMLНетДанныхДляВывода + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#repairerDivCampaignContent').remove(); $('#repairerDivCampaignContentCreateDocuments').remove();	});	</script>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

Функция HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ)
	
	Шаблон = НастройкаОбмена.ПутьКФайламПриложения;
	Если ПустаяСтрока(Шаблон) Тогда
		//Подменяем html страницу на страницу с ошибкой и возвращаем ее
		ТекстСообщения = НСтрMES("ru='В настройках обмена не заполнен ПутьКФайламПриложения""';en='There is empty ПутьКФайламПриложения in exchange""'")+НСтрMES("ru='""Пожалуйста, обратитесь к консультантам.';en='"" wasn''t assigned any working place. Please, contact your consultants.'");
		HTMLPage = WebWorkstationОбщиеФункции.СгенерироватьСтраницуСОшибкой(ТекстСообщения, ВходящиеПараметры, Отказ);
		Возврат HTMLPage;
	КонецЕсли;
	
	HTMLPage = СтрЗаменить(HTMLPage, "<!--ПутьКФайлам-->", Шаблон);
	
	Возврат HTMLPage;
	
КонецФункции


