
Функция ПолучитьОписаниеОбработкиОбмена() Экспорт
	
	// полный состав параметров описания смотри в этой функции
	СтруктураНастроек = Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	СтруктураНастроек.ТекстовоеОписаниеОбмена = ОбработатьТекстСообщения("Рабочее место Painter. ", "Painter workstation. ");
	СтруктураНастроек.ВидОбмена = Перечисления.ВидыОбмена.Двунаправленный;
	СтруктураНастроек.XML_НастройкаОбязательна = Истина;
	СтруктураНастроек.ДляМножественныхОбменов = Ложь;
	СтруктураНастроек.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host;
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ФильтрПоРабочимМестам");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ГруппаНастройкиАвторизацииНаВебИнтерфейсе");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ЯзыкИнтерфейса");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ТекущийАдресЭтогоВебИнтерфейса");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ПутьКФайламПриложения");

	Возврат СтруктураНастроек;
КонецФункции 

Функция ВыполнитьОбмен(Событие, НастройкаОбмена, ВходящиеПараметры) Экспорт
	
	Отказ = Ложь;
	
	//Определение переменных
	HTMLPage = "";
	ПользовательскиеСкрипты = "";
	РабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	ТаблицаДоступныхРабочихМестОператора = Новый ТаблицаЗначений;
	
	//Определение языка интерфейса
	Если ЗначениеЗаполнено(НастройкаОбмена.ЯзыкИнтерфейса) Тогда
		ПараметрыСеанса.КодТекущегоЯзыка = НастройкаОбмена.ЯзыкИнтерфейса;
	КонецЕсли;
	
	//Определение пользователя и хранение его в параметрах сеанса
	HTMLPage = WebWorkstationОбщиеФункции.ВыполнитьАутентификациюПользователя(НастройкаОбмена, ВходящиеПараметры, Отказ, ПользовательскиеСкрипты);
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//Получить рабочее место оператора
	Если Не Отказ Тогда
		ТаблицаДоступныхРабочихМестОператора = WebWorkstationОбщиеФункции.ПолучитьТаблицуДоступныхРабочихМестОператора(Пользователь, НастройкаОбмена.Ссылка);
		HTMLPage = WebWorkstationОбщиеФункции.ВыбратьРабочееМестоОператора(ТаблицаДоступныхРабочихМестОператора, РабочееМестоОператора, ВходящиеПараметры, Отказ);
	КонецЕсли;
	
	//Вывод интерфейса
	Если Не Отказ Тогда
		HTMLPage = ИнтерфейPainter(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры);
	КонецЕсли;
	
	//Эти переменные должны храниться на странице, даже если мы не вывели страницу самого интерфейса
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionGuid-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionGuid"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionBeginningDate-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionBeginningDate"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeCurrentWorkstationGuid-->", РабочееМестоОператора.УникальныйИдентификатор());	
	
	//Стили и скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", "/*СтилиСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("Styles").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", "/*СкриптыСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("Scripts").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);
	
	//Добавляем иконку в заголовок страницы	
	HTMLPage = СтрЗаменить(HTMLPage, "#allPictureHeaderIcon", "/images/icon-inspector.png");
	
	//Добавить наименования элементов управления
	HTMLPage = HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage);
	
	//Изменим путь к файлам js, css и тд, чтобы их веб-сайт подтягивал не по hs из 1с, а брал из каталога
	HTMLPage = HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ);

	//Сохраняем последнее состояние станции сканирования
	РегистрыСведений.ПоследнееСостояниеСтанцииСканирования.ЗаписатьТекстСостояния(РабочееМестоОператора, HTMLPage);
	
	Возврат HTMLPage;	
	
КонецФункции

Функция ПолучитьСтруктуруИнтерфейса()
	
	//В этом модуле мы будем оперировать структурой
	Структура = Новый Структура;
	Структура.Вставить("Отказ", Ложь);
	
	//Тип запроса
	Структура.Вставить("ТипЗапросаКСтранице", "");
	
	//Режим работы
	Структура.Вставить("РежимРаботы", "");
	РежимыРаботы = Новый Структура;	
	РежимыРаботы.Вставить("ОдноИзображение", "ОдноИзображение");
	РежимыРаботы.Вставить("НесколькоИзображений", "НесколькоИзображений");
	Структура.Вставить("РежимыРаботы", РежимыРаботы);
	
	//Наше текущее рабочее место
	Структура.Вставить("РабочееМестоОператора", Справочники.РабочиеМестаОператоров.ПустаяСсылка());
	
	//Текст сообщения, который будет выводиться пользователю
	Структура.Вставить("ТекстСообщения", "");
	Структура.Вставить("ЦветТекстаСообщения", "");
	
	//Описание текущего варианта инспектируемого элемента
	Структура.Вставить("ИнспектируемыйЭлемент", 						Справочники.ИнспектируемыеЭлементы.ПустаяСсылка());
	Структура.Вставить("ВариантИспользованияИнспектируемогоЭлемента", 	Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПустаяСсылка());
	Структура.Вставить("ПозицияA", 										Справочники.ВариантыПозицииA.ПустаяСсылка());
	Структура.Вставить("ПозицияB", 										Справочники.ВариантыПозицииB.ПустаяСсылка());
	Структура.Вставить("ПозицияC", 										Справочники.ВариантыПозицииC.ПустаяСсылка());
	
	//Изображение
	Структура.Вставить("ИзображениеСсылка", Справочники.ИзображенияДляВыбораИнспектируемогоЭлемента.ПустаяСсылка());
	Структура.Вставить("ИзображениеBase64", "");
	
	//Все изображения
	Структура.Вставить("ТаблицаВсехИзображений", Новый ТаблицаЗначений);
	
	//Области
	Структура.Вставить("Области", Новый ТаблицаЗначений);
	
	//Стили подсветки элементов интерфейса
	ЦветаИнтерфейса = Новый Структура;	
	ЦветаИнтерфейса.Вставить("СтатусОтключен", "styleNone");
	ЦветаИнтерфейса.Вставить("СтатусПусто", "styleDefault");
	ЦветаИнтерфейса.Вставить("СтатусУспех", "styleSuccess");
	ЦветаИнтерфейса.Вставить("СтатусОшибка", "styleDanger");
	ЦветаИнтерфейса.Вставить("СтатусПредупреждение", "styleWarning");
	ЦветаИнтерфейса.Вставить("СтатусОбновлен", "styleUpdate");
	ЦветаИнтерфейса.Вставить("СтатусСкрыт", "styleHidden");
	ЦветаИнтерфейса.Вставить("СтатусАктивен", "styleActive");
	ЦветаИнтерфейса.Вставить("ПроверкаОбязательна", "<span style='color: #ffb127;'>★</span>");
	Структура.Вставить("ЦветаИнтерфейса", ЦветаИнтерфейса);	
	
	Возврат Структура;
КонецФункции

//Основная функция этого интерфейса
Функция ИнтерфейPainter(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры)
	
	//Получаем заполненную структру
	Структура = ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры);
	
	//Получаем готовую HTML страницу по данным структуры
	HTMLPage = ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора);
	
	//Выкидываем её наружу
	Возврат HTMLPage;
	
КонецФункции

//Тут происходит основная работа алгоритма установки оборудования. Все данные пишем в структуру
Функция ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры)
	
	//Получаем основную структуру, в которой будут храниться все обработанные значения
	Структура = ПолучитьСтруктуруИнтерфейса();
	Структура.РабочееМестоОператора = РабочееМестоОператора;
	Структура.ТипЗапросаКСтранице = ВРег(ВходящиеПараметры.Получить("requestType"));
	УникальныйИдентификаторИзображения = ВходящиеПараметры.Получить("URLСоответствие").Получить("image");
	
	//Уникальный идентификатор изображения задан в URL
	Если ЗначениеЗаполнено(УникальныйИдентификаторИзображения) Тогда
		
		Структура.РежимРаботы = Структура.РежимыРаботы.ОдноИзображение;
		Структура.ИзображениеBase64 = HTMLПолучениеПолноэкранногоИзображения(Структура, УникальныйИдентификаторИзображения);		
		
		//Уникальный идентификатор задан, но изображение все равно не найдено
		Если Не ЗначениеЗаполнено(Структура.ИзображениеBase64) И Не ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Некорректная ссылка URL. Изображение не найдено. ", "URL broken. Image was not find. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Структура.Отказ = Истина;
		КонецЕсли;
		
	//Идентификатор даже не пытались передать, поэтому мы покажем список всех изображений в базе
	Иначе
		Структура.ТаблицаВсехИзображений = HTMLПолучитьВсеИзображения(Структура);
		Структура.РежимРаботы = Структура.РежимыРаботы.НесколькоИзображений;
	КонецЕсли;
	
	//Сохраняем координаты этой области
	Если Не Структура.Отказ И Структура.РежимРаботы = Структура.РежимыРаботы.ОдноИзображение И Структура.ТипЗапросаКСтранице = ВРег("sendCoordinates") Тогда		
		СохранитьКоординаты(Структура, ВходящиеПараметры);	
	КонецЕсли;
	
	//Получаем области для этого изображения
	Если Не Структура.Отказ Тогда
		Структура.Области = ПолучитьВсеОбластиДляЭтогоИзображения(Структура);
	КонецЕсли;
		
	Возврат Структура;
	
КонецФункции

//По данным структуры мы формируем HTML-страницу и возвращаем её наружу
Функция ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора)
	
	ПользовательскиеСкрипты = "";
		
	//Тело страницы
	HTMLPage = WebWorkstationОбщиеФункции.ПолучитьСтраницу(Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("HTML_MainBlock"), "PAINTER");
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "HTML_Inspector_Service", Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("HTML_Service").ПолучитьТекст());
	
	//Кнопка "Сменить рабочее место оператора"	
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НазваниеСтанции", Структура.РабочееМестоОператора);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеРеквизитаДоступныеСтанции", WebWorkstationОбщиеФункции.ПолучитьHTMLТаблицуДоступныхРабочихМестОператора(ТаблицаДоступныхРабочихМестОператора));
		
	//Вывод изображения	
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ИзображениеНаименование", Структура.ИзображениеСсылка);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ИзображениеСодержимое", Структура.ИзображениеBase64);
	
	//Может быть нам вообще ничего не нужно выводить
	Если Структура.Отказ Тогда
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#painterDivMainBodyBlock').addClass('styleHidden');";
	КонецЕсли;

	//Вывод списка областей
	Если Структура.РежимРаботы = Структура.РежимыРаботы.ОдноИзображение Тогда
		
		Для Каждого Область Из Структура.Области Цикл
			HTMLОбласть = Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("HTML_Area").ПолучитьТекст();
		
			HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "НаименованиеИнспекционногоЭлемента", Область.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.Владелец);
			
			//Если Область.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.Владелец.ПроверкаОбязательна Тогда
			Если Область.ПроверкаОбязательна Тогда
				
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "ПроверкаИнспекционногоЭлементаОбязательна", Структура.ЦветаИнтерфейса.ПроверкаОбязательна);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Область.ЗначениеВариантаПозицийA) Тогда
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "НаименованиеВариантаA", ОбработатьТекстСообщения("Позиция A: ", "Position A: "));
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "ЗначениеВариантаA", Область.ЗначениеВариантаПозицийA);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Область.ЗначениеВариантаПозицийB) Тогда
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "НаименованиеВариантаB", ОбработатьТекстСообщения("Позиция B: ", "Position B: "));
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "ЗначениеВариантаB", Область.ЗначениеВариантаПозицийB);
			КонецЕсли;
		
			Если ЗначениеЗаполнено(Область.ЗначениеВариантаПозицийC) Тогда
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "НаименованиеВариантаC", ОбработатьТекстСообщения("Позиция C: ", "Position C: "));
				HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "ЗначениеВариантаC", Область.ЗначениеВариантаПозицийC);	
			КонецЕсли;
			
			HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "ВариантИспользованияИнспектируемогоЭлементаНаИзображении", Область.ВариантИспользованияИнспектируемогоЭлементаНаИзображении);		
			HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "УникальныйИдентификатор", Область.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.УникальныйИдентификатор());	 
			HTMLОбласть = HTMLЗаполнитьЗначение(HTMLОбласть, "НастройкиРасположения", ?(ЗначениеЗаполнено(Область.ОписаниеРасположенияНаИзображении), Область.ОписаниеРасположенияНаИзображении, "[]"));	
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СписокОбъектов", HTMLОбласть, Истина);	
		КонецЦикла;
		
		//Областей нет
		Если Структура.Области.Количество() = 0 И ЗначениеЗаполнено(Структура.ИзображениеBase64) Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Не заданы инспектируемые элементы для разметки. ", "Inspection items does not set. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#painterDivObjectsBlock').addClass('styleHidden');";
		КонецЕсли;
		
	КонецЕсли;
	
	//А может быть нам вообще нужно вывести список всех изображений, которые только есть?
	Если Структура.РежимРаботы = Структура.РежимыРаботы.НесколькоИзображений Тогда
		
		Для Каждого Изображение Из Структура.ТаблицаВсехИзображений Цикл	
			
			СообщениеОРазмеченныхОбъектах = Строка(Изображение.КоличествоРазмеченных) + "/" + Строка(Изображение.КоличествоРазмеченных+Изображение.КоличествоНеразмеченных);
			СостояниеРазмеченныхОбъектов = Структура.ЦветаИнтерфейса.СтатусАктивен;
			Если Изображение.КоличествоРазмеченных < Изображение.КоличествоРазмеченных+Изображение.КоличествоНеразмеченных Тогда 
				СостояниеРазмеченныхОбъектов = Структура.ЦветаИнтерфейса.СтатусОшибка;
			КонецЕсли;
			
			HTMLБлокИзображения = Обработки.WEB_WORKSTATION_PAINTER.ПолучитьМакет("HTML_ImagesArrayList").ПолучитьТекст();
			HTMLБлокИзображения = HTMLЗаполнитьЗначение(HTMLБлокИзображения, "УникальныйИдентификаторИзображения", Изображение.УникальныйИдентификатор);
			HTMLБлокИзображения = HTMLЗаполнитьЗначение(HTMLБлокИзображения, "НаименованиеИзображения", Изображение.Наименование);
			HTMLБлокИзображения = HTMLЗаполнитьЗначение(HTMLБлокИзображения, "ИзображениеСодержимое", Изображение.ИзображениеBase64);			
			HTMLБлокИзображения = HTMLЗаполнитьЗначение(HTMLБлокИзображения, "СообщениеОРазмеченныхОбъектах", СообщениеОРазмеченныхОбъектах);
			HTMLБлокИзображения = HTMLЗаполнитьЗначение(HTMLБлокИзображения, "СостояниеРазмеченныхОбъектов", СостояниеРазмеченныхОбъектов);
			
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТаблицаВсехИзображений", HTMLБлокИзображения, Истина);			
		КонецЦикла;
			
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#painterDivAllImagesBlock').removeClass('styleHidden');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#painterDivMainBodyBlock').addClass('styleHidden');";
		
	КонецЕсли;
	
	//Текст сообщения
	Если ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда 
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюЦвет", Структура.ЦветТекстаСообщения);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюТекст", СтрЗаменить(Структура.ТекстСообщения, Символы.ПС, "<br>"));
	Иначе
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivMessageToUserBlock').addClass('styleHidden');";
	КонецЕсли;		
		
	//Добавляем пользовательские скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);

	Возврат HTMLPage;
	
КонецФункции


							//** Функции заполнения структуры этого интерфейса **//

//Определяем все области, которые надо будет отрисовывать
Функция ПолучитьВсеОбластиДляЭтогоИзображения(Структура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении КАК ВариантИспользованияИнспектируемогоЭлементаНаИзображении,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение КАК Изображение,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийA КАК ЗначениеВариантаПозицийA,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийB КАК ЗначениеВариантаПозицийB,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийC КАК ЗначениеВариантаПозицийC,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ОписаниеРасположенияНаИзображении КАК ОписаниеРасположенияНаИзображении,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ПроверкаОбязательна КАК ПроверкаОбязательна
		|ИЗ
		|	РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		|ГДЕ
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение = &Изображение";
	
	Запрос.УстановитьПараметр("Изображение", Структура.ИзображениеСсылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();	
	
	Возврат ТаблицаДетальныеЗаписи;
	
КонецФункции

//Сохраняем координаты в регистр сведений
Функция СохранитьКоординаты(Структура, ВходящиеПараметры)
	
	КоординатыСохранены = Ложь;
	
	//Определяем вариант использования инспектируемого элемента
	ВариантИспользованияИнспектируемогоЭлементаУникальныйИдентификатор = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidVariant");
	
	ВариантИспользованияИнспектируемогоЭлемента = Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВариантИспользованияИнспектируемогоЭлементаУникальныйИдентификатор) Тогда
		ВариантИспользованияИнспектируемогоЭлемента = Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПолучитьСсылку(Новый УникальныйИдентификатор(ВариантИспользованияИнспектируемогоЭлементаУникальныйИдентификатор));
	Иначе 
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не распознан вариант инспектируемого элемента. Повторите попытку. ", "Variant of inspection item was not recognized. Try again. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;

	//Определяем координаты
	Координаты = ВходящиеПараметры.Получить("JSONСоответствие").Получить("arrayCoordinates");
	Если Не ЗначениеЗаполнено(Координаты) Тогда 
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не распознаны координаты области. Повторите попытку. ", "Coordinates of inspection item was not recognized. Try again. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	//Сохраняем сжатое изображение
	СжатоеИзображение = ВходящиеПараметры.Получить("JSONСоответствие").Получить("compressedImage");
	Если ЗначениеЗаполнено(СжатоеИзображение) Тогда
		СохранитьСжатоеИзображение(Структура, СжатоеИзображение);
	КонецЕсли;
	
	//Сохраняем данные в регистр
	Если ЗначениеЗаполнено(ВариантИспользованияИнспектируемогоЭлемента) И ЗначениеЗаполнено(Координаты) Тогда
		
		НаборЗаписей = РегистрыСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.Установить(ВариантИспользованияИнспектируемогоЭлемента);
		НаборЗаписей.Отбор.Изображение.Установить(Структура.ИзображениеСсылка);
		НаборЗаписей.Прочитать();
		 
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		    ЗаписьНабора.ОписаниеРасположенияНаИзображении = Координаты;
		КонецЦикла;
		 
		Попытка 
			НаборЗаписей.Записать();
			КоординатыСохранены = Истина;
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Расположение инспектируемого элемента сохранено. ", "Position of inspection item was succesfully saved. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;
		Исключение
			КоординатыСохранены = Ложь;
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Во время записи расположения инспектируемого элемента произошла ошибка. ", "An error has occured during saving position of inspection item. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		КонецПопытки;
		
	КонецЕсли;	
	
	Возврат КоординатыСохранены;			
			
КонецФункции

//Сохранить сжатое изображение 
Функция СохранитьСжатоеИзображение(Структура, СжатоеИзображение)
	
	ИзображениеСохранено = Ложь;
	
	Попытка
		
		ПрисоединенныйОбъект = Структура.ИзображениеСсылка.Изображение.ПолучитьОбъект();
		ПрисоединенныйОбъект.СжатоеИзображениеBase64 = СжатоеИзображение;
		ПрисоединенныйОбъект.Записать();
		
		ИзображениеСохранено = Истина;
		
	Исключение
		
		ИзображениеСохранено = Ложь;
		
	КонецПопытки;
	
	Возврат ИзображениеСохранено;
	
КонецФункции

									//**	Функции работы с HTML	**//
									
//Заменить названия элементов на форме
Функция HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage)
	
	СтруктураНазванияЭлементов = Новый Структура();
	
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаЗаголовокСтанция",	НСтрMES("ru = 'Выберите рабочее место оператора'; en = 'Choose a working place of operator'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаВыход",			НСтрMES("ru = 'Выход'; en = 'Exit'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаЗакрыть",		НСтрMES("ru = 'Закрыть'; en = 'Close'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиРисовать",				НСтрMES("ru = 'Рисовать'; en = 'Draw'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиСжать",				НСтрMES("ru = 'Сжать'; en = 'Compress'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиПринять",				НСтрMES("ru = 'Принять'; en = 'Accept'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиОтменить",				НСтрMES("ru = 'Отменить'; en = 'Decline'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиОбновить",				НСтрMES("ru = 'Отменить'; en = 'Cancel'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеКнопкиСохранить",				НСтрMES("ru = 'Сохранить'; en = 'Save'"));
	
	Для Каждого НазваниеЭлемента Из СтруктураНазванияЭлементов Цикл
		HTMLPage = СтрЗаменить(HTMLPage, "<!--"+НазваниеЭлемента.Ключ+"-->", НазваниеЭлемента.Значение);
	КонецЦикла;
	
	Возврат HTMLPage;
	
КонецФункции

//Замена шаблонного значения в HTML строке
Функция HTMLЗаполнитьЗначение(HTMLPage, Шаблон, Значение, СохранитьШаблон = Ложь)
	
	Шаблон = "<!--"+Шаблон+"-->";
	
	Если Не СохранитьШаблон Тогда
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение));
	Иначе
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение)+Символы.ПС+Шаблон);
	КонецЕсли;
	
	Возврат HTMLPage;
	
КонецФункции

//Получаем настройки изображения
Функция HTMLПолучениеПолноэкранногоИзображения(Структура, УникальныйИдентификаторИзображения)
	
	ИзображениеBase64 = "";
	
	Попытка
		УникальныйИдентификаторИзображения = Новый УникальныйИдентификатор(УникальныйИдентификаторИзображения);
		ИзображениеДляВыбораИнспектируемогоЭлемента = Справочники.ИзображенияДляВыбораИнспектируемогоЭлемента.ПолучитьСсылку(УникальныйИдентификаторИзображения);
		ДвоичныеДанные = ИзображениеДляВыбораИнспектируемогоЭлемента.Изображение.ФайлХранилище.Получить();
		СтрокаBase64 = "data:image/png;base64,"+СтрЗаменить(Base64Строка(ДвоичныеДанные), Символ(13)+Символ(10), "");
		ИзображениеBase64 = СтрокаBase64;
		Структура.ИзображениеСсылка = ИзображениеДляВыбораИнспектируемогоЭлемента.Ссылка;
	Исключение
		ИзображениеBase64 = "";
	КонецПопытки;
	
	Возврат ИзображениеBase64;
	
КонецФункции

//Получаем все изображения
Функция HTMLПолучитьВсеИзображения(Структура)
	
	ТаблицаВсехИзображений = Новый ТаблицаЗначений;
	ТаблицаВсехИзображений.Колонки.Добавить("Наименование");
	ТаблицаВсехИзображений.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаВсехИзображений.Колонки.Добавить("ИзображениеBase64");
	ТаблицаВсехИзображений.Колонки.Добавить("КоличествоРазмеченных");
	ТаблицаВсехИзображений.Колонки.Добавить("КоличествоНеразмеченных");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение КАК Изображение,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ОписаниеРасположенияНаИзображении, 0, 2) = ""[]""
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Размечено
		|ИЗ
		|	РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		|ГДЕ
		|	НЕ ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение.ПометкаУдаления
		|ИТОГИ ПО
		|	ОБЩИЕ,
		|	Изображение";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ВыборкаОбщийИтог.Следующий();		
	ВыборкаИзображение = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаИзображение.Следующий() Цикл
		
		//Получаем изображение
		Попытка
			Если ЗначениеЗаполнено(ВыборкаИзображение.Изображение.Изображение.СжатоеИзображениеBase64) Тогда
				ИзображениеBase64 = ВыборкаИзображение.Изображение.Изображение.СжатоеИзображениеBase64;
			Иначе 
				ДвоичныеДанные = ВыборкаИзображение.Изображение.Изображение.ФайлХранилище.Получить();
				СтрокаBase64 = "data:image/png;base64,"+СтрЗаменить(Base64Строка(ДвоичныеДанные), Символ(13)+Символ(10), "");
				ИзображениеBase64 = СтрокаBase64;
			КонецЕсли;
		Исключение
			ИзображениеBase64 = "";
		КонецПопытки;		
		
		//Добавляем новую строку
		НоваяСтрока = ТаблицаВсехИзображений.Добавить();
		НоваяСтрока.Наименование = ВыборкаИзображение.Изображение.Наименование;
		НоваяСтрока.УникальныйИдентификатор = ВыборкаИзображение.Изображение.УникальныйИдентификатор();
		НоваяСтрока.ИзображениеBase64 = ИзображениеBase64;
		НоваяСтрока.КоличествоРазмеченных = 0;
		НоваяСтрока.КоличествоНеразмеченных = 0;
		
		ВыборкаДетальныеЗаписи = ВыборкаИзображение.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Размечено Тогда
				НоваяСтрока.КоличествоРазмеченных = НоваяСтрока.КоличествоРазмеченных + 1;
			Иначе 
				НоваяСтрока.КоличествоНеразмеченных = НоваяСтрока.КоличествоНеразмеченных + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВсехИзображений;
	
КонецФункции

Функция HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ)
	
	Шаблон = НастройкаОбмена.ПутьКФайламПриложения;
	Если ПустаяСтрока(Шаблон) Тогда
		//Подменяем html страницу на страницу с ошибкой и возвращаем ее
		ТекстСообщения = НСтрMES("ru='В настройках обмена не заполнен ПутьКФайламПриложения""';en='There is empty ПутьКФайламПриложения in exchange""'")+НСтрMES("ru='""Пожалуйста, обратитесь к консультантам.';en='"" wasn''t assigned any working place. Please, contact your consultants.'");
		HTMLPage = WebWorkstationОбщиеФункции.СгенерироватьСтраницуСОшибкой(ТекстСообщения, ВходящиеПараметры, Отказ);
		Возврат HTMLPage;
	КонецЕсли;
	
	HTMLPage = СтрЗаменить(HTMLPage, "<!--ПутьКФайлам-->", Шаблон);
	
	Возврат HTMLPage;
	
КонецФункции
