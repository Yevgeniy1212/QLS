
Функция ПолучитьОписаниеОбработкиОбмена() Экспорт
	
	// полный состав параметров описания смотри в этой функции
	СтруктураНастроек = Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	СтруктураНастроек.ТекстовоеОписаниеОбмена = ОбработатьТекстСообщения("Рабочее место Inspector. Открытие консёрнов и некомплектов, просмотр дефектов, кампаний и редких опций.", "Inspector workstation. Opening concerns and shortages, viewing defects, campaigns and rare options. ");
	СтруктураНастроек.ВидОбмена = Перечисления.ВидыОбмена.Двунаправленный;
	СтруктураНастроек.XML_НастройкаОбязательна = Истина;
	СтруктураНастроек.ДляМножественныхОбменов = Истина;
	СтруктураНастроек.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host;
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ФильтрПоРабочимМестам");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ГруппаНастройкиАвторизацииНаВебИнтерфейсе");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ЯзыкИнтерфейса");
	СтруктураНастроек.ВидимыеДополнительныеЭлементыФормы.Добавить("ПутьКФайламПриложения");

	
	Возврат СтруктураНастроек;
КонецФункции 

Функция ВыполнитьОбмен(Событие, НастройкаОбмена, ВходящиеПараметры) Экспорт
	
	Отказ = Ложь;
	
	//Определение переменных
	HTMLPage = "";
	ПользовательскиеСкрипты = "";
	РабочееМестоОператора = Справочники.РабочиеМестаОператоров.ПустаяСсылка();
	ТаблицаДоступныхРабочихМестОператора = Новый ТаблицаЗначений;
	
	//Определение языка интерфейса
	Если ЗначениеЗаполнено(НастройкаОбмена.ЯзыкИнтерфейса) Тогда
		ПараметрыСеанса.КодТекущегоЯзыка = НастройкаОбмена.ЯзыкИнтерфейса;
	КонецЕсли;
	
	//Если произошёл вызов с этим типом, то мы игнорируем весь основной алгоритм для увеличения скорости работы запроса
	Если ВРег(ВходящиеПараметры.Получить("requestType")) = ВРег("contextNomenclatureList") Тогда
		Возврат ОпределитьНоменклатуру(ВходящиеПараметры);
	ИначеЕсли ВРег(ВходящиеПараметры.Получить("requestType")) = ВРег("getOriginalImage") Тогда
		Возврат ПолучитьОригинальноеИзображение(ВходящиеПараметры);
	КонецЕсли;
	
	//Определение пользователя и хранение его в параметрах сеанса
	HTMLPage = WebWorkstationОбщиеФункции.ВыполнитьАутентификациюПользователя(НастройкаОбмена, ВходящиеПараметры, Отказ, ПользовательскиеСкрипты);
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	//Получить рабочее место оператора
	Если Не Отказ Тогда
		ТаблицаДоступныхРабочихМестОператора = WebWorkstationОбщиеФункции.ПолучитьТаблицуДоступныхРабочихМестОператора(Пользователь, НастройкаОбмена.Ссылка);
		HTMLPage = WebWorkstationОбщиеФункции.ВыбратьРабочееМестоОператора(ТаблицаДоступныхРабочихМестОператора, РабочееМестоОператора, ВходящиеПараметры, Отказ);
	КонецЕсли;
	
	//Вывод интерфейса
	Если Не Отказ Тогда
		HTMLPage = ИнтерфейсInspector(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры);
	КонецЕсли;
	
	//Эти переменные должны храниться на странице, даже если мы не вывели страницу самого интерфейса
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionGuid-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionGuid"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeUserSessionBeginningDate-->", ВходящиеПараметры.Получить("JSONСоответствие").Получить("allAttributeUserSessionBeginningDate"));
	HTMLPage = СтрЗаменить(HTMLPage, "<!--allAttributeCurrentWorkstationGuid-->", РабочееМестоОператора.УникальныйИдентификатор());	
	
	//Стили и скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*СтилиСтраницы*/", "/*СтилиСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("Styles_Inspector").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*СкриптыСтраницы*/", "/*СкриптыСтраницы*/" + Символы.ПС + Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("Scripts_Inspector").ПолучитьТекст());
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);
	
	//Добавляем иконку в заголовок страницы	
	HTMLPage = СтрЗаменить(HTMLPage, "#allPictureHeaderIcon", "/images/icon-inspector.png");
	
	//Добавить наименования элементов управления
	HTMLPage = HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage);
	
	//Изменим путь к файлам js, css и тд, чтобы их веб-сайт подтягивал не по hs из 1с, а брал из каталога
	HTMLPage = HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ);

	
	//Сохраняем последнее состояние станции сканирования
	РегистрыСведений.ПоследнееСостояниеСтанцииСканирования.ЗаписатьТекстСостояния(РабочееМестоОператора, HTMLPage);
	
	Возврат HTMLPage;	
	
КонецФункции

Функция ПолучитьСтруктуруИнтерфейса()
	
	//В этом модуле мы будем оперировать структурой
	Структура = Новый Структура;
	Структура.Вставить("Отказ", Ложь);
	
	//Тип вывода: скрипт или целиком сформированная страница
	ДинамическийСкрипт = Новый Структура;
	ДинамическийСкрипт.Вставить("ВыполнитьСкрипт", Ложь);
	ДинамическийСкрипт.Вставить("ВывестиСообщение", Ложь);
	ДинамическийСкрипт.Вставить("ОбновитьТаблицы", Ложь);
	ДинамическийСкрипт.Вставить("НичегоНеДелать", Ложь);
	Структура.Вставить("ДинамическийСкрипт", ДинамическийСкрипт);
	
	//Тип запроса
	Структура.Вставить("ТипЗапросаКСтранице", "");
	
	//Наше текущее рабочее место
	Структура.Вставить("РабочееМестоОператора", Справочники.РабочиеМестаОператоров.ПустаяСсылка());
	
	//Всё вертится вокруг заказа
	Структура.Вставить("ТолькоЧтение", Неопределено);
	Структура.Вставить("ЗаказСсылка", Справочники.Заказы.ПустаяСсылка());
	Структура.Вставить("ЗаказУникальныйИдентификатор", Неопределено);
	Структура.Вставить("ЗаказСтатус", "");
	
	//Контроли
	Структура.Вставить("КонтрольПрохожденияОбязательныхТочек", Истина);
	Структура.Вставить("КонтрольНаличияОткрытыхКонсернов", Истина);
	Структура.Вставить("КонтрольНаличияКампаний", Истина);
	Структура.Вставить("КонтрольКомплектность", Истина);
	
	//Предыдущий и последущий заказы
	СтруктураВыборСледующегоЗаказаИзОчереди = Новый Структура;	
	СтруктураВыборСледующегоЗаказаИзОчереди.Вставить("ПредыдущийЗаказ", Справочники.Заказы.ПустаяСсылка());
	СтруктураВыборСледующегоЗаказаИзОчереди.Вставить("ПредыдущийЗаказУникальныйИдентификатор", Неопределено);
	СтруктураВыборСледующегоЗаказаИзОчереди.Вставить("СледующийЗаказ", Справочники.Заказы.ПустаяСсылка());
	СтруктураВыборСледующегоЗаказаИзОчереди.Вставить("СледующийЗаказУникальныйИдентификатор", Неопределено);
	Структура.Вставить("СтруктураВыборСледующегоЗаказаИзОчереди", СтруктураВыборСледующегоЗаказаИзОчереди);
	
	//Способ получения заказа на станции
	СпособыВыбораЗаказаНаСтанции = Новый Структура;
	СпособыВыбораЗаказаНаСтанции.Вставить("ИспользоватьСканирование", "ИспользоватьСканирование");
	//СпособыВыбораЗаказаНаСтанции.Вставить("ИспользоватьRFID", "ИспользоватьRFID");
	СпособыВыбораЗаказаНаСтанции.Вставить("ИспользоватьОчередь", "ИспользоватьОчередь");
	Структура.Вставить("СпособыВыбораЗаказаНаСтанции", СпособыВыбораЗаказаНаСтанции);
	Структура.Вставить("ТекущийСпособВыбораЗаказаНаСтанции", СпособыВыбораЗаказаНаСтанции.ИспользоватьСканирование);
	
	//Новый способ получения заказа
	//Структура.Вставить("GUIDСканированиеRFID", "");	
	//Структура.Вставить("ПривязанныйСканерRFID", Справочники.СканерыRFID.ПустаяСсылка());	
	//Структура.Вставить("СканированиеRFIDВыполнено", Ложь);		
	
	//Значение, отсканированное в поле ввода
	Структура.Вставить("ОтсканированноеЗначение", "");
	Структура.Вставить("ПредыдущийЗаказОтсканированНеПолностью", Ложь);
		
	//Текст сообщения, который будет выводиться пользователю
	Структура.Вставить("ТекстСообщения", "");
	Структура.Вставить("ЦветТекстаСообщения", "");
	
	//Редкие опции
	Структура.Вставить("РедкиеОпцииСтатус", Ложь);
	Структура.Вставить("РедкиеОпции", Новый ТаблицаЗначений);
	
	//Кампании
	Структура.Вставить("КампанииСтатус", Ложь);
	Структура.Вставить("Кампании", Новый ТаблицаЗначений);
	
	//Дефекты
	Структура.Вставить("ДефектыСтатус", Ложь);
	Структура.Вставить("Дефекты", Новый ТаблицаЗначений);
	
	//Некомплект
	Структура.Вставить("НекомплектСтатус", Ложь);
	Структура.Вставить("Некомплект", Новый ТаблицаЗначений);
	
	//Контроль
	Структура.Вставить("КонтрольСтатус", Ложь);
	Структура.Вставить("Контроль", Новый ТаблицаЗначений);
	
	//Точки проверки качества
	Структура.Вставить("ТочкаПроверкиКачества", Справочники.ТочкиПроверкиКачества.ПустаяСсылка());	
	Структура.Вставить("ПоказыватьВсеИнспектируемыеЭлементы", Ложь);
	
	//Инспектируемые элементы
	Структура.Вставить("ТаблицаИнспектируемыхЭлементов", Новый ТаблицаЗначений);
	Структура.Вставить("ТаблицаИзображенийИнспектируемыхЭлементов", Новый ТаблицаЗначений);	
	Структура.Вставить("ТаблицаИнспектируемыхЭлементовИзображений", Новый ТаблицаЗначений);
	
	//Позиции А
	Структура.Вставить("ВыборкаПозицийA", Справочники.ВариантыПозицииA.Выбрать());
	
	//Позиции В
	Структура.Вставить("ВыборкаПозицийB", Справочники.ВариантыПозицииB.Выбрать());
	
	//Позиции С
	Структура.Вставить("ВыборкаПозицийC", Справочники.ВариантыПозицииC.Выбрать());
	
	//Дерево дефектов
	Структура.Вставить("ДеревоДефектов", Неопределено);
	Структура.Вставить("ДефектыПоИЭ", Неопределено);
	
	//Стоимость консернов
	Структура.Вставить("ВыборкаСтоимостьКонсерна", Справочники.СтоимостьКонсернов.Выбрать(,,,"Наименование Возр"));
	
	//Ответственные за дефект
	Структура.Вставить("ВыборкаОтветственныеЗаДефект", Справочники.ОтветственныйЗаДефект.Выбрать(,,,"Наименование Возр"));


	
	//Отсканированное значение	
	СтруктураРаспознанияЗначения = Новый Структура;
	СтруктураРаспознанияЗначения.Вставить("Заказ", Справочники.Заказы.ПустаяСсылка());
	СтруктураРаспознанияЗначения.Вставить("ЗначениеРаспознано", Ложь);	
	Структура.Вставить("СтруктураРаспознанияЗначения", СтруктураРаспознанияЗначения);
	Структура.Вставить("ОтсканированноеЗначение", "");
	
	//Значения с формы, необходимые для создания документа
	СтруктураПараметровСозданияДокументов = Новый Структура;
	СтруктураПараметровСозданияДокументов.Вставить("ИнспектируемыйЭлемент", 						Справочники.ИнспектируемыеЭлементы.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ВариантИспользованияИнспектируемогоЭлемента", 	Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ПозицияA", 										Справочники.ВариантыПозицииA.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ПозицияB", 										Справочники.ВариантыПозицииB.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ПозицияC", 										Справочники.ВариантыПозицииC.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("Дефект", 										Справочники.Дефекты.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ТипДефекта", 									Справочники.ТипыДефектов.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("Отремонтирован", 								Ложь);
	СтруктураПараметровСозданияДокументов.Вставить("Комментарий", 									"");
	СтруктураПараметровСозданияДокументов.Вставить("ТипОперации", 									"");
	СтруктураПараметровСозданияДокументов.Вставить("Номенклатура", 									Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("Количество", 									0);
	СтруктураПараметровСозданияДокументов.Вставить("ОперацияПоКачеству", 							Документы.ОперацияПоКачеству.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("ОтветственныйЗаДефект", 						Справочники.ОтветственныйЗаДефект.ПустаяСсылка());
	СтруктураПараметровСозданияДокументов.Вставить("СтоимостьКонсерна", 							Справочники.СтоимостьКонсернов.ПустаяСсылка());
	
	Структура.Вставить("СтруктураПараметровСозданияДокументов", СтруктураПараметровСозданияДокументов);
	
	//Стили подсветки элементов интерфейса
	ЦветаИнтерфейса = Новый Структура;	
	ЦветаИнтерфейса.Вставить("СтатусОтключен", "styleNone");
	ЦветаИнтерфейса.Вставить("СтатусПусто", "styleDefault");
	ЦветаИнтерфейса.Вставить("СтатусУспех", "styleSuccess");
	ЦветаИнтерфейса.Вставить("СтатусОшибка", "styleDanger");
	ЦветаИнтерфейса.Вставить("СтатусПредупреждение", "styleWarning");
	ЦветаИнтерфейса.Вставить("СтатусОбновлен", "styleUpdate");
	ЦветаИнтерфейса.Вставить("СтатусСкрыт", "styleHidden");
	ЦветаИнтерфейса.Вставить("ПроверкаОбязательна", "<span style='color: #ffb127;'>★</span>");
	Структура.Вставить("ЦветаИнтерфейса", ЦветаИнтерфейса);	
	
	Возврат Структура;
КонецФункции

//Основная функция этого интерфейса
Функция ИнтерфейсInspector(Событие, НастройкаОбмена, Пользователь, РабочееМестоОператора, ТаблицаДоступныхРабочихМестОператора, ВходящиеПараметры)
	
	//Получаем заполненную структру
	Структура = ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры);
	
	//Получаем готовую HTML страницу по данным структуры
	HTMLPage = ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора);
	
	//Выкидываем её наружу
	Возврат HTMLPage;
	
КонецФункции

//Тут происходит основная работа алгоритма установки оборудования. Все данные пишем в структуру
Функция ЗаполнитьСтруктуру(Событие, РабочееМестоОператора, ВходящиеПараметры)
	
	//Получаем основную структуру, в которой будут храниться все обработанные значения
	Структура = ПолучитьСтруктуруИнтерфейса();
	Структура.РабочееМестоОператора = РабочееМестоОператора;
	Структура.ОтсканированноеЗначение = ВходящиеПараметры.Получить("JSONСоответствие").Получить("newScanningValue");
	Структура.ТипЗапросаКСтранице = ВРег(ВходящиеПараметры.Получить("requestType"));
	Структура.ТочкаПроверкиКачества = РабочееМестоОператора.ТочкаПроверкиКачества;
	Структура.ПоказыватьВсеИнспектируемыеЭлементы = РабочееМестоОператора.ТочкаПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы;
		
	//Тип запроса
	Если Не ЗначениеЗаполнено(Структура.ТипЗапросаКСтранице) Тогда
		Структура.ТипЗапросаКСтранице = ВходящиеПараметры.Получить("requestMethod");
	КонецЕсли;
	
	//Каким способом будем получать заказ?
	ВыборСледующегоЗаказаИзОчереди = Структура.ТочкаПроверкиКачества.СпособИдентификацииЗаказа = Перечисления.СпособыИдентификацииЗаказа.ВыборСледующегоЗаказаИзОчереди;
	Если ВыборСледующегоЗаказаИзОчереди Тогда
		Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьОчередь;
		Заказ = РегистрыСведений.ТекущийЗаказНаСтанции.ПолучитьТекущийЗаказ(Структура.РабочееМестоОператора, Истина);
		ЗаказыУдалосьОпределить = ОпределитьЗаказыВСоответствииСОчередью(Структура, Заказ, Структура.ТочкаПроверкиКачества.ТочкаРегистрацииДляОпределенияСледующегоЗаказа);
		Если Не ЗаказыУдалосьОпределить Тогда
			Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьСканирование;
		КонецЕсли;
	КонецЕсли;	

	//Можем получить заказ от сканера RFID
	//Если Структура.РабочееМестоОператора.ИспользоватьСканерRFID Тогда
	//	Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьRFID;
	//	Структура.ПривязанныйСканерRFID = Структура.РабочееМестоОператора.ПривязанныйСканерRFID;
	//	Структура.GUIDСканированиеRFID = Новый УникальныйИдентификатор;
	//КонецЕсли;
	
	//Продолжаем сканирование с текущего места
	Если Не Структура.ТочкаПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы Тогда
		Заказ = РегистрыСведений.ТекущийЗаказНаСтанции.ПолучитьТекущийЗаказ(Структура.РабочееМестоОператора, Ложь);
		Если ЗначениеЗаполнено(Заказ) Тогда			
			Структура.ЗаказСсылка = Заказ;
			Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
			Структура.ПредыдущийЗаказОтсканированНеПолностью = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Получаем дерево дефектов
	СтруктураДефектов = ОпределитьТипыДефектов(Структура.ТочкаПроверкиКачества);
	Структура.ДеревоДефектов = СтруктураДефектов.ВыборкаДефектов;
	Структура.ДефектыПоИЭ = СтруктураДефектов.ВыборкаДефектыПоИнспектируемымЭлементам;
	
	//Получаем текущий заказ, если он есть
	ТекущийВинУникальныйИдентификаторСтрока = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidCurrentVIN");
	Если ЗначениеЗаполнено(ТекущийВинУникальныйИдентификаторСтрока) Тогда
		Заказ = ОпеределитьЗаказ(ТекущийВинУникальныйИдентификаторСтрока, "", Структура.РабочееМестоОператора);
		Если ЗначениеЗаполнено(Заказ) Тогда
			Структура.ЗаказСсылка = Заказ;
			Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	//Значения. Распознаём отсканированное значение, если оно было
	Если Структура.ТипЗапросаКСтранице = ВРег("newScanningEvent") Тогда		
		Если ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
			Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected. ");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Иначе
				Структура.СтруктураРаспознанияЗначения = РаспознатьОтсканированноеЗначение(Событие, Структура);
			КонецЕсли;
		КонецЕсли;		
	//Значения. Решили перейти к предыдущему вину
	ИначеЕсли Структура.ТипЗапросаКСтранице = ВРег("getPreviousVIN") Тогда
		
		ПредыдущийВинУникальныйИдентификаторСтрока = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidPreviousVIN");
		
		Если ЗначениеЗаполнено(ПредыдущийВинУникальныйИдентификаторСтрока) Тогда
			Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected. ");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Иначе				
				Заказ = ОпеределитьЗаказ(ПредыдущийВинУникальныйИдентификаторСтрока, "", Структура.РабочееМестоОператора);
				Если ЗначениеЗаполнено(Заказ) Тогда
					Структура.ЗаказСсылка = Заказ;
					Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
					ОпределитьЗаказыВСоответствииСОчередью(Структура, Заказ, Структура.ТочкаПроверкиКачества.ТочкаРегистрацииДляОпределенияСледующегоЗаказа)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	//Значения. Решили перейти к следующему вину
	ИначеЕсли Структура.ТипЗапросаКСтранице = ВРег("getNextVIN") Тогда
		
		ПредыдущийВинУникальныйИдентификаторСтрока = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidNextVIN");
		
		Если ЗначениеЗаполнено(ПредыдущийВинУникальныйИдентификаторСтрока) Тогда
			Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected.");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Иначе				
				Заказ = ОпеределитьЗаказ(ПредыдущийВинУникальныйИдентификаторСтрока, "", Структура.РабочееМестоОператора);
				Если ЗначениеЗаполнено(Заказ) Тогда
					Структура.ЗаказСсылка = Заказ;
					Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
					ОпределитьЗаказыВСоответствииСОчередью(Структура, Заказ, Структура.ТочкаПроверкиКачества.ТочкаРегистрацииДляОпределенияСледующегоЗаказа)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	 //Сохранить идентификатор вызова сканера RFID
	//ИначеЕсли НРег(ВходящиеПараметры.Получить("requestType")) = НРег("saveCurrentRFIDGuid") Тогда		
	//	
	//	СохранитьИдентификаторСканированияRFIDМетки(Структура.РабочееМестоОператора, ВходящиеПараметры);		
	//	Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
	//	Структура.ДинамическийСкрипт.НичегоНеДелать = Истина;
	//	Возврат Структура;
		
	//ИначеЕсли Структура.ТипЗапросаКСтранице = ВРег("getNextVINFromRFID") Тогда
	//	
	//	//Получаем последнее состояние сканера RFID
	//	Структура.ОтсканированноеЗначение = РегистрыСведений.СтатусыСканеровRFID.ПолучитьПоследнююЗаписьСоСканераRFID(Структура.ПривязанныйСканерRFID);
	//	
	//	//Данных пока нет? Тогда выходим отсюда
	//	Если Не ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
	//		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
	//		Структура.ДинамическийСкрипт.НичегоНеДелать = Истина;
	//		Возврат Структура;
	//	КонецЕсли;
	//	
	//	//Если значение распознано, то работаем с ним, как с обычным отсканированным значением
	//	Если ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда
	//		Если Структура.ПредыдущийЗаказОтсканированНеПолностью Тогда
	//			Структура.ТекстСообщения = ОбработатьТекстСообщения("Заказ "+Структура.ЗаказСсылка+" проверен не полностью. ", "Vehicle "+Структура.ЗаказСсылка+" is not fully inspected. ");
	//			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	//			Структура.СканированиеRFIDВыполнено = Истина;
	//		Иначе
	//			Структура.СтруктураРаспознанияЗначения = РаспознатьОтсканированноеЗначение(Событие, Структура, Истина);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	КонецЕсли;
	
	//Контроль. Проверка прохождения обязательных точек качества
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) И Структура.ТочкаПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек Тогда		
		ТекстСообщения = "";
		Структура.КонтрольПрохожденияОбязательныхТочек = QNS.ОбязательныеТочкиПройдены(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества, ТекстСообщения);
		Если Не Структура.КонтрольПрохожденияОбязательныхТочек Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("У заказа "+Структура.ЗаказСсылка+ " остались непройденные точки: " + Символы.ПС + ТекстСообщения, "This vehicle "+Структура.ЗаказСсылка+ " didn't pass these stations: : " + Символы.ПС + ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			
			//Структура.ЗаказСсылка = Справочники.Заказы.ПустаяСсылка();
			Структура.ЗаказУникальныйИдентификатор = Неопределено;
			
			Структура.Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Структура.ТочкаПроверкиКачества.КонтролироватьНаличиеОткрытыхКонсернов Тогда
		КонтрольОткрытыхКонсерновПройден = Истина;
		Разделитель = ОбработатьТекстСообщения(" Требуется устранить следующие дефекты: ", " You need to fix these defects: ");
		ТекстСообщения = "";
		Если Структура.ТочкаПроверкиКачества.КонтролироватьСледующиеДефекты Тогда
			МассивДефектов = Структура.ТочкаПроверкиКачества.КонтролируемыеДефекты.Выгрузить().ВыгрузитьКолонку("Дефект");		
			КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , МассивДефектов, Ложь);
		Иначе			
			КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , , Ложь);		
		КонецЕсли;
		
		Если Не КонтрольОткрытыхКонсерновПройден Тогда 
			Структура.ТекстСообщения = ОбработатьТекстСообщения("У заказа "+ Структура.ЗаказСсылка + Разделитель + Символы.ПС + ТекстСообщения, "This vehicle "+ Структура.ЗаказСсылка + Разделитель + Символы.ПС + ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Структура.ЗаказУникальныйИдентификатор = Неопределено;
			Структура.Отказ = Истина;
		КонецЕсли;	
		
		Структура.КонтрольНаличияОткрытыхКонсернов = КонтрольОткрытыхКонсерновПройден;
	КонецЕсли;

	//Контроль Требуется закрыть кампании
	Разделитель = ОбработатьТекстСообщения("Требуется закрыть следующие кампании: ", "You need to close these compaigns: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьНаличиеКампаний Тогда
		КонтрольОткрытыхКампанийПройден = Не QNS.КонтрольНаличияКампаний(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества.КонтролируемыеТипыКампании.Выгрузить().ВыгрузитьКолонку("ТипКампании"),Структура.ТочкаПроверкиКачества.КонтролируемыеКампании.Выгрузить().ВыгрузитьКолонку("Кампания"), ТекстСообщения);
		Если Не КонтрольОткрытыхКампанийПройден Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("У заказа "+ Структура.ЗаказСсылка + Разделитель + Символы.ПС + ТекстСообщения, "This vehicle "+ Структура.ЗаказСсылка + Разделитель + Символы.ПС + ТекстСообщения);;
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Структура.ЗаказУникальныйИдентификатор = Неопределено;
			Структура.Отказ = Истина;
		КонецЕсли; 
		
		Структура.КонтрольНаличияКампаний = КонтрольОткрытыхКонсерновПройден;
	КонецЕсли;	
	
	//Документы. Создаём новый документ контроля качества
	Если Не Структура.Отказ И Структура.ТипЗапросаКСтранице = ВРег("createQualityDocument") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		ДокументСоздан = СоздатьДокументОперацииПоКачествуПроверка(Структура);
		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
		Структура.ДинамическийСкрипт.ВывестиСообщение = Истина;
		Если ДокументСоздан Тогда
			Структура.ДинамическийСкрипт.ОбновитьТаблицы = Истина;
		КонецЕсли;
	//Документы. Создаём новый документ контроля качества
	ИначеЕсли Не Структура.Отказ И Структура.ТипЗапросаКСтранице = ВРег("createControlDocument") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		ДокументСоздан = СоздатьДокументОперацииПоКачествуКонтроль(Структура);
		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
		Структура.ДинамическийСкрипт.ВывестиСообщение = Истина;
		Если ДокументСоздан Тогда
			Структура.ДинамическийСкрипт.ОбновитьТаблицы = Истина;
		КонецЕсли;	
	//Документы. Или же это документ некомплекта
	ИначеЕсли Не Структура.Отказ И Структура.ТипЗапросаКСтранице = ВРег("createNotFullComplectDocument") Тогда
		Структура.СтруктураПараметровСозданияДокументов = РаспознатьПереданныеДанныеСФормы(Структура, ВходящиеПараметры.Получить("JSONСоответствие"));
		ДокументСоздан = СоздатьДокументОперацииПоНекомплекту(Структура);		
		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
		Структура.ДинамическийСкрипт.ВывестиСообщение = Истина;
		Если ДокументСоздан Тогда
			Структура.ДинамическийСкрипт.ОбновитьТаблицы = Истина;
		КонецЕсли;
	КонецЕсли;	
			
	//Если заказ пуст, просим отсканировать его
	Если Не Структура.Отказ И Не ЗначениеЗаполнено(Структура.ЗаказСсылка) И Не ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда
		Если Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьОчередь Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Выберите VIN. ", "Select VIN. ");
		Иначе
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Отсканируйте VIN. ", "Scan VIN. ");
		КонецЕсли;
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;		
	КонецЕсли;
	
	//Определение инспектируемых элементов
	Если Не Структура.Отказ И Не ЗначениеЗаполнено(Структура.ТаблицаИнспектируемыхЭлементов) Тогда	
		Структура.ТаблицаИнспектируемыхЭлементов = ОпределитьИнспектируемыеЭлементы(РабочееМестоОператора.ТочкаПроверкиКачества, Структура.ЗаказСсылка);
	КонецЕсли;
	
	//Получаем картинки для этого рабочего места
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) И Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаПоКартинке Тогда		
		Структура.ТаблицаИзображенийИнспектируемыхЭлементов = ПолучитьИзображенияЭтойТочкиПроверкиКачества(Структура.ТочкаПроверкиКачества);
		Структура.ТаблицаИнспектируемыхЭлементовИзображений = ОпределитьИнспектируемыеЭлементыИзображений(Структура.ТочкаПроверкиКачества, Структура.ЗаказСсылка);
	КонецЕсли;
	
	//Сообщить о том, что инспектировать не по чему
	Если Не Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаИзСписка И Не Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаПоКартинке Тогда 
		Структура.ТекстСообщения = ОбработатьТекстСообщения("В точке проверке качества """+Структура.ТочкаПроверкиКачества+""" не выбран способ открытия консерна. ", "Quality control station have not any method of defect opening. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
	
	//Определение редких опций
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.РедкиеОпции = ОпределитьРедкиеОпции(Структура.ЗаказСсылка, Структура.РедкиеОпцииСтатус, Структура.ТочкаПроверкиКачества.РедкиеОпции.Выгрузить().ВыгрузитьКолонку("РедкаяОпция"));				
	КонецЕсли;
	
	//Определение кампаний
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Кампании = ОпределитьКампании(Структура.ЗаказСсылка, Структура.КампанииСтатус);				
	КонецЕсли;
	
	//Определение дефектов
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Дефекты = ОпределитьДефекты(Структура.ЗаказСсылка, Структура.ДефектыСтатус, Структура.ТочкаПроверкиКачества);				
	КонецЕсли;
	
	//Определение некомплектов
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.Некомплект = ОпределитьНекомплекты(Структура.ЗаказСсылка, Структура.НекомплектСтатус);				
	КонецЕсли;
	
	//Определение контролей
	//Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
	//	Структура.Контроль = ОпределитьОтремонтированныеДеталиДляПоследующегоКонтроля(Структура.ЗаказСсылка, Структура.КонтрольСтатус);				
	//КонецЕсли;
	
	//Создание итогового документа
	Если Не Структура.Отказ И Структура.ТипЗапросаКСтранице = ВРег("completeInspection") Тогда
		ДокументСоздан = СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(Структура);
		Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Истина;
		Структура.ДинамическийСкрипт.ВывестиСообщение = Истина;
		Если ДокументСоздан Тогда
			Структура.ДинамическийСкрипт.ВыполнитьСкрипт = Ложь;
		КонецЕсли;
	КонецЕсли;	
		
	//Пишем статус сканирования текущего заказа
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда
		ЗаказПроверенПолностью = Истина;
		
		Для Каждого СтатусИнспектируемогоЭлемента Из Структура.ТаблицаИнспектируемыхЭлементов Цикл
			Если СтатусИнспектируемогоЭлемента.ПроверкаОбязательна И СтатусИнспектируемогоЭлемента.Статус = 0 Тогда
				ЗаказПроверенПолностью = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		РегистрыСведений.ТекущийЗаказНаСтанции.СохранитьСостояниеЗаказа(Структура.РабочееМестоОператора, Структура.ЗаказСсылка, ЗаказПроверенПолностью);
	КонецЕсли;	
	
	//Если инспекция завершена, то запрещаем любые интерактивные действия
	Если Не Структура.Отказ И ЗначениеЗаполнено(Структура.ЗаказСсылка) И Не ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда		
		Структура.ТолькоЧтение = ОпределитьСостояниеИнспектирования(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества);
		Если Структура.ТолькоЧтение = Истина Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Этот автомобиль уже проинспектирован.", "This vehicle has already been inspected. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;
		КонецЕсли;
	КонецЕсли;
	
	//Пишем в журнал сканирования
	Если ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда
		УровеньСобытия = Перечисления.СОЛЛЕРС_УровниСобытия.Информация;
		Если Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка Тогда
			УровеньСобытия = Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка;
		КонецЕсли;		
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, УровеньСобытия, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата()); 					
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

//По данным структуры мы формируем HTML-страницу и возвращаем её наружу
Функция ЗаполнитьHTMLСтраницу(Структура, ТаблицаДоступныхРабочихМестОператора)
	
	ПользовательскиеСкрипты = "";
	
	//Если нам требуется выполнить скрипт, то дальше по алгоритму не идём
	Если Структура.ДинамическийСкрипт.ВыполнитьСкрипт Тогда 
		
		ТекстСкрипта = "";
		
		Если Структура.ДинамическийСкрипт.ВывестиСообщение Тогда
			ТекстСкрипта = ТекстСкрипта + "
			|	$('#inspectorDivMessageToUserBlock').removeClass();
			|	$('#inspectorSpanMessageToUserCaption').removeClass();
			|	$('#inspectorSpanMessageToUserCaption').addClass('"+Структура.ЦветТекстаСообщения+"');
			|	$('#inspectorSpanMessageToUserCaption').html('"+СтрЗаменить(СтрЗаменить(Структура.ТекстСообщения, Символы.ПС, "<br>"), "'", "\'")+"');
			|	";
			
		КонецЕсли;
		
		Если Структура.ДинамическийСкрипт.ОбновитьТаблицы Тогда
			ТекстСкрипта = ТекстСкрипта + HTMLОбновитьИнформациюНаСтранице(Структура);
		КонецЕсли;
		
		Если Структура.ДинамическийСкрипт.НичегоНеДелать Тогда
			ТекстСкрипта = ТекстСкрипта + "var none = null;";
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ТекстСкрипта) Тогда
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, Символы.ПС, "");			
			Возврат ТекстСкрипта;
		КонецЕсли;
		
	КонецЕсли;
	
	//Тело страницы
	HTMLPage = WebWorkstationОбщиеФункции.ПолучитьСтраницу(Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_MainBlock"), Структура.РабочееМестоОператора);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "HTML_Inspector_Service", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_Service").ПолучитьТекст());
	
	//Подключаем функционал некомплектов
	Если Константы.ИспользоватьНекомплекты.Получить() Тогда
		HTMLPage = СтрЗаменить(HTMLPage, "<!--htmlBodyНекомплект-->", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_BodyНекомплекта").ПолучитьТекст());
	КонецЕсли;
	
	//Подключаем функционал кампаний
	Если Константы.ИспользоватьКампании.Получить() Тогда
		HTMLPage = СтрЗаменить(HTMLPage, "<!--htmlBodyКампании-->", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_Кампании").ПолучитьТекст());
	КонецЕсли;
	
	//Подключаем функционал кампаний
	Если Константы.ИспользоватьРедкиеОпции.Получить() Тогда
		HTMLPage = СтрЗаменить(HTMLPage, "<!--htmlBodyРедкиеОпции-->", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_РедкиеОпции").ПолучитьТекст());
	КонецЕсли;

	
	//Надо ли скрывать поле сканирования вина и отображать кнопки выбора вина с линии
	Если Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьОчередь Тогда		
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СпособИдентификацииЗаказа", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ПеремещениеМеждуЗаказамиНаТочке").ПолучитьТекст());
	//ИначеЕсли Структура.ТекущийСпособВыбораЗаказаНаСтанции = Структура.СпособыВыбораЗаказаНаСтанции.ИспользоватьRFID Тогда
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СпособИдентификацииЗаказа", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_КнопкаПолученияЗаказаОтRFID").ПолучитьТекст());
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDSessionGUID", 	Структура.GUIDСканированиеRFID);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDAction",		Структура.ПривязанныйСканерRFID.Action);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDURL", 			Структура.ПривязанныйСканерRFID.URL);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDSOAPAction",	Структура.ПривязанныйСканерRFID.SOAPAction);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDNamespace", 	Структура.ПривязанныйСканерRFID.Namespace);
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDDebugMode", 	?(Структура.ПривязанныйСканерRFID.DebugMode, "True", "False"));
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDIdentity", 	Структура.ПривязанныйСканерRFID.ИдентификаторНетиповогоОбмена);		
	//	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorAttributeRFIDEnabled", Структура.РабочееМестоОператора.ИспользоватьСканерRFID);				
	//	ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "clearTimeout(timerIdCurrentVINFromRFID); timerIdCurrentVINFromRFID = 0;";
	Иначе 
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СпособИдентификацииЗаказа", Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ПолеСканирования").ПолучитьТекст());
	КонецЕсли;
	
	//Кнопка "Сменить рабочее место оператора"	
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НазваниеСтанции", Структура.РабочееМестоОператора);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеРеквизитаДоступныеСтанции", WebWorkstationОбщиеФункции.ПолучитьHTMLТаблицуДоступныхРабочихМестОператора(ТаблицаДоступныхРабочихМестОператора));
	
	//Заполняем страницу данными о заказе
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказСсылка", Структура.ЗаказСсылка);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "КороткийЗаказ", Прав(Структура.ЗаказСсылка, 7));
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказУникальныйИдентификатор", Структура.ЗаказУникальныйИдентификатор);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ЗаказСтатус", Структура.ЗаказСтатус);
		
	//Заполнение данных о предыдущем заказе
	Если ЗначениеЗаполнено(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказ) Тогда
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеПредыдущегоВина", Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказ);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "КороткоеНаименованиеПредыдущегоВина", Прав(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказ, 7));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "УникальныйИдентификаторПредыдущегоВина", Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказУникальныйИдентификатор);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorButtonGetPreviousVIN", "");
	Иначе
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorButtonGetPreviousVIN", "disabled");
	КонецЕсли;
	
	//Заполнение данных о следующем заказе
	Если ЗначениеЗаполнено(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказ) Тогда
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеСледующегоВина", Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказ);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "КороткоеНаименованиеСледующегоВина", Прав(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказ, 7));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "УникальныйИдентификаторСледующегоВина", Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказУникальныйИдентификатор);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorButtonGetNextVIN", "");
	Иначе
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorButtonGetNextVIN", "disabled");
	КонецЕсли;
	
	//Если это сканирование RFID и значение уже получено, то отключаем автоматическое получение винов
	//Если Структура.СканированиеRFIDВыполнено Тогда
	//	ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "clearTimeout(timerIdCurrentVINFromRFID); timerIdCurrentVINFromRFID = 0;";		
	//КонецЕсли;
	
	//Заглушка на тот случай, если вин не отсканирован
	Если Структура.Отказ Или Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivMainBodyBlock", "inspectorDivWhiteBlock");
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorButtonMainScanningFieldContent').text('Нажмите для получения VIN');";
	КонецЕсли;
	
	//Если инспекция завершена, то запрещаем любые интерактивные действия 
	Если Структура.ТолькоЧтение = Истина Тогда
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivInspectionItemNamesMainBlock').remove();";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivInspectionItemInput').remove();";	
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorButtonComplete').removeClass('btn-primary');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorButtonComplete').addClass('btn-default');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorButtonComplete').addClass('disabled');";
	КонецЕсли;
	
	//Текст сообщения
	Если ЗначениеЗаполнено(Структура.ТекстСообщения) Тогда 
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюЦвет", Структура.ЦветТекстаСообщения);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "СообщениеПользователюТекст", СтрЗаменить(Структура.ТекстСообщения, Символы.ПС, "<br>"));
	Иначе
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivMessageToUserBlock').addClass('styleHidden');";
	КонецЕсли;		
	
	//Наименования инспектируемых элементов и изображения с кучей инспектируемых элементов
	Если Структура.ТипЗапросаКСтранице <> ВРег("createQualityDocument") И Структура.ТипЗапросаКСтранице <> ВРег("createNotFullComplectDocument") И Структура.ТипЗапросаКСтранице <> ВРег("completeInspection") Тогда		
		
		//Отрисовка блоков-инспектируемых элементов
		Если Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаИзСписка Тогда
			
			HTMLТекст = "";
			ПервыйНепроверенныйЭлемент = Ложь;
			
			HTMLМакет = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ВкладкаЗаголовок").ПолучитьТекст();		
			Для Каждого Элемент Из Структура.ТаблицаИнспектируемыхЭлементов Цикл
				HTMLТекст = HTMLТекст + Символы.ПС + HTMLЗаголовокКнопкиТекущегоИнспекционногоЭлемента(Структура, HTMLМакет, Элемент, ПервыйНепроверенныйЭлемент, ПользовательскиеСкрипты);			
			КонецЦикла;
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаЗаголовок", HTMLТекст, Истина);			
		КонецЕсли;
		
		//Изображения инспектируемых элементов
		Если Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаПоКартинке Тогда
			Если ЗначениеЗаполнено(Структура.ТаблицаИзображенийИнспектируемыхЭлементов) Тогда						
				HTMLМакет = HTMLНастройкиОткрытияДефектаПоИзображению(Структура);
				HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "Изображение", HTMLМакет, Истина);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Скрыть текстовые блоки, если есть изображение
	Если ЗначениеЗаполнено(Структура.ТаблицаИзображенийИнспектируемыхЭлементов) Тогда
		HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ИзображениеСодержимое").ПолучитьТекст();
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
	КонецЕсли;
	
	//Сообщить о том, что инспектировать не по чему
	Если Не Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаИзСписка И Не Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаПоКартинке Тогда 
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivInspectionItemNamesMainBlock').remove();";		
	КонецЕсли;
	
	//Вкладки-содержимое точек контроля качества
	HTMLТекст = HTMLЗаданиеДефектаИнспекционногоЭлемента(Структура);
	HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
	
	АктивнаяВкладкаВыбрана = Ложь;
	
	//Дополнительные характеристики заказа. Контроль
	Если Структура.ТочкаПроверкиКачества.АктивироватьВкладкуКонтроль Тогда		
		
		ИдентификаторХарактеристики = "Control";
		Заголовок = ОбработатьТекстСообщения("Контроль", "Control");
		
		HTMLТекст = HTMLВкладкаПроверитьОтремонтированныеДетали(ИдентификаторХарактеристики, Заголовок, Структура.Контроль);		
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиДефектУспешноУстранен", ОбработатьТекстСообщения("OK", "OK"));
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиДефектНеБылУстранен", ОбработатьТекстСообщения("NOK", "NOK"));
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиКонтроль", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиКонтроль", ИдентификаторХарактеристики);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.КонтрольСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockControl", "btn-warning styleOpacity", Истина);
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockControl", "btn-success styleOpacity", Истина);
		КонецЕсли;
		
		Если Не АктивнаяВкладкаВыбрана Тогда						
			АктивнаяВкладкаВыбрана = Истина;
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivCheckSubBlockControl').addClass('active');";
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivVINAdditionalInformationControl').removeClass('styleHidden');";
			Если ЗначениеЗаполнено(Структура.Контроль) Тогда
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivControlContent').removeClass('styleHidden');";
			КонецЕсли;
		КонецЕсли;

	Иначе
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockControl').addClass('styleHidden');";
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Дефекты
	Если Истина Тогда		
		
		ИдентификаторХарактеристики = "Defects";		
		Заголовок = ОбработатьТекстСообщения("Дефекты", ИдентификаторХарактеристики);		
		HTMLТекст = HTMLДополнительнаяХарактеристикаЗаказа(ИдентификаторХарактеристики, Заголовок, Структура.Дефекты);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиДефекты", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ИдентификаторХарактеристикиДефекты", ИдентификаторХарактеристики);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.ДефектыСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockDefects", "btn-danger styleOpacity", Истина);
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockDefects", "btn-success styleOpacity", Истина);
		КонецЕсли;
		
		Если Не АктивнаяВкладкаВыбрана Тогда			
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivVINAdditionalInformationDefects').removeClass('styleHidden');";			
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivCheckSubBlockDefects').addClass('active');";
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivInspectionItemNamesMainBlock').removeClass('styleHidden');";		
			АктивнаяВкладкаВыбрана = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Редкие опции
	Если Истина И Константы.ИспользоватьРедкиеОпции.Получить() Тогда		
		
		ИдентификаторХарактеристики = "RareOptions";
		Заголовок = ОбработатьТекстСообщения("Редкие опции", "Rare options");	
		HTMLТекст = HTMLДополнительнаяХарактеристикаЗаказа(ИдентификаторХарактеристики, Заголовок, Структура.РедкиеОпции);		
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиРедкиеОпции", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиРедкиеОпции", ИдентификаторХарактеристики);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.РедкиеОпцииСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockRareOptions", "btn-warning styleOpacity", Истина);
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockRareOptions", "btn-success styleOpacity", Истина);
		КонецЕсли;
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Кампании
	Если Истина и Константы.ИспользоватьКампании.Получить()Тогда		
		
		ИдентификаторХарактеристики = "Campaigns";
		Заголовок = ОбработатьТекстСообщения("Кампании", "Campaigns");		
		HTMLТекст = HTMLДополнительнаяХарактеристикаЗаказа(ИдентификаторХарактеристики, Заголовок, Структура.Кампании);		
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиКампании", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиКампании", ИдентификаторХарактеристики);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.КампанииСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockCampaign", "btn-warning styleOpacity", Истина);
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockCampaign", "btn-success styleOpacity", Истина);
		КонецЕсли;
	КонецЕсли;
	
	//Дополнительные характеристики заказа. Некомплекты
	Если Истина и Константы.ИспользоватьНекомплекты.Получить() Тогда		
		
		ИдентификаторХарактеристики = "Shortages";
		Заголовок = ОбработатьТекстСообщения("Некомплект", "Shortages");	
		HTMLТекст = HTMLВкладкаНекоплект(ИдентификаторХарактеристики, Заголовок, Структура.Некомплект);		
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НаименованиеВкладкиНекомплект", Заголовок);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "НомерВкладкиНекомплект", ИдентификаторХарактеристики);
		HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "ТочкаКонтроляКачестваВкладкаСодержимое", HTMLТекст, Истина);
		
		Если Структура.НекомплектСтатус Тогда
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockShortage", "btn-warning styleOpacity", Истина);
		Иначе
			HTMLPage = HTMLЗаполнитьЗначение(HTMLPage, "inspectorDivCheckSubBlockShortage", "btn-success styleOpacity", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	//Добавляем пользовательские скрипты
	HTMLPage = СтрЗаменить(HTMLPage, "/*ПользовательскиеСкрипты*/", "/*ПользовательскиеСкрипты*/" + Символы.ПС + ПользовательскиеСкрипты);

	Возврат HTMLPage;
	
КонецФункции


							//** Функции заполнения структуры этого интерфейса **//

//Определяем данные с формы
Функция РаспознатьПереданныеДанныеСФормы(Структура, JSONСоответствие)
	
	СтруктураПараметровСозданияДокументов = Структура.СтруктураПараметровСозданияДокументов;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivInspectionItemTitle")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivInspectionItemTitle"));
		СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент = Справочники.ИнспектируемыеЭлементы.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivInspectionItemPosition")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivInspectionItemPosition"));
		СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента = Справочники.ВариантыИспользованияИнспектируемыхЭлементов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivFilterBlockPositionA")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivFilterBlockPositionA"));
		СтруктураПараметровСозданияДокументов.ПозицияA = Справочники.ВариантыПозицииA.ПолучитьСсылку(УникальныйИдентификатор);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivFilterBlockPositionB")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivFilterBlockPositionB"));
		СтруктураПараметровСозданияДокументов.ПозицияB = Справочники.ВариантыПозицииB.ПолучитьСсылку(УникальныйИдентификатор);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivFilterBlockPositionC")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivFilterBlockPositionC"));
		СтруктураПараметровСозданияДокументов.ПозицияC = Справочники.ВариантыПозицииC.ПолучитьСсылку(УникальныйИдентификатор);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorInputValueOfConcern")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorInputValueOfConcern"));
		СтруктураПараметровСозданияДокументов.СтоимостьКонсерна = Справочники.СтоимостьКонсернов.ПолучитьСсылку(УникальныйИдентификатор);//РегистрыСведений.СтоимостиКонсерна.ПолучитьСтоимостьПоУИД(УникальныйИдентификатор);		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorInputResponsibleForDefect")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorInputResponsibleForDefect"));
		СтруктураПараметровСозданияДокументов.ОтветственныйЗаДефект = Справочники.ОтветственныйЗаДефект.ПолучитьСсылку(УникальныйИдентификатор);		
	КонецЕсли;

	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivInspectionItemDetailsDefectsBlock")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivInspectionItemDetailsDefectsBlock"));
		СтруктураПараметровСозданияДокументов.Дефект = Справочники.Дефекты.ПолучитьСсылку(УникальныйИдентификатор);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivInspectionItemDetailsTypeDefectsBlock")) Тогда		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorDivInspectionItemDetailsTypeDefectsBlock"));
		СтруктураПараметровСозданияДокументов.ТипДефекта = Справочники.ТипыДефектов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorDivInspectionItemDetailsRepairBlock")) Тогда
		СтруктураПараметровСозданияДокументов.Отремонтирован = JSONСоответствие.Получить("inspectorDivInspectionItemDetailsRepairBlock");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorInputComment")) Тогда
		Комментарий = JSONСоответствие.Получить("inspectorInputComment");           
		СтруктураПараметровСозданияДокументов.Комментарий = УбратьСимволыИзКомментария(Комментарий);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("qualityOperationType")) Тогда
		СтруктураПараметровСозданияДокументов.ТипОперации = JSONСоответствие.Получить("qualityOperationType");		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorInputNotFullComplectGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("inspectorInputNotFullComplectGUID"));
		СтруктураПараметровСозданияДокументов.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("inspectorInputNotFullComplectCount")) Тогда
		 СтруктураПараметровСозданияДокументов.Количество = JSONСоответствие.Получить("inspectorInputNotFullComplectCount");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(JSONСоответствие.Получить("qualityOperationConcernGUID")) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(JSONСоответствие.Получить("qualityOperationConcernGUID"));
		СтруктураПараметровСозданияДокументов.ОперацияПоКачеству = Документы.ОперацияПоКачеству.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СтруктураПараметровСозданияДокументов;
	
КонецФункции

//Пытаемся понять, что отсканировали в поле ввода
Функция РаспознатьОтсканированноеЗначение(Событие, Структура, ЗначениеПолученоСоСканераRFID = Ложь)
	
	//Точно есть что распознавать?
	ПродолжитьРаспознавание = Истина;
	Если Не ЗначениеЗаполнено(Структура.ОтсканированноеЗначение) Тогда				
		ПродолжитьРаспознавание = Ложь;
	КонецЕсли;
	
	//Сюда может быть передано последнее значение со сканера RFID
	Если ПродолжитьРаспознавание И ЗначениеПолученоСоСканераRFID Тогда
		Структура.ОтсканированноеЗначение = Обработки.ЗагрузкаMES_FROM_RFID_READERS.РаспознатьЗначениеПолученноеСоСканераRFID_ПоискVIN(Структура.ОтсканированноеЗначение);
	КонецЕсли;
		
	//Проверяем, не заказ ли это
	Если ПродолжитьРаспознавание Тогда
		
		Заказ = ОпеределитьЗаказ("", СокрЛП(Структура.ОтсканированноеЗначение), Структура.РабочееМестоОператора);
		Если ЗначениеЗаполнено(Заказ) Тогда			
			ПродолжитьРаспознавание = Ложь;
			Структура.ЗаказСсылка = Заказ;
			Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
			Структура.СтруктураРаспознанияЗначения.Заказ = Заказ;
			//Структура.СканированиеRFIDВыполнено = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Мы так и не поняли, что это было отсканировано
	Если ПродолжитьРаспознавание Тогда
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Значение '"+Структура.ОтсканированноеЗначение+"' не распознано. ", "Value '"+Структура.ОтсканированноеЗначение+"' was not recognized. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		//Структура.СканированиеRFIDВыполнено = Истина;
	КонецЕсли;
	
	//Сохраняем статус этого сканирования
	Структура.СтруктураРаспознанияЗначения.ЗначениеРаспознано = Не ПродолжитьРаспознавание;
	
	Если ПродолжитьРаспознавание Тогда //Поняли, что сканировали
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата());
	Иначе //Не поняли, что сканировали
		WebWorkstationОбщиеФункции.ЗаписатьВЖурналСканирования(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Информация, Структура.ОтсканированноеЗначение, Структура.ЗаказСсылка, Структура.ТекстСообщения, Структура.РабочееМестоОператора, ТекущаяДата());
	КонецЕсли;
	
	Возврат Структура.СтруктураРаспознанияЗначения;
	
КонецФункции

//Если в отсканированном значении был передан VIN длиной 7, 8, 17 символов, мы его находим и возвращаем обратно заказ
Функция ОпеределитьЗаказ(УникальныйИдентификаторСтрока, ОтсканированноеЗначение, РабочееМестоОператора)
	
	Заказ = Справочники.Заказы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(УникальныйИдентификаторСтрока) Тогда

		УникальныйИдентификатор = Новый УникальныйИдентификатор(СокрЛП(УникальныйИдентификаторСтрока));
		
		//Заказ должен был найтись по этому уникальному идентификатору
		Заказ = Справочники.Заказы.ПолучитьСсылку(УникальныйИдентификатор);
		Если Заказ.ПолучитьОбъект() = Неопределено Тогда
			Заказ = Справочники.Заказы.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ОтсканированноеЗначение) Тогда
		
		//Определение возможных вариантов реквизитов для сканирования
		СообщениеОшибки = "";
		СписокРеквизитовКонтрольныхМеток = Производство.ОпределитьСканируемыеРеквизиты(РабочееМестоОператора);
	 	ФорматПодходит = Производство.ПроверитьФорматЗначенияКонтрольнойМеткиПоСпискуКонтрольныхМеток(СписокРеквизитовКонтрольныхМеток, ВРег(ОтсканированноеЗначение), СообщениеОшибки);					
		Если ФорматПодходит Тогда
			Заказ = Производство.ОпределитьЗаказПоСпискуКонтрольныхМеток(СписокРеквизитовКонтрольныхМеток, ОтсканированноеЗначение, Ложь);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Заказ;
	
КонецФункции

//Определить дефекты и типы дефектов
Функция ОпределитьТипыДефектов(ТочкаПроверкиКачества)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиПроверкиКачества.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты,
		|	ЕСТЬNULL(ТочкиПроверкиКачестваДефекты.ИнспектируемыйЭлемент, ЗНАЧЕНИЕ(Справочник.ИнспектируемыеЭлементы.ПустаяСсылка)) КАК ИнспектируемыйЭлемент,
		|	ЕСТЬNULL(ТочкиПроверкиКачестваДефекты.Дефект, ЗНАЧЕНИЕ(Справочник.Дефекты.ПустаяСсылка)) КАК Дефект
		|ПОМЕСТИТЬ ДефектыТочки
		|ИЗ
		|	Справочник.ТочкиПроверкиКачества КАК ТочкиПроверкиКачества
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТочкиПроверкиКачества.Дефекты КАК ТочкиПроверкиКачестваДефекты
		|		ПО ТочкиПроверкиКачества.Ссылка = ТочкиПроверкиКачестваДефекты.Ссылка
		|ГДЕ
		|	ТочкиПроверкиКачества.Ссылка = &ТочкаПроверкиКачества
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДефектыТочки.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты,
		|	ДефектыТочки.Дефект КАК Дефект,
		|	ДефектыТочки.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
		|ПОМЕСТИТЬ ИтоговаяВыборкаДефектов
		|ИЗ
		|	ДефектыТочки КАК ДефектыТочки
		|ГДЕ
		|	НЕ ДефектыТочки.ПоказыватьВсеДефекты
		|	И НЕ ДефектыТочки.Дефект.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказатьВсеДефекты.ПоказыватьВсеДефекты,
		|	Дефекты.Ссылка,
		|	NULL
		|ИЗ
		|	Справочник.Дефекты КАК Дефекты,
		|	ДефектыТочки КАК ПоказатьВсеДефекты
		|ГДЕ
		|	ПоказатьВсеДефекты.ПоказыватьВсеДефекты
		|	И НЕ Дефекты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИтоговаяВыборкаДефектов.Дефект КАК Дефект,
		|	ТипыДефектов.Ссылка КАК ТипДефекта
		|ИЗ
		|	ИтоговаяВыборкаДефектов КАК ИтоговаяВыборкаДефектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыДефектов КАК ТипыДефектов
		|		ПО ИтоговаяВыборкаДефектов.Дефект = ТипыДефектов.Владелец
		|			И (НЕ ТипыДефектов.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИтоговаяВыборкаДефектов.Дефект.Наименование
		|ИТОГИ ПО
		|	Дефект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИтоговаяВыборкаДефектов.ПоказыватьВсеДефекты КАК ПоказыватьВсеДефекты,
		|	ИтоговаяВыборкаДефектов.Дефект КАК Дефект,
		|	ИтоговаяВыборкаДефектов.Дефект.Код КАК ДефектКод,
		|	ИтоговаяВыборкаДефектов.Дефект.Наименование КАК ДефектНаименование,
		|	ИтоговаяВыборкаДефектов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
		|ИЗ
		|	ИтоговаяВыборкаДефектов КАК ИтоговаяВыборкаДефектов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИтоговаяВыборкаДефектов.Дефект.Наименование
		|ИТОГИ
		|	МАКСИМУМ(ДефектКод),
		|	МАКСИМУМ(ДефектНаименование)
		|ПО
		|	ПоказыватьВсеДефекты,
		|	Дефект";
	
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДефектов = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДефектыПоИнспектируемымЭлементам = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Новый Структура("ВыборкаДефектов, ВыборкаДефектыПоИнспектируемымЭлементам", ВыборкаДефектов, ВыборкаДефектыПоИнспектируемымЭлементам);

КонецФункции

//Определение инспектируемых элементов и их статусов для этого заказа. 0 - Не сканировался; 1 - ОК; 2 - Отремонтирован; 3 - Открыт дефект;
Функция ОпределитьИнспектируемыеЭлементы(ТочкаПроверкиКачества, Заказ)
	
	Если Не ТочкаПроверкиКачества.ПоказыватьВсеИнспектируемыеЭлементы Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка КАК ТочкаПроверкиКачества,
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.НомерСтроки КАК НомерСтроки,
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
			|	&Заказ КАК Заказ,
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ПроверкаОбязательна КАК ПроверкаОбязательна
			|ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
			|ИЗ
			|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
			|ГДЕ
			|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонсерныОстатки.Заказ КАК Заказ,
			|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
			|	КонсерныОстатки.Консерн.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
			|	3 КАК Статус
			|ПОМЕСТИТЬ СостояниеИнспектируемыхЭлементовЗаказа
			|ИЗ
			|	РегистрНакопления.Консерны.Остатки КАК КонсерныОстатки
			|ГДЕ
			|	КонсерныОстатки.Заказ = &Заказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ,
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент,
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества,
			|	ВЫБОР
			|		КОГДА НЕ УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Ремонт
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних(
			|			,
			|			Заказ = &Заказ
			|				И Выполнена
			|				И ИнспектируемыйЭлемент В
			|					(ВЫБРАТЬ
			|						ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент
			|					ИЗ
			|						ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
			|					ГДЕ
			|						ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна)) КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
			|	ТаблицаИнспектируемыхЭлементов.НомерСтроки КАК НомерСтроки,
			|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
			|	ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
			|	ТаблицаИнспектируемыхЭлементов.Заказ КАК Заказ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус ЕСТЬ НЕ NULL 
			|				ТОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Статус,
			|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна КАК ПроверкаОбязательна
			|ИЗ
			|	ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
			|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеИнспектируемыхЭлементовЗаказа КАК СостояниеИнспектируемыхЭлементовЗаказа
			|		ПО ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества = СостояниеИнспектируемыхЭлементовЗаказа.ТочкаПроверкиКачества
			|			И ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент = СостояниеИнспектируемыхЭлементовЗаказа.ИнспектируемыйЭлемент
			|			И ТаблицаИнспектируемыхЭлементов.Заказ = СостояниеИнспектируемыхЭлементовЗаказа.Заказ
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент,
			|	ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента,
			|	ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества,
			|	ТаблицаИнспектируемыхЭлементов.Заказ,
			|	ТаблицаИнспектируемыхЭлементов.НомерСтроки,
			|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна УБЫВ,
			|	НомерСтроки";
	
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	&Заказ,
			|	ИнспектируемыеЭлементы.Ссылка КАК ИнспектируемыйЭлемент
			|ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
			|ИЗ
			|	Справочник.ИнспектируемыеЭлементы КАК ИнспектируемыеЭлементы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонсерныОстатки.Заказ,
			|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
			|	КонсерныОстатки.Консерн.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
			|	3 КАК Статус
			|ПОМЕСТИТЬ СостояниеИнспектируемыхЭлементовЗаказа
			|ИЗ
			|	РегистрНакопления.Консерны.Остатки КАК КонсерныОстатки
			|ГДЕ
			|	КонсерныОстатки.Заказ = &Заказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ,
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент,
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества,
			|	ВЫБОР
			|		КОГДА НЕ УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Ремонт
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
			|ГДЕ
			|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ = &Заказ
			|	И УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Выполнена
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
			|	ТаблицаИнспектируемыхЭлементов.Заказ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус ЕСТЬ НЕ NULL 
			|				ТОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Статус,
			|	0 КАК НомерСтроки,
			|	ЛОЖЬ КАК ПроверкаОбязательна
			|ИЗ
			|	ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
			|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеИнспектируемыхЭлементовЗаказа КАК СостояниеИнспектируемыхЭлементовЗаказа
			|		ПО ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент = СостояниеИнспектируемыхЭлементовЗаказа.ИнспектируемыйЭлемент
			|			И ТаблицаИнспектируемыхЭлементов.Заказ = СостояниеИнспектируемыхЭлементовЗаказа.Заказ
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент,
			|	ТаблицаИнспектируемыхЭлементов.Заказ
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент.ПроверкаОбязательна УБЫВ,
			|	ИнспектируемыйЭлемент";
		
		Запрос.УстановитьПараметр("Заказ", Заказ);
		РезультатЗапроса = Запрос.Выполнить();	
		ТаблицаИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();

	
	КонецЕсли;

	Возврат ТаблицаИнспектируемыхЭлементов;
	
КонецФункции

//Определение редких опций на этом заказе
Функция ОпределитьРедкиеОпции(Заказ, ЕстьРедкаяОпция, МассивРедкихОпций)
		
	РедкиеОпции = Новый ТаблицаЗначений;
	РедкиеОпции.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("СправочникСсылка.РедкиеОпции"), 	ОбработатьТекстСообщения("Редкая опция", "Rare options"));	
	РедкиеОпции.Колонки.Добавить("Колонка2", 	Новый ОписаниеТипов("Строка"), 							ОбработатьТекстСообщения("Статус", "Status"));
	
	Для Каждого РедкаяОпция Из МассивРедкихОпций Цикл
		
		Если QNS.КонтрольРедкихОпций(Заказ, РедкаяОпция.ФормулаОпределенияПринадлежностиОпцииЗаказу) = Истина Тогда
			ЕстьРедкаяОпция = Истина;
			СтатусТекст = ОбработатьТекстСообщения("Устанавливается", "Install");
		Иначе
			СтатусТекст = ОбработатьТекстСообщения("Не устанавливается", "Not install");
		КонецЕсли;
		
		НоваяСтрока = РедкиеОпции.Добавить();
		НоваяСтрока.Колонка1 = РедкаяОпция;
		НоваяСтрока.Колонка2 = СтатусТекст;
	КонецЦикла;
	
	Возврат РедкиеОпции;
	
КонецФункции

//Определение состояния инспектирования
Функция ОпределитьСостояниеИнспектирования(Заказ, ТочкаПроверкиКачества)
	
	ИнспекцияВыполнена = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества,
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Выполнена
		|ИЗ
		|	РегистрСведений.ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочек.СрезПоследних КАК ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних
		|ГДЕ
		|	ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.Заказ = &Заказ
		|	И ФактРегистрацииЗаказаДляКонтроляПрохожденияОбязательныхТочекСрезПоследних.ТочкаПроверкиКачества = &ТочкаПроверкиКачества";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИнспекцияВыполнена = ВыборкаДетальныеЗаписи.Выполнена; 
	КонецЦикла;
	
	Возврат ИнспекцияВыполнена;
	
КонецФункции

//Определение кампаний
Функция ОпределитьКампании(Заказ, ЕстьКампания)
		
	Кампании = Новый ТаблицаЗначений;
	Кампании.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("СправочникСсылка.Кампании"),	ОбработатьТекстСообщения("Кампания", "Campaign"));	
	Кампании.Колонки.Добавить("Колонка2", 	Новый ОписаниеТипов("Строка"), 						ОбработатьТекстСообщения("Статус", "Status"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КампанииОстатки.Заказ,
		|	КампанииОстатки.Кампания,
		|	КампанииОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Кампании.Остатки(, Заказ = &Заказ) КАК КампанииОстатки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытаяКампания Из ТаблицаДетальныеЗаписи Цикл
		НоваяСтрока = Кампании.Добавить();
		НоваяСтрока.Колонка1 = ОткрытаяКампания.Кампания;
		НоваяСтрока.Колонка2 = ОбработатьТекстСообщения("Открыта", "Open");		
		ЕстьКампания = Истина;
	КонецЦикла;
	
	Возврат Кампании;
	
КонецФункции

//Определение дефектов
Функция ОпределитьДефекты(Заказ, ЕстьОткрытыйДефект, ТочкаПроверкиКачества)
		
	Дефекты = Новый ТаблицаЗначений;
	Дефекты.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("СправочникСсылка.ИнспектируемыеЭлементы"),	ОбработатьТекстСообщения("Деталь", "Equipment"));
	Дефекты.Колонки.Добавить("Колонка2", 	Новый ОписаниеТипов("СправочникСсылка.Дефекты"),				ОбработатьТекстСообщения("Дефект", "Defect"));
	Дефекты.Колонки.Добавить("Колонка3", 	Новый ОписаниеТипов("Строка"),									ОбработатьТекстСообщения("Статус", "Status"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсерныОбороты.Консерн,
		|	КонсерныОбороты.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
		|	КонсерныОбороты.Консерн.Дефект КАК Дефект,
		|	КонсерныОбороты.Заказ,
		|	ВЫБОР
		|		КОГДА КонсерныОбороты.КоличествоПриход - КонсерныОбороты.КоличествоРасход = 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДефектОткрыт
		|ИЗ
		|	РегистрНакопления.Консерны.Обороты(, , , Заказ = &Заказ) КАК КонсерныОбороты";

	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытыеКонсёрны Из ТаблицаДетальныеЗаписи Цикл

		Если ОткрытыеКонсёрны.ДефектОткрыт = Истина Тогда
			СтатусТекст = ОбработатьТекстСообщения("Открыт", "Opened");
			ЕстьОткрытыйДефект = Истина;
		Иначе
			СтатусТекст = ОбработатьТекстСообщения("Закрыт", "Closed");
		КонецЕсли;
		
		НоваяСтрока = Дефекты.Добавить();
		НоваяСтрока.Колонка1 = ОткрытыеКонсёрны.ИнспектируемыйЭлемент;
		НоваяСтрока.Колонка2 = ОткрытыеКонсёрны.Дефект;
		НоваяСтрока.Колонка3 = СтатусТекст;
		
	КонецЦикла;
	
	Возврат Дефекты;
	
КонецФункции

//Определение некомплектов
Функция ОпределитьНекомплекты(Заказ, ЕстьНекомплект)
	
	Некомплекты = Новый ТаблицаЗначений;
	Некомплекты.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("Строка"),							ОбработатьТекстСообщения("Номенклатура", "Nomenclature"));
	Некомплекты.Колонки.Добавить("Колонка2", 	Новый ОписаниеТипов("Строка"),							ОбработатьТекстСообщения("Партномер", "Partnumber"));
	Некомплекты.Колонки.Добавить("Колонка3", 	Новый ОписаниеТипов("Число"),							ОбработатьТекстСообщения("Количество", "Count"));
	                                                                                                                
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НекомплектыОстатки.Заказ,
		|	НекомплектыОстатки.Номенклатура,
		|	НекомплектыОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Некомплекты.Остатки(, Заказ = &Заказ) КАК НекомплектыОстатки";

	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для Каждого ОткрытыеНекомплекты Из ТаблицаДетальныеЗаписи Цикл
		
		НоваяСтрока = Некомплекты.Добавить();
		НоваяСтрока.Колонка1 = ОткрытыеНекомплекты.Номенклатура.Наименование;
		НоваяСтрока.Колонка2 = ОткрытыеНекомплекты.Номенклатура.КодЗавода;
		НоваяСтрока.Колонка3 = ОткрытыеНекомплекты.КоличествоОстаток;
		ЕстьНекомплект = Истина;
		
	КонецЦикла;
	
	Возврат Некомплекты;
	
КонецФункции

//Определение контроль
//Функция ОпределитьОтремонтированныеДеталиДляПоследующегоКонтроля(Заказ, ПроконтролироватьРемонт)
//	
//	КонтролируемыйРемонт = Новый ТаблицаЗначений;
//	КонтролируемыйРемонт.Колонки.Добавить("Колонка1", 	Новый ОписаниеТипов("СправочникСсылка.ИнспектируемыеЭлементы"),	ОбработатьТекстСообщения("Деталь", "Equipment"));
//	КонтролируемыйРемонт.Колонки.Добавить("Колонка2", 	Новый ОписаниеТипов("СправочникСсылка.Дефекты"),				ОбработатьТекстСообщения("Дефект", "Defect"));
//	//КонтролируемыйРемонт.Колонки.Добавить("Колонка3", 	Новый ОписаниеТипов("СправочникСсылка.ТипыДефектов"),			ОбработатьТекстСообщения("Тип дефекта", "Type defect"));
//	КонтролируемыйРемонт.Колонки.Добавить("Колонка4", 	Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииA"),		ОбработатьТекстСообщения("Позиция A", "Position A"));
//	КонтролируемыйРемонт.Колонки.Добавить("Колонка5", 	Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииB"),		ОбработатьТекстСообщения("Позиция B", "Position B"));
//	КонтролируемыйРемонт.Колонки.Добавить("Колонка6", 	Новый ОписаниеТипов("СправочникСсылка.ВариантыПозицииC"),		ОбработатьТекстСообщения("Позиция C", "Position C"));
//	КонтролируемыйРемонт.Колонки.Добавить("УникальныйИдентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"),					"УникальныйИдентификатор");
//	                                                                                                                
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	КонтрольКонсерновОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
//		|	КонтрольКонсерновОстатки.Консерн.ТипДефекта КАК ТипДефекта,
//		|	КонтрольКонсерновОстатки.Консерн.Дефект КАК Дефект,
//		|	КонтрольКонсерновОстатки.Консерн.ПозицияА КАК ПозицияА,
//		|	КонтрольКонсерновОстатки.Консерн.ПозицияB КАК ПозицияB,
//		|	КонтрольКонсерновОстатки.Консерн.ПозицияC КАК ПозицияC,
//		|	КонтрольКонсерновОстатки.Консерн.Ссылка КАК Консерн
//		|ИЗ
//		|	РегистрНакопления.КонтрольКонсернов.Остатки КАК КонтрольКонсерновОстатки
//		|ГДЕ
//		|	КонтрольКонсерновОстатки.Заказ = &Заказ";

//	Запрос.УстановитьПараметр("Заказ", Заказ);
//	
//	РезультатЗапроса = Запрос.Выполнить();	
//	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
//	
//	Для Каждого ОткрытыеНекомплекты Из ТаблицаДетальныеЗаписи Цикл
//		
//		НоваяСтрока = КонтролируемыйРемонт.Добавить();
//		НоваяСтрока.Колонка1 = ОткрытыеНекомплекты.ИнспектируемыйЭлемент;
//		НоваяСтрока.Колонка2 = ОткрытыеНекомплекты.Дефект;
//		//НоваяСтрока.Колонка3 = ОткрытыеНекомплекты.ТипДефекта;
//		НоваяСтрока.Колонка4 = ОткрытыеНекомплекты.ПозицияА;
//		НоваяСтрока.Колонка5 = ОткрытыеНекомплекты.ПозицияB;
//		НоваяСтрока.Колонка6 = ОткрытыеНекомплекты.ПозицияC;
//		НоваяСтрока.УникальныйИдентификатор = ОткрытыеНекомплекты.Консерн.УникальныйИдентификатор();	
//		
//		ПроконтролироватьРемонт = Истина;
//		
//	КонецЦикла;
//	
//	Возврат КонтролируемыйРемонт;
//	
//КонецФункции

//Получить список номенклатуры этого заказа
Функция ОпределитьНоменклатуру(ВходящиеПараметры)
	
	СписокНоменклатуры = "
	|	<div class='inspectorDivInspectionItemContent'>
	|		<!--СоставДополнительныхХарактеристик-->
	|	</div>";
		
	Попытка
		НоменклатураМаска = ВходящиеПараметры.Получить("JSONСоответствие").Получить("nomenclatureMask");
		ЗаказУникальныйИдентификаторСтрока = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidCurrentVIN");
		ЗаказУникальныйИдентификатор = Новый УникальныйИдентификатор(СокрЛП(ЗаказУникальныйИдентификаторСтрока));
		Заказ = Справочники.Заказы.ПолучитьСсылку(ЗаказУникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(Заказ) И ЗначениеЗаполнено(НоменклатураМаска) Тогда
			
			//Раскомментируй это, как закончишь
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 25
				|	VBOM.Номенклатура КАК Номенклатура,
				|	VBOM.Количество
				|ИЗ
				|	РегистрСведений.VBOM КАК VBOM
				|ГДЕ
				|	VBOM.Заказ = &Заказ
				|	И (VBOM.Номенклатура.Наименование ПОДОБНО ""%"" + &НоменклатураМаска + ""%""
				|			ИЛИ VBOM.Номенклатура.КодЗавода ПОДОБНО ""%"" + &НоменклатураМаска + ""%"")
				|
				|УПОРЯДОЧИТЬ ПО
				|	VBOM.Номенклатура.Наименование";

			Запрос.УстановитьПараметр("Заказ", Заказ);
			Запрос.УстановитьПараметр("НоменклатураМаска", НоменклатураМаска);	
			РезультатЗапроса = Запрос.Выполнить();	
			ТаблицаЗначений = РезультатЗапроса.Выгрузить();	

			//Заполнение страницы данными
			Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
				
				//Тело
				Для Каждого Запись Из ТаблицаЗначений Цикл
					
					ПерваяСтрока = "";
					Если Запись = ТаблицаЗначений[0] Тогда
						ПерваяСтрока = "btn-primary";
					КонецЕсли;
					
					HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent inspectorDivNomenclatureTableRow'>";					
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails "+ПерваяСтрока+"'>"+Запись.Номенклатура.Наименование+"</div>";
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails "+ПерваяСтрока+"'>"+Запись.Номенклатура.КодЗавода+"</div>";
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='styleHidden inspectorDivInspectionItemNomenclatureGUID "+ПерваяСтрока+"'>"+Запись.Номенклатура.УникальныйИдентификатор()+"</div>";
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails "+ПерваяСтрока+"'><input type='number' class='inspectorInputInspectionItemNomenclatureSetCount "+ПерваяСтрока+"' value='"+Запись.Количество+"'></input></div>";
					HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
					
					СписокНоменклатуры = HTMLЗаполнитьЗначение(СписокНоменклатуры, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
				КонецЦикла;
							
				СписокНоменклатуры = СписокНоменклатуры + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorInputInspectionItemNomenclatureNoData').addClass('styleHidden'); $('#inspectorButtonCreateNotFullComplectDocument').removeClass('styleHidden');	});	</script>";
			Иначе
				СписокНоменклатуры = СписокНоменклатуры + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorInputInspectionItemNomenclatureNoData').removeClass('styleHidden'); $('#inspectorButtonCreateNotFullComplectDocument').addClass('styleHidden');	});	</script>";
			КонецЕсли;
			
		Иначе
			СписокНоменклатуры = СписокНоменклатуры + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorInputInspectionItemNomenclatureNoData').removeClass('styleHidden'); $('#inspectorButtonCreateNotFullComplectDocument').addClass('styleHidden');	});	</script>";
		КонецЕсли;
	Исключение
		СписокНоменклатуры = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат СписокНоменклатуры;
	
КонецФункции

//Получить оригинальное изображение большого размера
Функция ПолучитьОригинальноеИзображение(ВходящиеПараметры)
	
	ИзображениеBase64 = "";	
	ИзображениеУникальныйИдентификатор = ВходящиеПараметры.Получить("JSONСоответствие").Получить("guidImage");
	ИзображениеСсылка = Справочники.ИзображенияДляВыбораИнспектируемогоЭлемента.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ИзображениеУникальныйИдентификатор) И ТипЗнч(ИзображениеУникальныйИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		ИзображениеСсылка = Справочники.ИзображенияДляВыбораИнспектируемогоЭлемента.ПолучитьСсылку(ИзображениеУникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзображениеСсылка) Тогда
		ДвоичныеДанные = ИзображениеСсылка.Изображение.ФайлХранилище.Получить();
		ИзображениеBase64 = "data:image/png;base64,"+СтрЗаменить(Base64Строка(ДвоичныеДанные), Символ(13)+Символ(10), "");
	КонецЕсли;
	
	Возврат ИзображениеBase64;
	
КонецФункции

//Определяем предыдущий, текущий и последующий заказы на линии
Функция ОпределитьЗаказыВСоответствииСОчередью(Структура, Заказ, ТочкаРегистрации)
	
	ЗаказыУдалосьОпределить = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвижениеЗаказов.Период КАК Период,
		|	ДвижениеЗаказов.Заказ
		|ПОМЕСТИТЬ ТекущийЗаказ
		|ИЗ
		|	РегистрНакопления.ДвижениеЗаказов КАК ДвижениеЗаказов
		|ГДЕ
		|	ДвижениеЗаказов.ТочкаРегистрации = &ТочкаРегистрации
		|	И ДвижениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ДвижениеЗаказов.Заказ = &Заказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвижениеЗаказов.Период КАК Период,
		|	ДвижениеЗаказов.Заказ
		|ПОМЕСТИТЬ ПредыдущийЗаказ
		|ИЗ
		|	ТекущийЗаказ КАК ТекущийЗаказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеЗаказов КАК ДвижениеЗаказов
		|		ПО ТекущийЗаказ.Период > ДвижениеЗаказов.Период
		|ГДЕ
		|	ДвижениеЗаказов.ТочкаРегистрации = &ТочкаРегистрации
		|	И ДвижениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвижениеЗаказов.Период КАК Период,
		|	ДвижениеЗаказов.Заказ
		|ПОМЕСТИТЬ СледующийЗаказ
		|ИЗ
		|	ТекущийЗаказ КАК ТекущийЗаказ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеЗаказов КАК ДвижениеЗаказов
		|		ПО ТекущийЗаказ.Период < ДвижениеЗаказов.Период
		|ГДЕ
		|	ДвижениеЗаказов.ТочкаРегистрации = &ТочкаРегистрации
		|	И ДвижениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредыдущийЗаказ.Заказ КАК ПредыдущийЗаказ,
		|	ТекущийЗаказ.Заказ КАК ТекущийЗаказ,
		|	СледующийЗаказ.Заказ КАК СледующийЗаказ
		|ИЗ
		|	ТекущийЗаказ КАК ТекущийЗаказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущийЗаказ КАК ПредыдущийЗаказ
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СледующийЗаказ КАК СледующийЗаказ
		|		ПО (ИСТИНА)";
		
		
	Запрос.УстановитьПараметр("ТочкаРегистрации", ТочкаРегистрации);	
		
	//Текущий заказ может быть, а может и не быть	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДвижениеЗаказов.Заказ = &Заказ", "");
	Иначе
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Структура.ЗаказСсылка = Заказ;
		Структура.ЗаказУникальныйИдентификатор = Заказ.УникальныйИдентификатор();
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаказыУдалосьОпределить = Истина;
		
		Если Не ЗначениеЗаполнено(Заказ) И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТекущийЗаказ) Тогда
			Структура.ЗаказСсылка = ВыборкаДетальныеЗаписи.ТекущийЗаказ;
			Структура.ЗаказУникальныйИдентификатор = ВыборкаДетальныеЗаписи.ТекущийЗаказ.УникальныйИдентификатор();
		КонецЕсли;
		
		Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказ = ВыборкаДетальныеЗаписи.ПредыдущийЗаказ;
		Если ЗначениеЗаполнено(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказ) Тогда
			Структура.СтруктураВыборСледующегоЗаказаИзОчереди.ПредыдущийЗаказУникальныйИдентификатор = ВыборкаДетальныеЗаписи.ПредыдущийЗаказ.УникальныйИдентификатор(); 
		КонецЕсли;
		
		Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказ = ВыборкаДетальныеЗаписи.СледующийЗаказ;
		Если ЗначениеЗаполнено(Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказ) Тогда
			Структура.СтруктураВыборСледующегоЗаказаИзОчереди.СледующийЗаказУникальныйИдентификатор = ВыборкаДетальныеЗаписи.СледующийЗаказ.УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
		
	Возврат ЗаказыУдалосьОпределить;
	
КонецФункции

//Получить изображения всех вариантов всех инспекционных элементов этой точки проверки качества
Функция ПолучитьИзображенияЭтойТочкиПроверкиКачества(ТочкаПроверкиКачества)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.ВариантИспользованияИнспектируемогоЭлемента
		//|ПОМЕСТИТЬ ПодходящиеВариантыИспользованияИнспектируемогоЭлемента
		//|ИЗ
		//|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементы КАК ТочкиПроверкиКачестваИнспектируемыеЭлементы
		//|ГДЕ
		//|	ТочкиПроверкиКачестваИнспектируемыеЭлементы.Ссылка = &ТочкаПроверкиКачества
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.Владелец КАК ИнспектируемыйЭлемент,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении КАК ВариантИспользованияИнспектируемогоЭлемента,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение КАК Изображение,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийA,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийB,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийC,
		//|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ОписаниеРасположенияНаИзображении
		//|ИЗ
		//|	ПодходящиеВариантыИспользованияИнспектируемогоЭлемента КАК ПодходящиеВариантыИспользованияИнспектируемогоЭлемента
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		//|		ПО ПодходящиеВариантыИспользованияИнспектируемогоЭлемента.ВариантИспользованияИнспектируемогоЭлемента = ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении
		//|ГДЕ
		//|	НЕ ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение.ПометкаУдаления
		//|ИТОГИ ПО
		//|	Изображение";
		
		"ВЫБРАТЬ
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.ИнспектируемоеИзображение КАК Изображение
		|ПОМЕСТИТЬ ИзображенияИзТочки
		|ИЗ
		|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементыПоИзображениям КАК ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям
		|ГДЕ
		|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.Ссылка = &ТочкаПроверкиКачества
		|	И НЕ ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.ИнспектируемоеИзображение.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзображенияИзТочки.Изображение КАК Изображение,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении.Владелец КАК ИнспектируемыйЭлемент,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении КАК ВариантИспользованияИнспектируемогоЭлемента,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийA КАК ЗначениеВариантаПозицийA,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийB КАК ЗначениеВариантаПозицийB,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ЗначениеВариантаПозицийC КАК ЗначениеВариантаПозицийC,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ОписаниеРасположенияНаИзображении КАК ОписаниеРасположенияНаИзображении,
		|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ПроверкаОбязательна КАК ПроверкаОбязательна

		|ИЗ
		|	ИзображенияИзТочки КАК ИзображенияИзТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
		|		ПО ИзображенияИзТочки.Изображение = ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение
		|ИТОГИ ПО
		|	Изображение";
	
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзображение = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИзображение.Следующий() Цикл	
		ВыборкаДетальныеЗаписи = ВыборкаИзображение.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
		КонецЦикла;
	КонецЦикла;
		
	Возврат РезультатЗапроса;
	
КонецФункции

//Получить все инспектируемые элементы
Функция ОпределитьИнспектируемыеЭлементыИзображений(ТочкаПроверкиКачества, Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.Ссылка КАК ТочкаПроверкиКачества,
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.НомерСтроки КАК НомерСтроки,
	|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ВариантИспользованияИнспектируемогоЭлементаНаИзображении КАК ВариантИспользованияИнспектируемогоЭлемента,
	|	&Заказ КАК Заказ,
	|	ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.ПроверкаОбязательна КАК ПроверкаОбязательна
	|ПОМЕСТИТЬ ТаблицаИнспектируемыхЭлементов
	|ИЗ
	|	Справочник.ТочкиПроверкиКачества.ИнспектируемыеЭлементыПоИзображениям КАК ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях КАК ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях
	|		ПО ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.ИнспектируемоеИзображение = ВариантыИспользованияИнспектируемыхЭлементовНаИзображениях.Изображение
	|ГДЕ
	|	ТочкиПроверкиКачестваИнспектируемыеЭлементыПоИзображениям.Ссылка = &ТочкаПроверкиКачества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонсерныОстатки.Заказ КАК Заказ,
	|	КонсерныОстатки.Консерн.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	КонсерныОстатки.Консерн.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
	|	3 КАК Статус
	|ПОМЕСТИТЬ СостояниеИнспектируемыхЭлементовЗаказа
	|ИЗ
	|	РегистрНакопления.Консерны.Остатки КАК КонсерныОстатки
	|ГДЕ
	|	КонсерныОстатки.Заказ = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ,
	|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ИнспектируемыйЭлемент,
	|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.ТочкаПроверкиКачества,
	|	ВЫБОР
	|		КОГДА НЕ УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Ремонт
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УспешнаяОбязательнаяПроверкаНаНаличиеКонсернов.СрезПоследних КАК УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних
	|ГДЕ
	|	УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Заказ = &Заказ
	|	И УспешнаяОбязательнаяПроверкаНаНаличиеКонсерновСрезПоследних.Выполнена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества КАК ТочкаПроверкиКачества,
	|	ТаблицаИнспектируемыхЭлементов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	|	ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента КАК ВариантИспользованияИнспектируемогоЭлемента,
	|	ТаблицаИнспектируемыхЭлементов.Заказ КАК Заказ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус ЕСТЬ НЕ NULL 
	|				ТОГДА СостояниеИнспектируемыхЭлементовЗаказа.Статус
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Статус
	|ИЗ
	|	ТаблицаИнспектируемыхЭлементов КАК ТаблицаИнспектируемыхЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостояниеИнспектируемыхЭлементовЗаказа КАК СостояниеИнспектируемыхЭлементовЗаказа
	|		ПО ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества = СостояниеИнспектируемыхЭлементовЗаказа.ТочкаПроверкиКачества
	|			И ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент = СостояниеИнспектируемыхЭлементовЗаказа.ИнспектируемыйЭлемент
	|			И ТаблицаИнспектируемыхЭлементов.Заказ = СостояниеИнспектируемыхЭлементовЗаказа.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИнспектируемыхЭлементов.ИнспектируемыйЭлемент,
	|	ТаблицаИнспектируемыхЭлементов.ВариантИспользованияИнспектируемогоЭлемента,
	|	ТаблицаИнспектируемыхЭлементов.ТочкаПроверкиКачества,
	|	ТаблицаИнспектируемыхЭлементов.Заказ,
	|	ТаблицаИнспектируемыхЭлементов.НомерСтроки,
	|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаИнспектируемыхЭлементов.ПроверкаОбязательна УБЫВ,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаИнспектируемыхЭлементов = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаИнспектируемыхЭлементов;
		
КонецФункции
//Получить варианты позиций C
Функция ПолучатьВариантыПозицийC(ТочкаПроверкиКачества)
	
	ВариантыПозиций = Новый Массив;
	
	ВариантыПозиций.Добавить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	     "ВЫБРАТЬ
	     |	ТочкиПроверкиКачестваГруппыВариантовПозицииС.ИнспектируемыйЭлемент КАК ИнспектируемыйЭлемент,
	     |	ВариантыПозицииC.Ссылка КАК ВариантыПозицииC_Ссылка
	     |ИЗ
	     |	Справочник.ТочкиПроверкиКачества.ГруппыВариантовПозицииС КАК ТочкиПроверкиКачестваГруппыВариантовПозицииС
	     |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыПозицииC КАК ВариантыПозицииC
	     |		ПО ТочкиПроверкиКачестваГруппыВариантовПозицииС.ГруппаВариантовПозицииС = ВариантыПозицииC.Владелец
	     |ГДЕ
	     |	ТочкиПроверкиКачестваГруппыВариантовПозицииС.Ссылка = &ТочкаПроверкиКачества
	     |ИТОГИ ПО
	     |	ИнспектируемыйЭлемент";
	Запрос.УстановитьПараметр("ТочкаПроверкиКачества", ТочкаПроверкиКачества);	
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	

	Возврат ВыборкаОбщийИтог;
	
КонецФункции

//Определяем текущий автомобиль на конвейере по значениям, полученным со сканера RFID
Функция ПолучитьТекущийАвтомобильОтСканераRFID(РабочееМестоОператора, Заказ)	
	ТекущийЗаказ = РегистрыСведений.СтатусыСканеровRFID.ПолучитьТекущийАвтомобиль(РабочееМестоОператора);		
	Возврат ТекущийЗаказ;
КонецФункции

//Сохранить идентификатор вызова сканера RFID
Функция СохранитьИдентификаторСканированияRFIDМетки(РабочееМестоОператора, ВходящиеПараметры)
		
	ЗаписьДобавлена = Ложь;
		
	//Записываем уникальный идентификатор вызова сканера в регистр
	Если РабочееМестоОператора.ИспользоватьСканерRFID Тогда
		
		УникальныйИдентификаторВызоваСканераRFID = ВходящиеПараметры.Получить("JSONСоответствие").Получить("inspectorAttributeRFIDSessionGUID");	
		Если ЗначениеЗаполнено(УникальныйИдентификаторВызоваСканераRFID) Тогда
			ЗаписьДобавлена = РегистрыСведений.СтатусыСканеровRFID.ЗаписатьТекущуюСессиюРаботыСоСканером(РабочееМестоОператора.ПривязанныйСканерRFID, УникальныйИдентификаторВызоваСканераRFID);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаписьДобавлена;	
	
КонецФункции

						//** Интерактивные действия, ради которых и создан этот интерфейс **//

//Создание документа "Операции по качеству" с видом "Проверка"
Функция СоздатьДокументОперацииПоКачествуПроверка(Структура)
	
	ДокументСоздан = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//Точно ли у нас есть точка?
	Если Не ЗначениеЗаполнено(Структура.ТочкаПроверкиКачества) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не заполнена точка проверки качества. ", "Quality point does not filled. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
		
	//Создание 
	Если Структура.СтруктураПараметровСозданияДокументов.ТипОперации = "OK" Тогда
		ДокументСоздан = QNS.РегистрацияУспешнойПроверки(
											Структура.ЗаказСсылка,
											Структура.ТочкаПроверкиКачества, 
											Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента, 
											,
											Структура.СтруктураПараметровСозданияДокументов.Комментарий, 
											Структура.ТекстСообщения, 
											Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент);
		Если ДокументСоздан = Истина Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Инспектируемый элемент """+Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент+""" успешно проверен. ", "Item """+Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент+""" was successfully inspected. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
		Иначе
			Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа качества произошла ошибка: "+Структура.ТекстСообщения, "An error occurred while creating the quality document: "+Структура.ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		КонецЕсли;
	ИначеЕсли Структура.СтруктураПараметровСозданияДокументов.ТипОперации = "NOK" Тогда
		
		//Проверка позиции A
		Если Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA И Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ПозицияA) Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("В описании дефекта требуется указать позицию A. ", "Fill the position A field. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Возврат ДокументСоздан;
		ИначеЕсли Не Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA Тогда
			Структура.СтруктураПараметровСозданияДокументов.ПозицияA = Справочники.ВариантыПозицииA.ПустаяСсылка();
		КонецЕсли;
		
		//Проверка позиции B
		Если Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB И Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ПозицияB)  Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("В описании дефекта требуется указать позицию B. ", "Fill the position B field. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Возврат ДокументСоздан;
		ИначеЕсли Не Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB Тогда
			Структура.СтруктураПараметровСозданияДокументов.ПозицияB = Справочники.ВариантыПозицииB.ПустаяСсылка();
		КонецЕсли;
		
		//Проверка позиции C
		Если Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC И Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ПозицияC)  Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("В описании дефекта требуется указать позицию C. ", "Fill the position C field. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Возврат ДокументСоздан;
		ИначеЕсли Не Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC Тогда
			Структура.СтруктураПараметровСозданияДокументов.ПозицияC = Справочники.ВариантыПозицииC.ПустаяСсылка();
		КонецЕсли;	
		
		//Проверка дефектов
		Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.Дефект) Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("В описании дефекта требуется указать дефект. ", "Fill the defect field. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Возврат ДокументСоздан;
		КонецЕсли;
		
		//Проверка типов дефектов
		Если ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ТипДефекта) И Структура.СтруктураПараметровСозданияДокументов.ТипДефекта.Владелец <> Структура.СтруктураПараметровСозданияДокументов.Дефект Тогда
			Структура.СтруктураПараметровСозданияДокументов.ТипДефекта = Справочники.ТипыДефектов.ПустаяСсылка();
		КонецЕсли;
		
		Если Структура.ТочкаПроверкиКачества.ИспользоватьСтоимостьКонсерна Тогда
			
			//Проверка стоимости консерна
			Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.СтоимостьКонсерна) Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("В описании дефекта требуется задать стоимость консерна. ", "Fill the concern value. ");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
				Возврат ДокументСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Структура.ТочкаПроверкиКачества.ИспользоватьОтветственногоЗаКонсерн Тогда
			
			//Проверка заполенного ответственного
			Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ОтветственныйЗаДефект) Тогда
				Структура.ТекстСообщения = ОбработатьТекстСообщения("Требуется задать ответственного за дефект.", "Fill responsible for the defect.");
				Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
				Возврат ДокументСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументСоздан = QNS.РегистрацияКонсерна(Структура.ЗаказСсылка, 
													Структура.ТочкаПроверкиКачества, 
													Структура.СтруктураПараметровСозданияДокументов.ВариантИспользованияИнспектируемогоЭлемента, 
													Структура.СтруктураПараметровСозданияДокументов.Дефект, 
													Структура.СтруктураПараметровСозданияДокументов.ТипДефекта, 
													Структура.СтруктураПараметровСозданияДокументов.ПозицияA, 
													Структура.СтруктураПараметровСозданияДокументов.ПозицияB, 
													Структура.СтруктураПараметровСозданияДокументов.ПозицияC, 
													Неопределено, 
													Структура.СтруктураПараметровСозданияДокументов.Отремонтирован, 
													,
													Структура.СтруктураПараметровСозданияДокументов.Комментарий, 
													,
													Структура.ТекстСообщения,                                            
													Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент,
													Структура.СтруктураПараметровСозданияДокументов.СтоимостьКонсерна,
													Структура.СтруктураПараметровСозданияДокументов.ОтветственныйЗаДефект);		
		Если ДокументСоздан = Истина Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Дефект оборудования """+Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент+""" зарегистрирован. ", "Defect of """+Структура.СтруктураПараметровСозданияДокументов.ИнспектируемыйЭлемент+""" equipment was registered. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
		Иначе
			Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа качества произошла ошибка: "+Структура.ТекстСообщения, "An error occurred while creating the quality document: "+Структура.ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументСоздан;
	
КонецФункции

//Создание документа "Операции по качеству" с видом "Контроль"
Функция СоздатьДокументОперацииПоКачествуКонтроль(Структура)
	
	ДокументСоздан = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//А что насчёт консерна?
	Если Не ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству) Или Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.ПолучитьОбъект() = Неопределено Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Не удалось найти документ открытия дефекта. ", "Can't recognize defect. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//Текстовое наименование для более удобного формирования сообщения	
	ИнспектируемыйЭлемент = Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.ИнспектируемыйЭлемент; 
	Дефект = Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству.Дефект;
	
	//Создание 
	Если Структура.СтруктураПараметровСозданияДокументов.ТипОперации = "OK" Тогда
		                                                                                   
		ДокументСоздан = QNS.РегистрацияВыполненияКонтроля(Структура.ТочкаПроверкиКачества, Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству, Истина, Структура.СтруктураПараметровСозданияДокументов.Комментарий, Структура.ТекстСообщения);
		
		Если ДокументСоздан = Истина Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Дефект """+Дефект+""" элемента """+ИнспектируемыйЭлемент+""" успешно исправлен. ", "Defect """+Дефект+""" of """+ИнспектируемыйЭлемент+""" was successfully repaired. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;	
		Иначе
			Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа качества произошла ошибка: "+Структура.ТекстСообщения, "An error occurred while creating the quality document: "+Структура.ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		КонецЕсли;
		
	ИначеЕсли Структура.СтруктураПараметровСозданияДокументов.ТипОперации = "NOK" Тогда
				
		ДокументСоздан = QNS.РегистрацияВыполненияКонтроля(Структура.ТочкаПроверкиКачества, Структура.СтруктураПараметровСозданияДокументов.ОперацияПоКачеству, Ложь, Структура.СтруктураПараметровСозданияДокументов.Комментарий, Структура.ТекстСообщения);
		
		Если ДокументСоздан = Истина Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Дефект """+Дефект+""" элемента """+ИнспектируемыйЭлемент+""" не был устранен, поэтому он был открыт повторно.", "Defect of """+Дефект+""" of """+ИнспектируемыйЭлемент+""" was not repaired, so it was re-opened. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусПредупреждение;	
		Иначе
			Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа качества произошла ошибка: "+Структура.ТекстСообщения, "An error occurred while creating the quality document: "+Структура.ТекстСообщения);
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументСоздан;
	
КонецФункции
									
//Создание документа "Операции по некомплекту"
Функция СоздатьДокументОперацииПоНекомплекту(Структура)
	
	ДокументСоздан = Ложь;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work. ");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат ДокументСоздан;
	КонецЕсли;
	
	//Количество заполнено?
	Если ЗначениеЗаполнено(Структура.СтруктураПараметровСозданияДокументов.Количество) Тогда
		Попытка
			Структура.СтруктураПараметровСозданияДокументов.Количество = Число(Структура.СтруктураПараметровСозданияДокументов.Количество);
		Исключение
			Структура.СтруктураПараметровСозданияДокументов.Количество = 0;
		КонецПопытки;
		
		Если Структура.СтруктураПараметровСозданияДокументов.Количество < 1 Тогда
			Структура.ТекстСообщения = ОбработатьТекстСообщения("Задано некорректное количество номенклатуры. ", "Incorrect count of nomenclature. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
			Возврат ДокументСоздан;
		КонецЕсли;
		
	КонецЕсли;	
	
	//Создание
	ДокументОперацияНекомплекта = Документы.ОперацияПоНекомплекту.СоздатьДокумент();
	ДокументОперацияНекомплекта.Дата = ТекущаяДата();
	ДокументОперацияНекомплекта.ОперацияНекомплекта = Перечисления.ОперацииНекомплектов.Регистрация;
	ДокументОперацияНекомплекта.Заказ = Структура.ЗаказСсылка;
	ДокументОперацияНекомплекта.Номенклатура = Структура.СтруктураПараметровСозданияДокументов.Номенклатура;
	ДокументОперацияНекомплекта.Количество = Структура.СтруктураПараметровСозданияДокументов.Количество;
	ДокументОперацияНекомплекта.Смена = Производство.ОпределитьСмену(ТекущаяДата()); 
	
	Попытка
		ДокументОперацияНекомплекта.Записать(РежимЗаписиДокумента.Проведение);
		ДокументСоздан = Истина;
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Некомплект номенклатуры "+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+" зарегистрирован. ", "Shortage of "+Структура.СтруктураПараметровСозданияДокументов.Номенклатура+" was registered.");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;
	Исключение	
		ДокументСоздан = Ложь;
		Структура.ТекстСообщения = ОбработатьТекстСообщения("При регистрации документа некомплекта произошла ошибка: "+ОписаниеОшибки(), "An error occurred while creating the shortage document: "+ОписаниеОшибки());
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.Статусошибка;
	КонецПопытки;
	
	Возврат ДокументСоздан;
	
КонецФункции

//Создание документа "Регистрация прохождения точек проверки качества"
Функция СоздатьДокументРегистрацияПрохожденияТочекПроверкиКачества(Структура)
	
	//Так как это итоговый документ, который завершает цикл проверки автомобиля, надо выполнить некоторые контроли
	ИтоговыйТекстСообщения = "";	
	КонтрольПройден = Истина;
	
	//Точно ли у нас есть заказ?
	Если Не ЗначениеЗаполнено(Структура.ЗаказСсылка) Тогда		
		Структура.ТекстСообщения = ОбработатьТекстСообщения("Сначала отсканируйте VIN. ", "Scan VIN to begin work.");
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
		Возврат Ложь;
	КонецЕсли;

	//Контроль 1. Обязательные инспекционные элементы проверены полностью
	Если Не Структура.ПоказыватьВсеИнспектируемыеЭлементы Тогда
		Разделитель = ОбработатьТекстСообщения("Требуется проинспектировать следующие элементы: ", "You need to check these inspection items: ");
		ТекстСообщения = "";
		Для Каждого СтатусИнспектируемогоЭлемента Из Структура.ТаблицаИнспектируемыхЭлементов Цикл
			Если СтатусИнспектируемогоЭлемента.ПроверкаОбязательна И СтатусИнспектируемогоЭлемента.Статус = 0 Тогда
				ТекстСообщения = ТекстСообщения + Разделитель + СтатусИнспектируемогоЭлемента.ИнспектируемыйЭлемент;
				Разделитель = ", ";
				КонтрольПройден = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если Не КонтрольПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
		
	//Контроль 2. Требуется пройти все точки контроля качества
	Разделитель = ОбработатьТекстСообщения("Требуется прохождение следующих точек: ", "You need to pass these stations: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьПрохождениеОбязательныхТочек Тогда
		КонтрольПрохожденияОбязательныхТочекПройден = QNS.ОбязательныеТочкиПройдены(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества, ТекстСообщения);
		Если Не КонтрольПрохожденияОбязательныхТочекПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Контроль 3. Требуется устранить дефекты
	//Разделитель = ОбработатьТекстСообщения("Требуется устранить следующие дефекты: ", "You need to fix these defects: ");
	//ТекстСообщения = "";
	//Если Структура.ТочкаПроверкиКачества.КонтролироватьНаличиеОткрытыхКонсернов Тогда
	//	Если Структура.ТочкаПроверкиКачества.КонтролироватьСледующиеДефекты Тогда
	//		МассивДефектов = Структура.ТочкаПроверкиКачества.КонтролируемыеДефекты.Выгрузить().ВыгрузитьКолонку("Дефект");		
	//		КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , МассивДефектов, Ложь);
	//		Если Не КонтрольОткрытыхКонсерновПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	Иначе			
	//		КонтрольОткрытыхКонсерновПройден = Не QNS.КонтрольНаличияОткрытыхКонсернов(Структура.ЗаказСсылка, ТекстСообщения, , , , , Ложь);
	//		Если Не КонтрольОткрытыхКонсерновПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	КонецЕсли;
	//КонецЕсли;
	
	////Контроль 4. Требуется проверить устраненные дефекты
	//Разделитель = ОбработатьТекстСообщения("Требуется выполнить проверку устраненных дефектов: ", "You need to check of fix these defects: ");
	//ТекстСообщения = "";
	//Если Структура.ТочкаПроверкиКачества.КонтролироватьВыполненныйРемонт Тогда
	//	Если Структура.ТочкаПроверкиКачества.КонтролироватьСледующийРемонт Тогда
	//		МассивДефектов = Структура.ТочкаПроверкиКачества.КонтролируемыйРемонт.Выгрузить().ВыгрузитьКолонку("Дефект");		
	//		КонтрольНаличияНепроверенногоРемонтаПройден = Не QNS.КонтрольНаличияНепроверенныхОтремонтированныхЭлементов(Структура.ЗаказСсылка, ТекстСообщения, , , , МассивДефектов, Ложь);
	//		Если Не КонтрольНаличияНепроверенногоРемонтаПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	Иначе			
	//		КонтрольНаличияНепроверенногоРемонтаПройден = Не QNS.КонтрольНаличияНепроверенныхОтремонтированныхЭлементов(Структура.ЗаказСсылка, ТекстСообщения, , , , , Ложь);
	//		Если Не КонтрольНаличияНепроверенногоРемонтаПройден Тогда
	//			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
	//			КонтрольПройден = Ложь;
	//		КонецЕсли;			
	//	КонецЕсли;
	//КонецЕсли;
	
	//Контроль 6. Требуется устранить некомплекты
	Разделитель = ОбработатьТекстСообщения("Требуется устранить следующие некомплекты: ", "You need to set these shortages: ");
	ТекстСообщения = "";
	Если Структура.ТочкаПроверкиКачества.КонтролироватьКомплектность Тогда
		КонтрольНекомплектовПройден = QNS.КонтрольКомплектности(Структура.ЗаказСсылка, ТекстСообщения);
		Если Не КонтрольНекомплектовПройден Тогда
			ИтоговыйТекстСообщения = ИтоговыйТекстСообщения + Символы.ПС + Разделитель + ТекстСообщения;	
			КонтрольПройден = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	//Создание документа регистрации движения
	Если КонтрольПройден Тогда
		ДвижениеЗарегистрировано = QNS.РегистрацияПрохожденияТочкиПроверкиКачества(Структура.ЗаказСсылка, Структура.ТочкаПроверкиКачества);	
		Если ДвижениеЗарегистрировано Тогда
		 	Структура.ТекстСообщения = ОбработатьТекстСообщения("Инспекция автомобиля "+Структура.ЗаказСсылка+" выполнена.", "Vehicle inspection completed. ");
			Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусУспех;
			Структура.ТолькоЧтение = Истина;
		КонецЕсли;
	Иначе
		ДвижениеЗарегистрировано = Ложь;
		Структура.ТекстСообщения = СокрЛП(ИтоговыйТекстСообщения);
		Структура.ЦветТекстаСообщения = Структура.ЦветаИнтерфейса.СтатусОшибка;
	КонецЕсли;
		
	Возврат ДвижениеЗарегистрировано;
	
КонецФункции


									//**	Функции работы с HTML	**//
										
//Сформировать кнопку-заголовок соответствующую инспекционному элементы
Функция HTMLЗаголовокКнопкиТекущегоИнспекционногоЭлемента(Структура, Знач HTMLТекст, Элемент, ПервыйНепроверенныйЭлемент, ПользовательскиеСкрипты)
	HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ВкладкаЗаголовок").ПолучитьТекст();
	//Наименование блока
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеТочкиКонтроляКачества", Элемент.ИнспектируемыйЭлемент, Истина);
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеТочкиКонтроляКачестваНижнийРегистр", НРег(Элемент.ИнспектируемыйЭлемент));
	Если ЗначениеЗаполнено(Элемент.ИнспектируемыйЭлемент) Тогда
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "УникальныйИдентификаторИнспекционногоЭлемента", Элемент.ИнспектируемыйЭлемент.УникальныйИдентификатор());
	КонецЕсли;
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НомерИнспекционногоЭлемента", Формат(Элемент.НомерСтроки, "ЧГ=0"));
	
	//Устанавливаем фокус на первый неотсканированный обязательный элемент
	Если ПервыйНепроверенныйЭлемент = Ложь И Элемент.Статус = 0 И Элемент.ПроверкаОбязательна Тогда 
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "setFocusOnFirstUnscanningItem("+Формат(Элемент.НомерСтроки, "ЧГ=0")+");";
		ПервыйНепроверенныйЭлемент = Истина;
	КонецЕсли;
	
	//Статус кнопок
	Если Не Элемент.ПроверкаОбязательна Тогда// Или Структура.ПоказыватьВсеИнспектируемыеЭлементы
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemOK", "styleHidden", Истина);
	Иначе
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ИконкаТочкиКонтроляКачества", Структура.ЦветаИнтерфейса.ПроверкаОбязательна, Истина);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorDivInspectionItemHeader", "styleBold", Истина);
	КонецЕсли;

	//Стили кнопок
	Если Элемент.Статус = 1 Тогда		
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemOK", "btn-success", Истина);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemOK", "disabled", Истина);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemNOK", "styleHidden", Истина);
	ИначеЕсли Элемент.Статус = 2 Тогда
		Если Не Элемент.ИнспектируемыйЭлемент.РазрешитьПовторнуюПроверку Тогда
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemNOK", "disabled", Истина);
		КонецЕсли;
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemNOK", "btn-warning", Истина);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemOK", "styleHidden", Истина);
	ИначеЕсли Элемент.Статус = 3 Тогда
		Если Не Элемент.ИнспектируемыйЭлемент.РазрешитьПовторнуюПроверку Тогда
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemNOK", "disabled", Истина);
		КонецЕсли;
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemOK", "styleHidden", Истина);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "inspectorButtonInspectionItemNOK", "btn-danger", Истина);
	КонецЕсли;
	
	//Настройки открытия дефекта этого инспектируемого элемента
	МассивКолонок = Структура.ТаблицаИнспектируемыхЭлементов.Колонки;
	НастройкиОткрытияДефектов = ПолучитьПараметрыОткрытияДефектаНаЭтомИнспектируемомЭлементе(Структура, Элемент, МассивКолонок);
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "JSONТочкиКонтроляКачества", СтрЗаменить(JSON.Записать_JSON(НастройкиОткрытияДефектов), Символы.ПС, ""));
	Возврат HTMLТекст;
	
КонецФункции

//Сформировать страницу добавления дефекта для выбранного инспекционного элемента
Функция HTMLЗаданиеДефектаИнспекционногоЭлемента(Структура)

	HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ВкладкаСодержимое").ПолучитьТекст();
	
	//Позиция "A"
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаНаименованиеПозицииA", ОбработатьТекстСообщения("Позиция A: ", "Position A: "), Истина);
	Пока Структура.ВыборкаПозицийA.Следующий() Цикл
		HTMLText = "<option value='"+Структура.ВыборкаПозицийA.Ссылка.УникальныйИдентификатор()+"'>"+Структура.ВыборкаПозицийA+"</option>";		
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаПозицияA", HTMLText, Истина);
	КонецЦикла;
	
	//Позиция "B"
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаНаименованиеПозицииB", ОбработатьТекстСообщения("Позиция B: ", "Position B: "), Истина);
	Пока Структура.ВыборкаПозицийB.Следующий() Цикл
		HTMLText = "<option value='"+Структура.ВыборкаПозицийB.Ссылка.УникальныйИдентификатор()+"'>"+Структура.ВыборкаПозицийB+"</option>";		
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаПозицияB", HTMLText, Истина);
	КонецЦикла;
	
	//Позиция "C"
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаНаименованиеПозицииC", ОбработатьТекстСообщения("Позиция C: ", "Position C: "), Истина);
	Если ЗначениеЗаполнено(Структура.ТаблицаИнспектируемыхЭлементов) Тогда
		Структура.ВыборкаПозицийC = ПолучатьВариантыПозицийC(Структура.ТочкаПроверкиКачества);
		Пока Структура.ВыборкаПозицийC.Следующий() Цикл	
			
			HTMLText = "";
			HTMLText = HTMLText + "<select class='styleHidden selectpicker inspectorSelectFilterBlockPositionC' guid='"+Структура.ВыборкаПозицийC.ИнспектируемыйЭлемент.УникальныйИдентификатор()+"'>";
			HTMLText = HTMLText + "<option value='select' class='hidden' selected disabled>Select</option>";
			ПозицииДетальныеЗаписи = Структура.ВыборкаПозицийC.Выбрать();
			Пока ПозицииДетальныеЗаписи.Следующий() Цикл
				HTMLText = HTMLText + "<option value='"+ПозицииДетальныеЗаписи.ВариантыПозицииC_Ссылка.УникальныйИдентификатор()+"'>"+ПозицииДетальныеЗаписи.ВариантыПозицииC_Ссылка+"</option>";
			КонецЦикла;
			HTMLText = HTMLText + "</select>";
			
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "РасположениеИнспектируемогоЭлементаПозицияC", HTMLText, Истина);
			
		КонецЦикла;
	КонецЕсли;
		
	//Дефекты и их типы
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеБлокаДефекты", ОбработатьТекстСообщения("Дефекты: ", "Defects: "), Истина);
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеБлокаТипыДефектов", ОбработатьТекстСообщения("Типы: ", "Types: "), Истина);
	МассивСтрокДефектов = Новый Массив;
	Если ЗначениеЗаполнено(Структура.ДефектыПоИЭ) Тогда		
		Структура.ДефектыПоИЭ.Сбросить();
		Пока Структура.ДефектыПоИЭ.Следующий() Цикл
			НаличиеФильтраДефектов = НЕ Структура.ДефектыПоИЭ.ПоказыватьВсеДефекты;
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаличиеФильтраДефектов", ?(НаличиеФильтраДефектов, "true", "false"));
			ВыборкаДефекты = Структура.ДефектыПоИЭ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
			Пока ВыборкаДефекты.Следующий() Цикл
				ТегИнспектируемогоЭлемента = "";
				Если НаличиеФильтраДефектов Тогда
					Выборка = ВыборкаДефекты.Выбрать();
					МассивИдентификаторовИнЭлементов = Новый Массив;
					Пока Выборка.Следующий() Цикл
						МассивИдентификаторовИнЭлементов.Добавить(Выборка.ИнспектируемыйЭлемент.УникальныйИдентификатор());
					КонецЦикла;
						ТегИнспектируемогоЭлемента = "' inspection-item-guid='" + СтрСоединить(МассивИдентификаторовИнЭлементов, ",");
					КонецЕсли;
				HTMLСписокДефектов = "<option value='"+ВыборкаДефекты.Дефект.УникальныйИдентификатор()+"' defectid='"+ВыборкаДефекты.ДефектКод+ТегИнспектируемогоЭлемента+"'>"+ВыборкаДефекты.ДефектНаименование+"</option>";
				МассивСтрокДефектов.Добавить(HTMLСписокДефектов);
			КонецЦикла;				
		КонецЦикла;				
	КонецЕсли;
	СтрокаСпискаДефектов = СтрСоединить(МассивСтрокДефектов, Символы.ПС);
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеДефекта", СтрокаСпискаДефектов, Истина);
	СтрокаСпискаДефектов = "";
	МассивСтрокДефектов.Очистить();
	
	//Стоимость консерна
	Если Структура.ТочкаПроверкиКачества.ИспользоватьСтоимостьКонсерна Тогда
	
		HTMLТекстСтоимостьКонсерна = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_СтоимостьКонсерна").ПолучитьТекст();
		HTMLТекстСтоимостьКонсерна = HTMLЗаполнитьЗначение(HTMLТекстСтоимостьКонсерна, "НаименованиеСтоимостьКонсерна", ОбработатьТекстСообщения("Стоимость консерна: ", "Value of concern: "), Истина);
		Пока Структура.ВыборкаСтоимостьКонсерна.Следующий() Цикл
			HTMLТекстЗначенияСтоимости = "<option value='"+ Структура.ВыборкаСтоимостьКонсерна.Ссылка.УникальныйИдентификатор() +"'>"+Структура.ВыборкаСтоимостьКонсерна.Наименование+"</option>";		
			HTMLТекстСтоимостьКонсерна = HTMLЗаполнитьЗначение(HTMLТекстСтоимостьКонсерна, "СтоимостьКонсерна", HTMLТекстЗначенияСтоимости, Истина);
		КонецЦикла;   
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СтоимостьКонсерна", HTMLТекстСтоимостьКонсерна, Ложь);
		
	КонецЕсли;
	
	//Ответственные за консерн
	Если Структура.ТочкаПроверкиКачества.ИспользоватьОтветственногоЗаКонсерн Тогда
		
		HTMLТекстОтветственныеЗаКонсерн = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ОтветственныйЗаДефект").ПолучитьТекст();
		HTMLТекстОтветственныеЗаКонсерн = HTMLЗаполнитьЗначение(HTMLТекстОтветственныеЗаКонсерн, "НаименованиеОтветственныеЗаКонсерн", ОбработатьТекстСообщения("Ответственный: ", "Responsible for concern: "), Истина);
		ВыборкаОтветственныеЗаДефект = Структура.ВыборкаОтветственныеЗаДефект;	                                                                                                     
		Пока ВыборкаОтветственныеЗаДефект.Следующий() Цикл
			HTMLТекстЗначенияОтветственныйЗаДефект = "<option value='"+ ВыборкаОтветственныеЗаДефект.Ссылка.УникальныйИдентификатор() +"'>"+ ВыборкаОтветственныеЗаДефект.Наименование+"</option>";		
			HTMLТекстОтветственныеЗаКонсерн = HTMLЗаполнитьЗначение(HTMLТекстОтветственныеЗаКонсерн, "СписокОтветственных", HTMLТекстЗначенияОтветственныйЗаДефект, Истина);
		КонецЦикла;   
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СписокОтветственных", HTMLТекстОтветственныеЗаКонсерн, Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Структура.ДеревоДефектов) Тогда		
		МассивСтрокТиповДефектов = Новый Массив;        
		Структура.ДеревоДефектов.Сбросить();
		
		Пока Структура.ДеревоДефектов.Следующий() Цикл			
			
			ИмеютсяТипыДефектов = Ложь;
			HTMLСписокТиповДефектов = "<div defectid='"+Структура.ДеревоДефектов.Дефект.Код+"' class='inspectorDivInspectionItemDetailsTypeDefect styleHidden'	>	<select class='selectpicker'>	<option value='select' class='hidden' selected disabled>Select</option>";
	
			ВыборкаТиповДефектов = Структура.ДеревоДефектов.Выбрать();		
			Пока ВыборкаТиповДефектов.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаТиповДефектов.ТипДефекта) Тогда
					HTMLСписокТиповДефектов = HTMLСписокТиповДефектов + Символы.ПС + "<option value='"+ВыборкаТиповДефектов.ТипДефекта.УникальныйИдентификатор()+"'>"+ВыборкаТиповДефектов.ТипДефекта+"</option>";		
					ИмеютсяТипыДефектов = Истина;
				КонецЕсли;
			КонецЦикла;
			
			HTMLСписокТиповДефектов = HTMLСписокТиповДефектов + Символы.ПС + "</select></div>";
			
			Если Не ИмеютсяТипыДефектов Тогда
				HTMLСписокТиповДефектов = "";
			КонецЕсли;
			
			МассивСтрокТиповДефектов.Добавить(HTMLСписокТиповДефектов);
			
		КонецЦикла;				
		СтрокаСпискаТиповДефектов = СтрСоединить(МассивСтрокТиповДефектов, Символы.ПС);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеТипаДефекта", СтрокаСпискаТиповДефектов, Истина);
		СтрокаСпискаТиповДефектов = "";
		МассивСтрокТиповДефектов.Очистить();

	КонецЕсли;
	
	//Комментарий
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеБлокаКомментарий", ОбработатьТекстСообщения("Комментарий: ", "Commentary: "), Ложь);

	//Ремонт
	Если Структура.ТочкаПроверкиКачества.ЗакрыватьДефектыОнЛайн Тогда
	
		HTMLТекстЗакрыватьДефектыОнЛайн = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ЗакрыватьДефектыОнЛайн").ПолучитьТекст();
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗакрыватьДефектыОнЛайн", HTMLТекстЗакрыватьДефектыОнЛайн, Ложь);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеБлокаРемонт", ОбработатьТекстСообщения("Отремонтирован: ", "Repaired: "), Ложь);
	КонецЕсли;
	
			
	//Кнопка "Подвтердить"
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НаименованиеКнопкиПроверкаВыполнена", ОбработатьТекстСообщения("Подтвердить", "Confirm"), Ложь);
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить дополнительную характеристику заказа
Функция HTMLДополнительнаяХарактеристикаЗаказа(ИдентификаторХарактеристики, Наименование, ТаблицаЗначений = Неопределено)
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ДополнительныеХарактеристики_ВкладкаСодержимое").ПолучитьТекст();
		
	//Присвоение номеров страниц
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ИдентификаторХарактеристики", ИдентификаторХарактеристики);
	
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent inspectorDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;
		
	Иначе
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='inspectorDivCheckSubBlockContent inspectorDivCheckSubBlockContentDetails'>"+ТекстНетДанныхДляВывода+"</div>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить дополнительную характеристику заказа
Функция HTMLВкладкаНекоплект(ИдентификаторХарактеристики, Наименование, ТаблицаЗначений = Неопределено)
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_Некоплект_ВкладкаСодержимое").ПолучитьТекст();
		                           
	//Присвоение номеров страниц
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ИдентификаторХарактеристики", ИдентификаторХарактеристики);
	
	//Выводить нечего
	ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", ТекстНетДанныхДляВывода, Истина);		

	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		
		//Скрытие блока "Нет данных для вывода"
		HTMLТекст = HTMLТекст + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorDivInspectionItemNomenclatureCurrentNotFullComplectDocuments').removeClass('styleHidden');	});	</script>";
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent inspectorDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;		
		
	Иначе
		
		//Скрытие таблицы текущих открытых некомплектов
		HTMLТекст = HTMLТекст + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorDivInspectionItemNomenclatureCurrentNotFullComplectDocuments').addClass('styleHidden'); });	</script>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Заполнить дополнительную характеристику заказа
Функция HTMLВкладкаПроверитьОтремонтированныеДетали(ИдентификаторХарактеристики, Наименование, ТаблицаЗначений = Неопределено)
	
	//Получаем шаблон
	HTMLТекст = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_Контроль_ВкладкаСодержимое").ПолучитьТекст();
		
	//Присвоение номеров страниц
	HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ИдентификаторХарактеристики", ИдентификаторХарактеристики);
	
	//Заполнение страницы данными
	Если ЗначениеЗаполнено(ТаблицаЗначений) Тогда
		
		//Заголовки
		HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent inspectorDivInspectionItemTitle'>";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл			
			Если Колонка.Имя = "УникальныйИдентификатор" Тогда
				Продолжить;
			КонецЕсли;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Колонка.Заголовок+"</div>";	
		КонецЦикла;
		HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		
		//Тело
		Для Каждого Запись Из ТаблицаЗначений Цикл
			HTMLБлокСоставДополнительныхХарактеристик = "<div class='inspectorDivCheckSubBlockContent' concernGUID='"+Запись.УникальныйИдентификатор+"'>";
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если Колонка.Имя = "УникальныйИдентификатор" Тогда
					Продолжить;
				КонецЕсли;
				HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "<div class='inspectorDivCheckSubBlockContentDetails'>"+Запись[Колонка.Имя]+"</div>";
			КонецЦикла;
			HTMLБлокСоставДополнительныхХарактеристик = HTMLБлокСоставДополнительныхХарактеристик + "</div>";
			HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "СоставДополнительныхХарактеристик", HTMLБлокСоставДополнительныхХарактеристик, Истина);
		КонецЦикла;		
		
	Иначе
		
		//Скрытие пустого блока с данными
		HTMLТекст = HTMLТекст + "<script type='text/javascript' charset='utf8'>	$(document).ready(function(){	$('#inspectorDivControlContent').addClass('styleHidden');	});	</script>";
		
		//Выводить нечего
		ТекстНетДанныхДляВывода = ОбработатьТекстСообщения("Нет данных для вывода", "No data");
		HTMLНетДанныхДляВывода = "<div class='inspectorDivCheckSubBlockContent inspectorDivCheckSubBlockContentDetails'>"+ТекстНетДанныхДляВывода+"</div>";
		
		//Присвоение заголовков
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "ЗначениеДополнительнойХарактеристики", Наименование);
		HTMLТекст = HTMLЗаполнитьЗначение(HTMLТекст, "НетДанныхДляВывода", HTMLНетДанныхДляВывода, Истина);
		
	КонецЕсли;
	
	Возврат HTMLТекст;
	
КонецФункции

//Замена шаблонного значения в HTML строке
Функция HTMLЗаполнитьЗначение(HTMLPage, Шаблон, Значение, СохранитьШаблон = Ложь)
	
	Шаблон = "<!--"+Шаблон+"-->";
	
	Если Не СохранитьШаблон Тогда
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение));
	Иначе
		HTMLPage = СтрЗаменить(HTMLPage, Шаблон, Строка(Значение)+Символы.ПС+Шаблон);
	КонецЕсли;
	
	Возврат HTMLPage;
	
КонецФункции
							
//Заменить названия элементов на форме
Функция HTMLЗаменитьНазванияЭлементовНаФорме(HTMLPage)
	
	СтруктураНазванияЭлементов = Новый Структура();
	
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаЗаголовокСтанция",						НСтрMES("ru = 'Выберите рабочее место оператора'; en = 'Choose a working place of operator'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаВыход",								НСтрMES("ru = 'Выход'; en = 'Exit'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаЗакрыть",							НСтрMES("ru = 'Закрыть'; en = 'Close'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаЗавершитьИнспекцию",						НСтрMES("ru = 'Завершить инспекцию'; en = 'Complete an inspection'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаКнопкаДобавитьНоменклатуру",				НСтрMES("ru = 'Добавить'; en = 'Add'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаНоменклатура",							НСтрMES("ru = 'Номенклатура'; en = 'Nomenclature'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаИнспектируемыйЭлемент",					НСтрMES("ru = 'Инспектируемый элемент'; en = 'Inspection item'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаВыберитеИнспектируемыйЭлемент",			НСтрMES("ru = 'Выберите инспектируемый элемент:'; en = 'Choose an inspection item:'"));
	СтруктураНазванияЭлементов.Вставить("НаименованиеРеквизитаВыберитеСтатусИнспектируемогоЭлемента",	НСтрMES("ru = 'Выберите статус инспектируемого элемента: '; en = 'Choose status of inspection item: '"));
		
	Для Каждого НазваниеЭлемента Из СтруктураНазванияЭлементов Цикл
		HTMLPage = СтрЗаменить(HTMLPage, "<!--"+НазваниеЭлемента.Ключ+"-->", НазваниеЭлемента.Значение);
	КонецЦикла;
	
	Возврат HTMLPage;
	
КонецФункции

//Обновить таблицы после выполнения динамических запросов
Функция HTMLОбновитьИнформациюНаСтранице(Структура)
	
	ПользовательскиеСкрипты = "";
	
	HTMLИзображение = "";
	HTMLОписаниеДефекта = "";
	HTMLДефекты = "";
	HTMLРедкиеОпции = "";
	HTMLНекомплект = "";
	HTMLКампании = "";
	HTMLКонтроль = "";
	
	//Обновляем блок выбора дефекта на картинке
	Если ЗначениеЗаполнено(Структура.ТаблицаИзображенийИнспектируемыхЭлементов) Тогда						
		HTMLИзображение = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ИзображениеСодержимое").ПолучитьТекст();
		HTMLИзображение = СтрЗаменить(HTMLИзображение, Символы.ПС, "");		
	КонецЕсли;		
		
	//Обновляем блок описания дефекта
	Если Истина Тогда 
		HTMLОписаниеДефекта = HTMLЗаданиеДефектаИнспекционногоЭлемента(Структура);
		HTMLОписаниеДефекта = СтрЗаменить(HTMLОписаниеДефекта, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.selectpicker').val('');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.selectpicker').selectpicker('refresh');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorCheckboxInspectionItemDetailsRepair').bootstrapToggle();";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorInputInspectionItemSearchField').val('');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivInspectionItemNamesBlock').children().show();";	
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivFilterBlockPositionA').find('.selectpicker').selectpicker('val', 'select');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivFilterBlockPositionB').find('.selectpicker').selectpicker('val', 'select');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivFilterBlockPositionC').find('.selectpicker').selectpicker('val', 'select');";
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorInputValueOfConcern').find('.selectpicker').selectpicker('val', 'select');";
	КонецЕсли;
	
	//Обновляем статусы текущих инспекционных элементов
	Если Истина Тогда
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid]').removeClass('btn-success btn-warning btn-danger disabled');";
		Для Каждого ИнспекционныйЭлемент Из Структура.ТаблицаИнспектируемыхЭлементов Цикл
			
			//Получение статусов
			МассивКолонок = Структура.ТаблицаИнспектируемыхЭлементов.Колонки;
			НастройкиОткрытияДефектов = ПолучитьПараметрыОткрытияДефектаНаЭтомИнспектируемомЭлементе(Структура, ИнспекционныйЭлемент, МассивКолонок);
			НастройкиОткрытияДефектов = JSON.Записать_JSON(НастройкиОткрытияДефектов);
			НастройкиОткрытияДефектов = СтрЗаменить(НастройкиОткрытияДефектов, Символы.ПС, "");
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorDivInspectionItemHeader[guid="""+Строка(ИнспекционныйЭлемент.ИнспектируемыйЭлемент.УникальныйИдентификатор())+"""]').attr('settings', '"+НастройкиОткрытияДефектов+"');";
			
			Если ИнспекционныйЭлемент.Статус = 1 Тогда
				УникальныйИдентификаторИнспекционногоЭлемента = Строка(ИнспекционныйЭлемент.ИнспектируемыйЭлемент.УникальныйИдентификатор());
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemOK').addClass('btn-success disabled');";
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemNOK').addClass('styleHidden');";
			ИначеЕсли ИнспекционныйЭлемент.Статус = 2 Тогда
				УникальныйИдентификаторИнспекционногоЭлемента = Строка(ИнспекционныйЭлемент.ИнспектируемыйЭлемент.УникальныйИдентификатор());
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemOK').addClass('styleHidden');";
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemNOK').addClass('btn-warning');";
				Если Не ИнспекционныйЭлемент.ИнспектируемыйЭлемент.РазрешитьПовторнуюПроверку Тогда
					ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemNOK').addClass('disabled');";
				КонецЕсли;
			ИначеЕсли ИнспекционныйЭлемент.Статус = 3 Тогда
				УникальныйИдентификаторИнспекционногоЭлемента = Строка(ИнспекционныйЭлемент.ИнспектируемыйЭлемент.УникальныйИдентификатор());
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemOK').addClass('styleHidden');";
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemNOK').addClass('btn-danger');";
				Если Не ИнспекционныйЭлемент.ИнспектируемыйЭлемент.РазрешитьПовторнуюПроверку Тогда
					ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('.inspectorButtonInspectionItemHeader[guid="""+УникальныйИдентификаторИнспекционногоЭлемента+"""].inspectorButtonInspectionItemNOK').addClass('disabled');";
				КонецЕсли;				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;		
	
	//Обновляем статусы блоков на изображениях
	Если ЗначениеЗаполнено(Структура.ТаблицаИзображенийИнспектируемыхЭлементов) Тогда
		
		ВыборкаИзображение = Структура.ТаблицаИзображенийИнспектируемыхЭлементов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		
		Пока ВыборкаИзображение.Следующий() Цикл			
			ИзображениеНастройки = Новый Массив;
			СтатусПроверкиЭлементовНаИзображении = Новый Структура("AllRequiredChecked, CheckedElementsCount, AllElementsCount", Истина, 0, 0);
			
			ВыборкаДетальныеЗаписи = ВыборкаИзображение.Выбрать();		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				МассивКолонок = Структура.ТаблицаИзображенийИнспектируемыхЭлементов.Колонки;
				НастройкиОткрытияДефектов =  ПолучитьПараметрыОткрытияДефектаНаЭтомИнспектируемомЭлементе(Структура, ВыборкаДетальныеЗаписи, МассивКолонок);
				ИзображениеНастройки.Добавить(НастройкиОткрытияДефектов);			
				
				//Статус проверки инспектируемых элементов на картинке
				Если НастройкиОткрытияДефектов.CheckIsRequired = Истина И НастройкиОткрытияДефектов.FigurePosition.InspectionComplete = Ложь Тогда
					СтатусПроверкиЭлементовНаИзображении.AllRequiredChecked = Ложь;
				КонецЕсли;
				Если НастройкиОткрытияДефектов.FigurePosition.InspectionComplete = Истина Тогда
					СтатусПроверкиЭлементовНаИзображении.CheckedElementsCount = СтатусПроверкиЭлементовНаИзображении.CheckedElementsCount + 1;
				КонецЕсли;
				СтатусПроверкиЭлементовНаИзображении.AllElementsCount = СтатусПроверкиЭлементовНаИзображении.AllElementsCount + 1;
				
			КонецЦикла;
			
			//Статус каждого инспектируемого элемента
			ИзображениеНастройки = JSON.Записать_JSON(ИзображениеНастройки);
			ИзображениеНастройки = СтрЗаменить(ИзображениеНастройки, Символы.ПС, "");			
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#imageId"+ВыборкаИзображение.Изображение.Код+"').attr('settings', '"+ИзображениеНастройки+"');";
			
			//Статус проверки инспектируемых элементов на картинке
			СтатусПроверкиЭлементовНаИзображении = JSON.Записать_JSON(СтатусПроверкиЭлементовНаИзображении);
			СтатусПроверкиЭлементовНаИзображении = СтрЗаменить(СтатусПроверкиЭлементовНаИзображении, Символы.ПС, "");
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#imageId"+ВыборкаИзображение.Изображение.Код+"').parent().find('.inspectorDivInspectionItemHint').attr('settings', '"+СтатусПроверкиЭлементовНаИзображении+"');";
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "refreshImagesStatuses();";			
			
		КонецЦикла;
					
	КонецЕсли;
	
	АктивнаяВкладкаВыбрана = Ложь;
	
	//Обновляем контроль
	Если Структура.ТочкаПроверкиКачества.АктивироватьВкладкуКонтроль Тогда
		Заголовок = ОбработатьТекстСообщения("Контроль", "Control");
			
		HTMLКонтроль = HTMLВкладкаПроверитьОтремонтированныеДетали("Control", Заголовок, Структура.Контроль);
		HTMLКонтроль = HTMLЗаполнитьЗначение(HTMLКонтроль, "НаименованиеКнопкиДефектУспешноУстранен", ОбработатьТекстСообщения("OK", "OK"));
		HTMLКонтроль = HTMLЗаполнитьЗначение(HTMLКонтроль, "НаименованиеКнопкиДефектНеБылУстранен", ОбработатьТекстСообщения("NOK", "NOK"));
		HTMLКонтроль = СтрЗаменить(HTMLКонтроль, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockControl').removeClass('btn-success btn-warning btn-danger');";
		
		Если Структура.КонтрольСтатус Тогда
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockControl').addClass('btn-warning styleOpacity');";
		Иначе
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockControl').addClass('btn-success styleOpacity');";
		КонецЕсли;
		
		Если Не АктивнаяВкладкаВыбрана Тогда						
			АктивнаяВкладкаВыбрана = Истина;
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivCheckSubBlockControl').addClass('active');";
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivVINAdditionalInformationControl').removeClass('styleHidden');";
			Если ЗначениеЗаполнено(Структура.Контроль) Тогда
				ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivControlContent').removeClass('styleHidden');";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockControl').addClass('styleHidden');";
	КонецЕсли;
	
	//Обновляем текущие дефекты
	Если Истина Тогда
		Заголовок = ОбработатьТекстСообщения("Дефекты", "Defects");
		
		HTMLДефекты = HTMLДополнительнаяХарактеристикаЗаказа("Defects", Заголовок, Структура.Дефекты);
		HTMLДефекты = СтрЗаменить(HTMLДефекты, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockDefects').removeClass('btn-success btn-warning btn-danger');";
		
		Если Структура.ДефектыСтатус Тогда
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockDefects').addClass('btn-danger styleOpacity');";
		Иначе
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockDefects').addClass('btn-success styleOpacity');";
		КонецЕсли;

		Если Не АктивнаяВкладкаВыбрана Тогда			
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivVINAdditionalInformationDefects').removeClass('styleHidden');";			
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivCheckSubBlockDefects').addClass('active');";
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + Символы.ПС + "$('#inspectorDivInspectionItemNamesMainBlock').removeClass('styleHidden');";			
			АктивнаяВкладкаВыбрана = Истина;
		КонецЕсли;

	КонецЕсли;
	
	//Обновляем редкие опции
	Если Истина И Константы.ИспользоватьРедкиеОпции.Получить() Тогда
		Заголовок = ОбработатьТекстСообщения("Редкие опции", "Rare options");
		
		HTMLРедкиеОпции = HTMLДополнительнаяХарактеристикаЗаказа("RareOptions", Заголовок, Структура.РедкиеОпции);		
		HTMLРедкиеОпции = СтрЗаменить(HTMLРедкиеОпции, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockRareOptions').removeClass('btn-success btn-warning btn-danger');";

		Если Структура.РедкиеОпцииСтатус Тогда
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockRareOptions').addClass('btn-warning styleOpacity');";
		Иначе
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockRareOptions').addClass('btn-success styleOpacity');";
		КонецЕсли;	
	КонецЕсли;
	
	//Обновляем некомплекты
	Если Истина и Константы.ИспользоватьНекомплекты.Получить() Тогда
		Заголовок = ОбработатьТекстСообщения("Некомплект", "Shortages");
			
		HTMLНекомплект = HTMLВкладкаНекоплект("Shortages", Заголовок, Структура.Некомплект);
		HTMLНекомплект = СтрЗаменить(HTMLНекомплект, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockShortage').removeClass('btn-success btn-warning btn-danger');";
		
		Если Структура.НекомплектСтатус Тогда
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockShortage').addClass('btn-warning styleOpacity');";
		Иначе
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockShortage').addClass('btn-success styleOpacity');";
		КонецЕсли;
	КонецЕсли;
		
	//Обновляем кампании
	Если Истина  и Константы.ИспользоватьКампании.Получить()Тогда
		Заголовок = ОбработатьТекстСообщения("Кампании", "Campaigns");
			
		HTMLКампании = HTMLДополнительнаяХарактеристикаЗаказа("Campaigns", Заголовок, Структура.Кампании);		
		HTMLКампании = СтрЗаменить(HTMLКампании, Символы.ПС, "");
		
		ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockCampaign').removeClass('btn-success btn-warning btn-danger');";
		
		Если Структура.КампанииСтатус Тогда
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockCampaign').addClass('btn-warning');";
		Иначе
			ПользовательскиеСкрипты = ПользовательскиеСкрипты + "$('#inspectorDivCheckSubBlockCampaign').addClass('btn-success');";
		КонецЕсли;
	КонецЕсли;

	Возврат "$('#inspectorDivInspectionItemDetailsBlock').html("""+HTMLОписаниеДефекта+HTMLДефекты+HTMLРедкиеОпции+HTMLНекомплект+HTMLКампании+HTMLКонтроль+HTMLИзображение+""");" + ПользовательскиеСкрипты;
	
КонецФункции

//Получаем настройки изображения
Функция HTMLНастройкиОткрытияДефектаПоИзображению(Структура)
	
	ВыборкаИзображение = Структура.ТаблицаИзображенийИнспектируемыхЭлементов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	HTMLМакеты = "";	
	Пока ВыборкаИзображение.Следующий() Цикл	
		HTMLМакет = Обработки.WEB_WORKSTATION_INSPECTOR.ПолучитьМакет("HTML_Inspector_ТочкаКонтроляКачества_ИзображениеЗаголовок").ПолучитьТекст();
		
		Если ЗначениеЗаполнено(ВыборкаИзображение.Изображение.Изображение.СжатоеИзображениеBase64) Тогда
			ИзображениеСодержимое = ВыборкаИзображение.Изображение.Изображение.СжатоеИзображениеBase64;
		Иначе 
			ДвоичныеДанные = ВыборкаИзображение.Изображение.Изображение.ФайлХранилище.Получить();
			ИзображениеСодержимое = "data:image/png;base64,"+СтрЗаменить(Base64Строка(ДвоичныеДанные), Символ(13)+Символ(10), "");
		КонецЕсли;
		
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "НаименованиеИнспектируемогоЭлемента", ВыборкаИзображение.Изображение.Наименование);
		
		ИзображениеИдентификатор = "imageId"+ВыборкаИзображение.Изображение.Код;
		ИзображениеНаименование = ВыборкаИзображение.Изображение.Наименование;
		ИзображениеУникальныйИдентификатор = ВыборкаИзображение.Изображение.УникальныйИдентификатор();
		ИзображениеСостав = "";
		ИзображениеНастройки = Новый Массив;
		СтатусПроверкиЭлементовНаИзображении = Новый Структура("AllRequiredChecked, CheckedElementsCount, AllElementsCount", Истина, 0, 0);
			
		ВыборкаДетальныеЗаписи = ВыборкаИзображение.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИзображениеСостав = ИзображениеСостав + " " + НРег(ВыборкаДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.Владелец.Наименование);
			МассивКолонок = Структура.ТаблицаИзображенийИнспектируемыхЭлементов.Колонки;
			НастройкиОткрытияДефектов =  ПолучитьПараметрыОткрытияДефектаНаЭтомИнспектируемомЭлементе(Структура, ВыборкаДетальныеЗаписи, МассивКолонок);		
			ИзображениеНастройки.Добавить(НастройкиОткрытияДефектов);
		
			//Статус проверки инспектируемых элементов на картинке
			Если НастройкиОткрытияДефектов.CheckIsRequired = Истина И НастройкиОткрытияДефектов.FigurePosition.InspectionComplete = Ложь Тогда
				СтатусПроверкиЭлементовНаИзображении.AllRequiredChecked = Ложь;
			КонецЕсли;
			Если НастройкиОткрытияДефектов.FigurePosition.InspectionComplete = Истина Тогда
				СтатусПроверкиЭлементовНаИзображении.CheckedElementsCount = СтатусПроверкиЭлементовНаИзображении.CheckedElementsCount + 1;
			КонецЕсли;
			СтатусПроверкиЭлементовНаИзображении.AllElementsCount = СтатусПроверкиЭлементовНаИзображении.AllElementsCount + 1;
			
		КонецЦикла;
		
		ИзображениеНастройки = JSON.Записать_JSON(ИзображениеНастройки);
		ИзображениеНастройки = СтрЗаменить(ИзображениеНастройки, Символы.ПС, "");
		
		//Настройки окрытия дефекта этого инспектируемого элемента		
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "НаименованиеИнспекционныхЭлементовНаИзображенииНижнийРегистр", ИзображениеСостав);
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "ИзображениеИдентификатор", ИзображениеИдентификатор);
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "ИзображениеУникальныйИдентификатор", ИзображениеУникальныйИдентификатор);
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "ИзображениеСодержимое", ИзображениеСодержимое);
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "ИзображениеНастройки", ИзображениеНастройки);		
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "ИзображениеНаименование", ИзображениеНаименование);
		
		
		//Статус проверки инспектируемых элементов на картинке
		СтатусПроверкиЭлементовНаИзображении = JSON.Записать_JSON(СтатусПроверкиЭлементовНаИзображении);
		СтатусПроверкиЭлементовНаИзображении = СтрЗаменить(СтатусПроверкиЭлементовНаИзображении, Символы.ПС, "");
		HTMLМакет = HTMLЗаполнитьЗначение(HTMLМакет, "СтатусПроверкиЭлементовНаИзображении", СтатусПроверкиЭлементовНаИзображении);		
				
		HTMLМакеты = HTMLМакеты + HTMLМакет;
		
	КонецЦикла;
	
	Возврат HTMLМакеты;
	
КонецФункции

//Создаем массив настроек, которые в дальнейшем будут храниться в каждом изображении
Функция ПолучитьПараметрыОткрытияДефектаНаЭтомИнспектируемомЭлементе(Структура, ДетальныеЗаписи, МассивКолонок)
	
	НастройкиОткрытияДефектов = Новый Структура;
	
	//Требуется ли отобразить все позиции выбора дефекта
	ОтобразитьВсеПозиции = Ложь;
	Если МассивКолонок.Найти("ВариантИспользованияИнспектируемогоЭлемента") = Неопределено Тогда
		ОтобразитьВсеПозиции = Истина;
	КонецЕсли;
	
	//Требуется ли обновлять статус?
	ОбновитьСтатусИнспектируемогоЭлемента = Ложь;	
	Если МассивКолонок.Найти("Статус") <> Неопределено Тогда
		ОбновитьСтатусИнспектируемогоЭлемента = Истина;
	КонецЕсли;
	
	//Имеет ли изображение?
	ИмеетИзображение=Ложь;
	Если МассивКолонок.Найти("Изображение") <> Неопределено И Структура.ТочкаПроверкиКачества.СпособОткрытияКонсернаПоКартинке Тогда
		ИмеетИзображение = Истина;
	КонецЕсли;
	
	//Позиции определены заранее?
	ЗначенияПозицийОпределеныЗаранее = Ложь;
	Если МассивКолонок.Найти("ЗначениеВариантаПозицийA") <> Неопределено Или МассивКолонок.Найти("ЗначениеВариантаПозицийB") <> Неопределено Или МассивКолонок.Найти("ЗначениеВариантаПозицийC") <> Неопределено Тогда
		ЗначенияПозицийОпределеныЗаранее=Истина;
		ОтобразитьВсеПозиции = Ложь;
	КонецЕсли;
	
	//Общие параметры, характерные для всех инспектируемых элементов
	НастройкиОткрытияДефектов.Вставить("InspectionItemName", 				ДетальныеЗаписи.ИнспектируемыйЭлемент.Наименование);
	НастройкиОткрытияДефектов.Вставить("InspectionItemGUID", 				ДетальныеЗаписи.ИнспектируемыйЭлемент.УникальныйИдентификатор());
	НастройкиОткрытияДефектов.Вставить("CheckIsRequired", 					ДетальныеЗаписи.ПроверкаОбязательна);
	
	//Обновляем статус сканирования инспектируемых элементов
	Если ОбновитьСтатусИнспектируемогоЭлемента Тогда
		НастройкиОткрытияДефектов.Вставить("ScanningStatus", 				ДетальныеЗаписи.Статус);
	КонецЕсли;
	
	//Можем вывести все блоки выбора позиции дефекта или же только подходящие
	Если ОтобразитьВсеПозиции Тогда
		НастройкиОткрытияДефектов.Вставить("PositionA", 					Истина);
		НастройкиОткрытияДефектов.Вставить("PositionB",						Истина);
		НастройкиОткрытияДефектов.Вставить("PositionC", 					Истина);
	Иначе
		НастройкиОткрытияДефектов.Вставить("InspectionItemVersionGUID", 	ДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.УникальныйИдентификатор());		
		НастройкиОткрытияДефектов.Вставить("PositionA", 					ДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюA);
		НастройкиОткрытияДефектов.Вставить("PositionB",						ДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюB);
		НастройкиОткрытияДефектов.Вставить("PositionC", 					ДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.ЗадаватьПозициюC);
	КонецЕсли;
	
	//Не исключено, что все значения позиций определены заранее
	Если ЗначенияПозицийОпределеныЗаранее Тогда
		НастройкиОткрытияДефектов.Вставить("PositionAValue", 				ДетальныеЗаписи.ЗначениеВариантаПозицийA.УникальныйИдентификатор());
		НастройкиОткрытияДефектов.Вставить("PositionBValue",				ДетальныеЗаписи.ЗначениеВариантаПозицийB.УникальныйИдентификатор());
		НастройкиОткрытияДефектов.Вставить("PositionCValue", 				ДетальныеЗаписи.ЗначениеВариантаПозицийC.УникальныйИдентификатор());		
	КонецЕсли;
	
	//Добавляем информацию об изображении, если это требуется
	Если ИмеетИзображение И ЗначениеЗаполнено(Структура.ТаблицаИнспектируемыхЭлементовИзображений) Тогда		
		
		ОписаниеФигуры = Новый Структура();
		
		//Расположение фигуры на изображении
		ОписаниеФигуры.Вставить("Position", JSON.Прочитать_JSON(ДетальныеЗаписи.ОписаниеРасположенияНаИзображении));

		//Определяем, проверяли ли этот инспектируемый элемент ранее, или нет
		Состояние = Структура.ТаблицаИнспектируемыхЭлементовИзображений.Найти(ДетальныеЗаписи.ВариантИспользованияИнспектируемогоЭлемента.Владелец, "ИнспектируемыйЭлемент");
		Если Состояние <> Неопределено И ЗначениеЗаполнено(ОписаниеФигуры) Тогда
		
			//Статус инспектирования - "Пока не инспектировали"
			Если Состояние.Статус = 0 Тогда
				
				ОписаниеФигуры.Вставить("Style", "rgba(255, 255, 255, 0.5)"); //Цвет фигуры на изображении
				ОписаниеФигуры.Вставить("InspectionComplete", Ложь); //Инспекция выполнена
		        ОписаниеФигуры.Вставить("InspectionCompleteIsOK", ЛОЖЬ);
				
			//Статус инспектирования - "OK"
			ИначеЕсли Состояние.Статус = 1 Тогда
				
				ОписаниеФигуры.Вставить("Style", "rgba(92, 184, 92, 0.5)"); //Цвет фигуры на изображении
				ОписаниеФигуры.Вставить("InspectionComplete", Истина); //Инспекция выполнена
				ОписаниеФигуры.Вставить("InspectionCompleteIsOK", Истина); //Инспекция выполнена и ОК

				
			//Статус инспектирования - "Отремонтирован"
			ИначеЕсли Состояние.Статус = 2 Тогда
				
				ОписаниеФигуры.Вставить("Style", "rgba(240, 173, 78, 0.5)"); //Цвет фигуры на изображении
				ОписаниеФигуры.Вставить("InspectionComplete", Истина); //Инспекция выполнена
				ОписаниеФигуры.Вставить("InspectionCompleteIsOK", ЛОЖЬ);
				
			//Статус инспектирования - "NOK"
			ИначеЕсли Состояние.Статус = 3 Тогда
				
				ОписаниеФигуры.Вставить("Style", "rgba(217, 83, 79, 0.5)"); //Цвет фигуры на изображении
				ОписаниеФигуры.Вставить("InspectionComplete", Истина); //Инспекция выполнена
				ОписаниеФигуры.Вставить("InspectionCompleteIsOK", ЛОЖЬ);
				
			КонецЕсли;			

		КонецЕсли;
		
		НастройкиОткрытияДефектов.Вставить("FigurePosition", ОписаниеФигуры);	
	КонецЕсли;
	
	Возврат НастройкиОткрытияДефектов;
	
КонецФункции

Функция HTMLЗаменитьШаблонПутейФайловВHTMLPage(HTMLPage, ВходящиеПараметры, НастройкаОбмена, Отказ)
	
	Шаблон = НастройкаОбмена.ПутьКФайламПриложения;
	Если ПустаяСтрока(Шаблон) Тогда                            
		//Подменяем html страницу на страницу с ошибкой и возвращаем ее
		ТекстСообщения = НСтрMES("ru='В настройках обмена не заполнен ПутьКФайламПриложения""';en='There is empty ПутьКФайламПриложения in exchange""'")+НСтрMES("ru='""Пожалуйста, обратитесь к консультантам.';en='"" wasn''t assigned any working place. Please, contact your consultants.'");
		HTMLPage = WebWorkstationОбщиеФункции.СгенерироватьСтраницуСОшибкой(ТекстСообщения, ВходящиеПараметры, Отказ);
		Возврат HTMLPage;
	КонецЕсли;
	
	HTMLPage = СтрЗаменить(HTMLPage, "<!--ПутьКФайлам-->", Шаблон);
	
	Возврат HTMLPage;
	
КонецФункции

//заглушка
//с формы приходит комментарий со знаком +
//например, Привет привет на форме интерфейса приходит Привет+привет
//проблема с кодировкой в 1с на входе
Функция УбратьСимволыИзКомментария(Комментарий)

	масСимволы = Новый Массив;
	масСимволы.Добавить("+");
	
	символЗамены = " ";
	
	Для каждого символПоиска из масСимволы Цикл
		Комментарий = СтрЗаменить(Комментарий,символПоиска,символЗамены);
	КонецЦикла;
	
	Возврат СОКРЛП(Комментарий);
	
КонецФункции