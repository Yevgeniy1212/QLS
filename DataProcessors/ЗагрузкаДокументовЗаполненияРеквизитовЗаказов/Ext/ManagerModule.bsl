Функция ПолучитьОписаниеОбработкиОбмена() Экспорт

	// полный состав параметров описания смотри в этой функции
	СтруктураНастроек = Справочники.НетиповыеОбменыДанными.ПолучитьОписаниеОбработкиОбменаПоУмолчанию();
	СтруктураНастроек.ДляМножественныхОбменов = Истина;
	СтруктураНастроек.ТекстовоеОписаниеОбмена = "Загрузка реквизитов автомобилей";
	СтруктураНастроек.ВидОбмена = Перечисления.ВидыОбмена.Загрузка;
	СтруктураНастроек.СпособПередачиДанных = Перечисления.СпособыПередачиДанныхВНетиповыхОбменах.WebService_Host;
	
	Возврат СтруктураНастроек;
КонецФункции // ()

Функция ПолучитьДокументПоGUID(Ссылка_GUID)
	GUIDДокумента = Новый УникальныйИдентификатор(Ссылка_GUID);
	
	Док = Документы.ЗаполнениеРеквизитовЗаказов.ПолучитьСсылку(GUIDДокумента);
	Док = Док.ПолучитьОбъект();
	Если Док = Неопределено Тогда
		Док = Документы.ЗаполнениеРеквизитовЗаказов.СоздатьДокумент();
		Док.УстановитьСсылкуНового(Документы.ЗаполнениеРеквизитовЗаказов.ПолучитьСсылку(GUIDДокумента));
	КонецЕсли;	
	Возврат Док;
	
КонецФункции

Функция ВыполнитьОбмен(Событие, НастройкаОбмена, Data) Экспорт
	
	ТекстОшибки="";
	
	СписокОбработкаЗагруженных = Справочники.НетиповыеОбменыДанными.ПолучитьОбменыПоИмениОбработки("ОбработкаЗагруженыхРеквизитовЗаказов");
	Если СписокОбработкаЗагруженных.Количество() = 0 Тогда
		ТекстОшибки = "Не найден нетиповой обмен по имени обработки ""ОбработкаЗагруженыхРеквизитовЗаказов""";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ОбменПоОбработкеЗагруженных = СписокОбработкаЗагруженных[0];
	УзелРегистрацииДокументов = ОбменПоОбработкеЗагруженных.УзелРегистрацииИзменений;
	Если НЕ ЗначениеЗаполнено(УзелРегистрацииДокументов) Тогда
		ТекстОшибки = "Не заполнен узел регистрации изменений в нетиповом обмене " + ОбменПоОбработкеЗагруженных;
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Попытка 	
		ВходныеДанныеДок = ЗначениеИзСтрокиВнутр(Data);
	Исключение
		ТекстОшибки =  ОписаниеОшибки();
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстОшибки);	
		Возврат ТекстОшибки;
	КонецПопытки;
	
	ПолученоДокументов = ВходныеДанныеДок.Количество();
	СозданоДокументов = 0;
	ПолученоПовторноДокументов = 0;
	ПолученныеДокументы = Новый Соответствие;
	
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ТекСтрокаВходныеДанныеДок Из ВходныеДанныеДок Цикл
			
			ДокументОбъект = ПолучитьДокументПоGUID(ТекСтрокаВходныеДанныеДок.Ссылка_GUID);
			Если Не ДокументОбъект.ЭтоНовый() Тогда
				ПолученоПовторноДокументов = ПолученоПовторноДокументов + 1;
				ПолученныеДокументы.Вставить(ДокументОбъект, "Получен повторно");
				ДокументОбъект.ХарактеристикиVIN.Очистить();
			Иначе
				СозданоДокументов = СозданоДокументов + 1;
				ПолученныеДокументы.Вставить(ДокументОбъект, "Создан новый");
			КонецЕсли;
			
			ДокументОбъект.Дата = ТекСтрокаВходныеДанныеДок.Дата;
			ДокументОбъект.ВходящийНомер = ТекСтрокаВходныеДанныеДок.Номер;
			
			ХарактеристикиВина = ТекСтрокаВходныеДанныеДок.ХарактеристикиЗаказа;
			Для Каждого Характеристика Из ХарактеристикиВина Цикл
				НоваяСтрока = ДокументОбъект.ХарактеристикиVIN.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Характеристика);
			КонецЦикла;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ПланыОбмена.ЗарегистрироватьИзменения(УзелРегистрацииДокументов, ДокументОбъект.Ссылка);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка, ТекстОшибки);	
		
		Возврат ТекстОшибки;
		
	КонецПопытки;
	
	ЛогСообщение = "Получено документов " + ПолученоДокументов + ". Создано " + СозданоДокументов + ". Перезаписано " + ПолученоПовторноДокументов + Символы.ПС;
	
	Для Каждого КлючИЗначение Из ПолученныеДокументы Цикл
		ЛогСообщение = ЛогСообщение + КлючИЗначение.Ключ + "  " + КлючИЗначение.Значение + Символы.ПС;
	КонецЦикла;	
	
	РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие, Перечисления.СОЛЛЕРС_УровниСобытия.Информация, ЛогСообщение);	
	Возврат ТекстОшибки;
	
КонецФункции // ()
