
//GET-запрос
Функция GetPageContent(userGuid, relativeUrl) 
	
	УстановитьПривилегированныйРежим(Истина);
	ВходящиеПараметры = ПолучитьВходящиеПараметры(userGuid, relativeUrl, "GET");
	HTMLPage = ПолучитьHTMLСтраницу(ВходящиеПараметры);

	Ответ = УпаковатьHTMLСтраницу(HTMLPage);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

//POST-запрос
Функция ProcessRequest(userGuid, relativeUrl, requestType, requestContent, requestBody)
	
	УстановитьПривилегированныйРежим(Истина);

	ВходящиеПараметры = ПолучитьВходящиеПараметры(userGuid, relativeUrl, "POST", requestType, requestContent, requestBody);	
	HTMLPage = ПолучитьHTMLСтраницу(ВходящиеПараметры);
	Ответ = УпаковатьHTMLСтраницу(HTMLPage);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

														//** Запуск нетипового обмена **//
														
//Формируем структуру со входящими параметрами для дальнейшей передачи в обмен
Функция ПолучитьВходящиеПараметры(userGuid, relativeUrl, requestMethod, requestType = "", requestContent = "", requestBody="")
		
	//Разбор входящих параметров в JSON (если это удастся)
	JSONСоответствие = Новый Соответствие;
	Если ЗначениеЗаполнено(requestContent) Тогда
		Попытка
			JSONСоответствие = JSON.Прочитать_JSON(requestContent);
		Исключение
			JSONСоответствие = Новый Соответствие;
		КонецПопытки;
	КонецЕсли;	
	
	//Разбираем URL
	МассивПараметров = Новый Массив;
	Если Найти(relativeUrl, "?") = 0 Тогда //Если нет знаков вопроса, то это значит, что мы работаем по старой схеме, где все параметры перечислены через подчёркивания
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(relativeUrl, "_");
	Иначе //Новая схема формирования ссылки, согласно стандартам URL
		ВходящаяURL = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(relativeUrl, "?");
		Если ВходящаяURL.Количество() = 2 Тогда		
			ВходящиеПараметры = СтрЗаменить(ВходящаяURL[1], "/", "");
			МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВходящиеПараметры, "&"); 
		КонецЕсли;			
	КонецЕсли;
	
	//Получаем каждый из параметров в URL
	URLСоответствие = Новый Соответствие;
	Для Каждого Параметр Из МассивПараметров Цикл
		ПозицияРазделителя = Найти(Параметр, "=");
		
		Если ПозицияРазделителя < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		НазваниеПараметра = НРег(Сред(Параметр, 0, ПозицияРазделителя-1));
		ЗначениеПараметра = Сред(Параметр, ПозицияРазделителя+1, СтрДлина(Параметр));
		
		Если ЗначениеЗаполнено(НазваниеПараметра) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			URLСоответствие.Вставить(НазваниеПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого стр из JSONСоответствие Цикл
		Текст = стр.Ключ + " " + стр.Значение + " " + ТипЗнч(стр.Значение) + Символы.ПС;
	КонецЦикла;
	
	//Упаковываем входящие параметры и то, что удалось распознать
	ВходящиеПараметры = Новый Соответствие;
	ВходящиеПараметры.Вставить("userGuid", userGuid);
	ВходящиеПараметры.Вставить("relativeUrl", relativeUrl);
	ВходящиеПараметры.Вставить("requestMethod", requestMethod);
	ВходящиеПараметры.Вставить("requestType", requestType);
	ВходящиеПараметры.Вставить("requestContent", requestContent);
	ВходящиеПараметры.Вставить("requestBody", requestBody);
	ВходящиеПараметры.Вставить("JSONСоответствие", JSONСоответствие); //Тут всегда будет как минимум пустое соответствие
	ВходящиеПараметры.Вставить("URLСоответствие", URLСоответствие); //Тут всегда будет как минимум пустое соответствие
		
	Возврат ВходящиеПараметры;
	
КонецФункции

//Получение текста HTML страницы
Функция ПолучитьHTMLСтраницу(ВходящиеПараметры)
	
	Идентификатор = ВходящиеПараметры.Получить("URLСоответствие").Получить("exchange");
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		НастройкаОбмена = Справочники.НетиповыеОбменыДанными.ПолучитьОбменДляФункцииSubmitQueryСлушающегоВебСервисаПоИдентификатору(Идентификатор);
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Попытка
				HTMLPage = ЗапускНетиповогоОбмена(НастройкаОбмена, ВходящиеПараметры);
			Исключение
				HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Текст ошибки: "+ОписаниеОшибки();
				РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
			КонецПопытки;	
		Иначе
			HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Ошибка вызова веб-сервиса: получено неправильное имя обмена """+Идентификатор+"""";
			РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
		КонецЕсли;	
	Иначе
		HTMLPage = "Во время выполнения обмена произошла ошибка. URL: "+ВходящиеПараметры.Получить("relativeUrl")+". RequestType: "+ВходящиеПараметры.Получить("requestType")+". Идентификатор обмена не задан.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,HTMLPage);
	КонецЕсли;
	
	Возврат HTMLPage;
		
КонецФункции

//Нахождение подходящей обработки и запуск обмена
Функция ЗапускНетиповогоОбмена(НастройкаОбмена, ДопПараметр)
	
	// определим событие обмена
	Событие = НастройкаОбмена.СобытиеЖурналаРегистрации;
	Если Не ЗначениеЗаполнено(Событие) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указано значение события журнала регистрации.";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Справочники.СОЛЛЕРС_КлассификаторСобытий.ГлобальнаяОшибкаИнформационнойБазы,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	// определим обработку обмена
	ИмяОбработкиОбмена = НастройкаОбмена.ИмяОбработкиОбмена;
	Если Не ЗначениеЗаполнено(ИмяОбработкиОбмена) Тогда
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" не указана обработка обмена";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	Попытка
		ОбработкаОбмена = Обработки[ИмяОбработкиОбмена];
	Исключение
		ТекстСообщения = "В нетиповом обмене """+НастройкаОбмена.Наименование+""" указана несуществующая обработка обмена """+ИмяОбработкиОбмена+"""";
		РегистрыСведений.СОЛЛЕРС_ЖурналРегистрацииСобытий.ЗафиксироватьИнформационноеСообщение(Событие,Перечисления.СОЛЛЕРС_УровниСобытия.Ошибка,ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат РаботаСОбменомДанными.ВыполнениеОбмена(ОбработкаОбмена,НастройкаОбмена,ДопПараметр,Событие);
КонецФункции

//Упаковать полученную HTML страницу в JSON
Функция УпаковатьHTMLСтраницу(HTMLPage)
	
	СтруктураОтветаHTTP = WebWorkstationОбщиеФункции.ПолучитьСтруктуруОтветовHTTP();
	ContentBase64 = "";
	
	//В зависимости от типа полученного значения, мы упаковываем его в структуру JSON
	Если ТипЗнч(HTMLPage) = Тип("Структура") Тогда
		
		//Можем передать статус-код
		Если ЗначениеЗаполнено(HTMLPage.StatusCode) Тогда
			СтруктураОтветаHTTP.StatusCode = HTMLPage.StatusCode;
		КонецЕсли;
		
		//Можем передать заголовок POST-запроса
		Если ЗначениеЗаполнено(HTMLPage.ContentType) Тогда
			СтруктураОтветаHTTP.ContentType = HTMLPage.ContentType;
		КонецЕсли;
		
		//Перекодируем данные в base64
		Если ЗначениеЗаполнено(HTMLPage.Content) Тогда
			ContentBase64 = WebWorkstationОбщиеФункции.КодироватьСтрокуВBase64(HTMLPage.Content);
			ContentBase64 = WebWorkstationОбщиеФункции.КодироватьСтрокуВBase64(HTMLPage.Content);
		КонецЕсли;
		
	//Если мы получили строку, то просто кодируем её в base64 и всё
	ИначеЕсли ТипЗнч(HTMLPage) = Тип("Строка") Тогда 		
	    ContentBase64 = WebWorkstationОбщиеФункции.КодироватьСтрокуВBase64(HTMLPage);		
	КонецЕсли;
	                                                       
	//Сериализуем в JSON
	ОтветJSON = JSON.Записать_JSON(СтруктураОтветаHTTP);
	
	//Так как библиотека сериализации долго отрабатывает на больших структурах (а наша упакованная HTML страница таковой и является), приходится использовать следующую хитрость:
	ContentBase64 = СтрЗаменить(ContentBase64, Символы.ВК, "");
	ContentBase64 = СтрЗаменить(ContentBase64, Символы.ПС, "");
	ОтветJSON = СтрЗаменить(ОтветJSON, СтруктураОтветаHTTP.ContentBase64, ContentBase64);	
	
	Возврат ОтветJSON;
	
КонецФункции









